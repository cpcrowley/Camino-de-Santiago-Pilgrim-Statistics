(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={"2004":{"1":{"year":"2004","month":"1","pilgrims":696,"gender":[["Hombre",492],["Mujer",204]],"transport":[["Pie",649],["Bicicleta",46],["Caballo",1]],"age":[["30 - 60",415],["< 30",221],["> 60",60]],"motivation":[["Religioso",541],["Religioso y otros",124],["No religioso",31]],"spanishFrom":[["Galicia",166],["Asturias",76],["Madrid",73],["Comunidad Valenciana",72],["Castilla León",51],["Cataluña",44],["Andalucía",38],["Pais Vasco",10],["Baleares",9],["Aragón",9],["Castilla la Mancha",8],["La Rioja",8],["Cantabria",7],["Murcia",7],["Navarra",5],["Extremadura",1]],"byCountry":[["España",584],["Alemania",14],["Estados Unidos",13],["Italia",13],["Australia",12],["Francia",10],["Portugal",8],["Suiza",7],["Holanda",5],["Japón",5],["Brasil",4],["Reino Unido",4],["Belgica",4],["Argentina",3],["Cuba",2],["Irlanda",2],["Austria",2],["Nueva Zelanda",1],["Suecia",1],["Dinamarca",1],["Polonia",1]],"professions":[["Estudiantes",153],["Obreros",100],["Liberales",92],["Empleados",72],["Profesores",59],["Tecnicos",55],["Jubilados",54],["Funcionarios",36],["Parados",27],["Amas de Casa",23],["Agricultores",8],["Artistas",6],["Sacerdotes",5],["Marinos",3],["Directivos",2],["Religiosas",1]],"startingCities":[["Sarria",162],["Cebreiro",124],["Vilafranca",54],["Ponferrada",51],["Astorga",34],["Roncesvalles",33],["S. Jean P. Port",32],["León",26],["Madrid",18],["Pamplona",16],["",15],["Triacastela",14],["Tui",13],["Oviedo",12],["Burgos",11],["Somport",10],["Hospital de Orbigo",8],["Samos",6],["Braga",6],["Ferrol",5],["Sevilla",4],["Canfranc",4],["Francia",4],["Carrión de los Condes",3],["Jaca",3],["Valença do Minho",3],["Ourense",2],["Logroño",2],["Puebla de Sanabria",2],["Gijón",2],["Sto. Domingo de la Calzada",2],["Puente la Reina",2],["Holanda",2],["Resto Portugal",2],["Sahagún",1],["Fonsagrada",1],["Tineo",1],["Com. Valenciana",1],["Frómista",1],["Oporto",1],["Bélgica",1],["Resto C. León",1],["Estella",1]],"startingRegions":[["Lugo",307],["León",175],["Navarra",52],["France",46],["Madrid",18],["City&nbsp;Was Blank",15],["Asturias",15],["Pontevedra",13],["Portugal",12],["Burgos",11],["Huesca",7],["A Coruña",5],["Sevilla",4],["Palencia",4],["La Rioja",4],["Ourense",2],["Zamora",2],["Holland",2],["Valencia",1],["Belgium",1]],"caminos":[["Frances-Camino de",609],["Via de la Plata",26],["Portugues-Camino",25],["Norte-Camino de",16],["Otros caminos",15],["Ingles-Camino",5]]},"2":{"year":"2004","month":"2","pilgrims":1404,"gender":[["Hombre",910],["Mujer",494]],"transport":[["Pie",1328],["Bicicleta",73],["Caballo",3]],"age":[["< 30",718],["30 - 60",636],["> 60",50]],"motivation":[["Religioso",1093],["Religioso y otros",250],["No religioso",61]],"spanishFrom":[["Galicia",391],["Madrid",235],["Cataluña",107],["Comunidad Valenciana",76],["Castilla León",62],["Andalucía",59],["Castilla la Mancha",51],["Canarias",37],["Baleares",29],["Pais Vasco",22],["Aragón",18],["Asturias",18],["Extremadura",14],["Murcia",9],["Navarra",9],["Cantabria",8]],"byCountry":[["España",1145],["Portugal",58],["Alemania",32],["Finlandia",31],["Francia",21],["Brasil",14],["Estados Unidos",13],["México",9],["Italia",7],["Canadá",7],["Chile",7],["Reino Unido",7],["Belgica",6],["Suiza",6],["Irlanda",3],["Austria",3],["Argentina",3],["Rusia",3],["República Checa",2],["Noruega",2],["Uruguay",2],["Australia",2],["Holanda",2],["Sudáfrica",2],["Venezuela",2],["Polonia",2],["España",2],["Japón",2],["Honduras",1],["I. Reunión",1],["Suecia",1],["Puerto Rico",1],["Filipinas",1],["Perú",1]],"professions":[["Estudiantes",487],["Liberales",185],["Obreros",143],["Tecnicos",133],["Empleados",113],["Funcionarios",91],["Profesores",82],["Amas de Casa",46],["Jubilados",45],["Parados",29],["Artistas",18],["Sacerdotes",16],["Agricultores",6],["Directivos",4],["Deportistas",2],["Marinos",2],["Oikoten",1],["Religiosas",1]],"startingCities":[["Sarria",513],["Cebreiro",167],["Tui",117],["Roncesvalles",83],["León",61],["Ponferrada",50],["S. Jean P. Port",40],["Astorga",34],["Ferrol",34],["Vilafranca",29],["Samos",28],["Valença do Minho",25],["Vigo",21],["Pamplona",20],["Triacastela",17],["Burgos",16],["Vilalba",15],["Madrid - C.F.",11],["Resto Portugal",8],["Somport",8],["Jaca",7],["Logroño",7],["Oviedo",6],["Castrojeriz",6],["Verín",6],["Ourense",5],["Arles",5],["Sevilla",5],["Sto. Domingo de la Calzada",4],["Ribadeo",4],["Resto Asturias",4],["Braga",4],["Valencia",4],["Frómista",4],["Mondoñedo",3],["Resto País Vasco",3],["Canfranc",3],["Resto de Extremadura",2],["Sahagún",2],["Puente la Reina",2],["Carrión de los Condes",2],["Vegadeo",2],["San Juan de Ortega",2],["Oporto",2],["Avilés",2],["Bélgica",2],["Lisboa",1],["Guitiriz",1],["Suiza",1],["Com. Valenciana",1],["Mérida",1],["Cataluña",1],["Salamanca",1],["Francia",1],["Resto Cantabria",1]],"startingRegions":[["Lugo",748],["León",176],["Pontevedra",138],["Navarra",105],["France",54],["Portugal",40],["A Coruña",34],["Burgos",24],["Asturias",14],["La Rioja",11],["Madrid",11],["Ourense",11],["Huesca",10],["Palencia",6],["Sevilla",5],["Valencia",5],["Gipuzkoa",3],["Badajoz",3],["Belgium",2],["Switzerland",1],["Barcelona",1],["Salamanca",1],["Cantabria",1]],"caminos":[["Frances-Camino de",1127],["Portugues-Camino",178],["Norte-Camino de",41],["Ingles-Camino",34],["Via de la Plata",20],["Otros caminos",4]]},"3":{"year":"2004","month":"3","pilgrims":3105,"gender":[["Hombre",1838],["Mujer",1267]],"transport":[["Pie",2864],["Bicicleta",201],["Caballo",40]],"age":[["30 - 60",1654],["< 30",1264],["> 60",187]],"motivation":[["Religioso",2219],["Religioso y otros",689],["No religioso",197]],"spanishFrom":[["Galicia",1145],["Madrid",305],["Castilla la Mancha",167],["Castilla León",161],["Comunidad Valenciana",160],["Andalucía",150],["Cataluña",129],["Canarias",99],["Pais Vasco",77],["Asturias",75],["Baleares",73],["La Rioja",51],["Aragón",37],["Extremadura",24],["Navarra",15],["Cantabria",14],["Murcia",11],["Melilla",1],["Ceuta",1]],"byCountry":[["España",2695],["Alemania",114],["Reino Unido",31],["Estados Unidos",30],["Francia",23],["Portugal",22],["Italia",20],["Canadá",18],["México",17],["Austria",16],["Japón",13],["Holanda",12],["Brasil",10],["Suiza",9],["España",8],["Belgica",8],["Argentina",7],["Finlandia",6],["Irlanda",5],["Colombia",5],["Dinamarca",4],["Uruguay",4],["Australia",4],["Polonia",3],["Suecia",3],["Ecuador",3],["Ucrania",2],["Noruega",2],["Chile",2],["Rumania",2],["Taiwán",2],["Nicaragua",1],["Guatemala",1],["Hungría",1],["Perú",1],["Puerto Rico",1]],"professions":[["Estudiantes",822],["Obreros",376],["Empleados",358],["Liberales",349],["Tecnicos",283],["Funcionarios",251],["Amas de Casa",210],["Jubilados",157],["Profesores",132],["Parados",81],["Agricultores",35],["Artistas",24],["Marinos",10],["Sacerdotes",9],["Directivos",6],["Religiosas",1],["Deportistas",1]],"startingCities":[["Sarria",654],["Cebreiro",576],["Tui",325],["Roncesvalles",218],["León",154],["Ponferrada",145],["Astorga",127],["Ferrol",92],["Paradela",88],["Vilafranca",64],["S. Jean P. Port",60],["Pamplona",58],["Oviedo",56],["Ortigueira",47],["Vigo",43],["Triacastela",41],["Burgos",37],["Puebla de Sanabria",32],["Valença do Minho",32],["Ourense",31],["Samos",23],["Logroño",22],["Mondoñedo",18],["Sevilla",16],["Somport",15],["Francia",10],["Frómista",10],["",9],["Ribadeo",7],["Puente la Reina",6],["Zamora",6],["Castilla La Mancha",5],["Sahagún",5],["Le Puy",5],["Oporto",5],["Sto. Domingo de la Calzada",5],["Arles",5],["Jaca",5],["Resto País Vasco",4],["Vilalba",4],["Irún",4],["Avilés",4],["Resto Portugal",3],["Braga",3],["Santander",3],["Estella",2],["Neda",2],["Resto C. León",2],["Italia",2],["Castrojeriz",2],["Resto Cantabria",2],["Madrid - C.F.",1],["Resto de Extremadura",1],["Resto Asturias",1],["Leyre",1],["Bélgica",1],["Cast. la Mancha",1],["San Juan de Ortega",1],["Carrión de los Condes",1],["Holanda",1],["Salamanca",1],["Cataluña",1]],"startingRegions":[["Lugo",1411],["León",497],["Pontevedra",368],["Navarra",285],["A Coruña",141],["France",95],["Asturias",61],["Portugal",43],["Burgos",40],["Zamora",38],["Ourense",31],["La Rioja",27],["Sevilla",16],["Palencia",11],["City&nbsp;Was Blank",9],["Gipuzkoa",8],["Albacete",6],["Huesca",5],["Cantabria",5],["Italy",2],["Barcelona",1],["Belgium",1],["Madrid",1],["Holland",1],["Salamanca",1],["Badajoz",1]],"caminos":[["Frances-Camino de",2349],["Portugues-Camino",411],["Ingles-Camino",141],["Norte-Camino de",103],["Via de la Plata",92],["Otros caminos",9]]},"4":{"year":"2004","month":"4","pilgrims":15556,"gender":[["Hombre",8438],["Mujer",7118]],"transport":[["Pie",14172],["Bicicleta",1284],["Caballo",100]],"age":[["30 - 60",8026],["< 30",6546],["> 60",984]],"motivation":[["Religioso",11202],["Religioso y otros",3112],["No religioso",1242]],"spanishFrom":[["Galicia",4282],["Madrid",2048],["Comunidad Valenciana",1039],["Castilla León",925],["Cataluña",894],["Andalucía",891],["Pais Vasco",622],["Castilla la Mancha",417],["Extremadura",379],["Baleares",274],["Asturias",250],["Aragón",179],["Cantabria",143],["La Rioja",111],["Murcia",108],["Canarias",108],["Navarra",105],["Ceuta",4]],"byCountry":[["España",12779],["Portugal",487],["Alemania",452],["Francia",403],["Estados Unidos",165],["Italia",151],["Belgica",108],["Reino Unido",107],["Austria",105],["México",94],["Brasil",83],["Irlanda",71],["Holanda",52],["Canadá",51],["Finlandia",43],["Suiza",42],["Noruega",37],["Argentina",36],["Dinamarca",35],["Australia",29],["Venezuela",25],["Colombia",25],["Suecia",18],["España",18],["Japón",13],["Andorra",10],["Nueva Zelanda",9],["Chile",9],["Polonia",8],["Ecuador",7],["Marruecos",7],["Eslovaquia",6],["Rumania",6],["Rep. Dominicana",6],["Hungría",5],["Perú",5],["Taiwán",5],["El Salvador",3],["Uruguay",3],["Guatemala",3],["Israel",3],["República Checa",2],["Estonia",2],["Sudáfrica",2],["Panamá",2],["Ucrania",2],["Cuba",2],["Rusia",2],["China",2],["Irán",1],["Camerún",1],["Singapur",1],["Ghana",1],["Nigeria",1],["Letonia",1],["Bielorrusia",1],["Albania",1],["Bolivia",1],["Islandia",1],["Yugoslavia",1],["Vietnam",1],["Bulgaria",1],["Croacia",1],["Herzegovina",1],["Sri Lanka",1]],"professions":[["Estudiantes",4553],["Empleados",2097],["Liberales",1969],["Obreros",1442],["Tecnicos",1386],["Profesores",1050],["Amas de Casa",833],["Jubilados",829],["Funcionarios",813],["Parados",240],["Directivos",90],["Artistas",60],["Agricultores",58],["Marinos",57],["Sacerdotes",53],["Religiosas",15],["Deportistas",11]],"startingCities":[["Sarria",4800],["Cebreiro",2359],["Tui",1462],["Roncesvalles",783],["Ponferrada",757],["León",605],["Vilafranca",536],["Astorga",509],["Ourense",464],["S. Jean P. Port",392],["Ferrol",279],["Valença do Minho",211],["Burgos",207],["Pamplona",183],["Resto Portugal",175],["Vigo",140],["Triacastela",137],["",114],["Le Puy",112],["Francia",99],["Braga",96],["Samos",92],["Sevilla",83],["Vilalba",72],["Somport",63],["Logroño",54],["Paradela",51],["Sahagún",41],["Ribadeo",39],["Oporto",37],["Mérida",37],["Salamanca",37],["Frómista",35],["Oviedo",35],["Resto País Vasco",29],["Resto Asturias",29],["Madrid",25],["Zamora",21],["Sto. Domingo de la Calzada",21],["Arles",21],["Estella",19],["Valencia",17],["Irún",16],["Castilla La Mancha",16],["Carrión de los Condes",15],["Resto C. León",15],["Com. Valenciana",15],["Holanda",13],["Neda",11],["Verín",10],["Suiza",10],["Avilés",9],["Hospital de Orbigo",9],["Resto de Extremadura",9],["Castrojeriz",9],["Fonsagrada",8],["Gijón",7],["Bélgica",7],["Lisboa",7],["Vega de Valcarce",7],["Puente la Reina",7],["Jaca",6],["Lourdes",6],["Nájera",6],["Mondoñedo",6],["Cast. la Mancha",5],["Grandas de Salime",5],["Puebla de Sanabria",4],["Santander",4],["Vegadeo",3],["Tineo",3],["Cataluña",3],["Córdoba",3],["Barcelona",2],["Resto Cantabria",2],["Canfranc",2],["Guitiriz",2],["Austria",2],["Madrid - C.F.",2],["Resto C. León - V.P.",2],["Leyre",2],["Dinamarca",1],["Vincios",1],["París",1],["Badajoz",1],["Oviedo - C.P.",1],["San Juan de Ortega",1],["Valladolid",1],["Bilbao",1]],"startingRegions":[["Lugo",7566],["León",2481],["Pontevedra",1603],["Navarra",994],["France",694],["Portugal",526],["Ourense",474],["A Coruña",290],["Burgos",217],["City&nbsp;Was Blank",114],["Asturias",92],["Sevilla",83],["La Rioja",81],["Palencia",50],["Badajoz",47],["Gipuzkoa",45],["Salamanca",37],["Valencia",32],["Madrid",27],["Zamora",25],["Albacete",21],["Holland",13],["Switzerland",10],["Huesca",8],["Belgium",7],["Cantabria",6],["Barcelona",5],["Córdoba",3],["Austria",2],["Denmark",1],["Valladolid",1],["Vizcaya",1]],"caminos":[["Frances-Camino de",12022],["Portugues-Camino",2129],["Via de la Plata",713],["Ingles-Camino",290],["Norte-Camino de",270],["Otros caminos",114],["Otros caminos",17],["Primitivo-Camino",1]]},"5":{"year":"2004","month":"5","pilgrims":16862,"gender":[["Hombre",9779],["Mujer",7083]],"transport":[["Pie",14314],["Bicicleta",2363],["Caballo",175],["Silla de ruedas",10]],"age":[["30 - 60",11375],["> 60",2830],["< 30",2657]],"motivation":[["Religioso",12407],["Religioso y otros",3378],["No religioso",1077]],"spanishFrom":[["Galicia",3781],["Madrid",1565],["Cataluña",1023],["Castilla León",831],["Andalucía",685],["Comunidad Valenciana",639],["Pais Vasco",598],["Castilla la Mancha",410],["Asturias",374],["Aragón",353],["Canarias",231],["Baleares",153],["Extremadura",135],["Navarra",127],["Cantabria",115],["Murcia",95],["La Rioja",76],["Ceuta",6],["Melilla",4]],"byCountry":[["España",11201],["Alemania",1218],["Francia",1093],["Italia",510],["Estados Unidos",284],["Brasil",275],["Holanda",273],["Austria",224],["Portugal",224],["Reino Unido",210],["Canadá",186],["Belgica",156],["México",117],["Suiza",96],["Australia",84],["Argentina",66],["Dinamarca",66],["Finlandia",62],["Venezuela",55],["Irlanda",55],["España",54],["Noruega",54],["Suecia",35],["Colombia",27],["Nueva Zelanda",24],["Polonia",22],["Chile",20],["Japón",19],["Sudáfrica",17],["Andorra",17],["Uruguay",16],["Eslovenia",14],["República Checa",11],["Hungría",9],["Ecuador",7],["Rumania",6],["Puerto Rico",5],["Luxemburgo",4],["Rusia",4],["Liechtensein",3],["Bolivia",3],["Croacia",3],["Costa Rica",3],["Paraguay",2],["Guatemala",2],["Nicaragua",2],["Eslovaquia",2],["Cuba",2],["Perú",2],["Bulgaria",1],["Grecia",1],["Malta",1],["Tailandia",1],["Ghana",1],["Guinea",1],["Serbia",1],["Singapur",1],["El Salvador",1],["Islas Feroe",1],["Groenlandia",1],["Armenia",1],["India",1],["China",1],["Letonia",1],["Irán",1]],"professions":[["Empleados",3625],["Jubilados",2640],["Liberales",2512],["Tecnicos",1940],["Amas de Casa",1335],["Funcionarios",1220],["Estudiantes",1197],["Obreros",1047],["Profesores",598],["Parados",255],["Directivos",207],["Artistas",104],["Marinos",58],["Agricultores",54],["Sacerdotes",44],["Deportistas",14],["Religiosas",11],["Oikoten",1]],"startingCities":[["Sarria",2821],["Cebreiro",2040],["Roncesvalles",1549],["S. Jean P. Port",1361],["Tui",1078],["León",1020],["Ponferrada",809],["Astorga",573],["Pamplona",460],["Burgos",415],["Vilafranca",403],["Francia",329],["Le Puy",328],["Ourense",280],["Ferrol",239],["Sevilla",193],["Valença do Minho",174],["Vigo",161],["Triacastela",149],["Resto Portugal",146],["Resto C. León",144],["Somport",130],["Arles",111],["Logroño",110],["Samos",103],["Holanda",89],["Neda",87],["Ribadeo",83],["Resto Asturias",73],["Irún",62],["Oviedo",59],["Vegadeo",59],["Sahagún",58],["Oporto",55],["Frómista",52],["Mérida",48],["Puente la Reina",48],["Jaca",47],["Resto País Vasco",42],["",39],["Oviedo - C.P.",39],["Bélgica",37],["Salamanca",37],["Puebla de Sanabria",36],["Vilalba",34],["Carrión de los Condes",30],["Santander",29],["Lourdes",28],["Sto. Domingo de la Calzada",28],["Gijón",28],["Cataluña",27],["Castilla La Mancha",26],["Bilbao",25],["Madrid - C.F.",24],["Zamora",23],["Hospital de Orbigo",20],["Lugo - C.P.",19],["Castrojeriz",19],["Canfranc",18],["Vincios",17],["Mondoñedo",16],["Valencia",16],["Braga",14],["Verín",14],["Avilés",14],["Com. Valenciana",13],["Barcelona",13],["Suiza",13],["Resto Cantabria",12],["Porriño",11],["Grandas de Salime",10],["Granada",9],["Estella",9],["Laza",9],["Fonsagrada",8],["Nájera",8],["Paradela",7],["Resto C. León - V.P.",7],["San Juan de Ortega",6],["Cáceres",6],["Austria",6],["Cast. la Mancha",5],["Hendaya",5],["Madrid",5],["Valcarlos",5],["Lisboa",4],["Resto Asturias - C.P.",4],["París",4],["Reino Unido",3],["Resto de Extremadura",3],["Vega de Valcarce",3],["Valladolid",3],["Fonsagrada - C.P.",2],["Italia",2],["Silleda",2],["Salas",2],["Leyre",2],["Fonfría",2],["Castilla la Mancha",2],["Finlandia",2],["Tineo - C.P.",2],["Badajoz",1],["Córdoba",1],["Finisterra",1],["Rábade",1],["Cea",1],["Grandas de Salime - C.P.",1],["Inglaterra",1],["Dinamarca",1]],"startingRegions":[["Lugo",5284],["León",3038],["France",2296],["Navarra",2073],["Pontevedra",1269],["Burgos",440],["Portugal",393],["A Coruña",327],["Ourense",303],["Asturias",291],["Sevilla",193],["La Rioja",146],["Gipuzkoa",104],["Holland",89],["Palencia",82],["Huesca",65],["Zamora",59],["Badajoz",52],["Cantabria",41],["Barcelona",40],["City&nbsp;Was Blank",39],["Belgium",37],["Salamanca",37],["Albacete",33],["Madrid",29],["Valencia",29],["Vizcaya",25],["Switzerland",13],["Granada",9],["Cáceres",6],["Austria",6],["UK",4],["Valladolid",3],["Italy",2],["Finland",2],["Córdoba",1],["Huelva",1],["Denmark",1]],"caminos":[["Frances-Camino de",13483],["Portugues-Camino",1660],["Via de la Plata",704],["Norte-Camino de",562],["Ingles-Camino",326],["Primitivo-Camino",69],["Otros caminos",39],["Otros caminos",18],["Muxia-Finisterre",1]]},"6":{"year":"2004","month":"6","pilgrims":19298,"gender":[["Hombre",11226],["Mujer",8072]],"transport":[["Pie",15635],["Bicicleta",3476],["Caballo",176],["Silla de ruedas",11]],"age":[["30 - 60",12503],["< 30",3977],["> 60",2818]],"motivation":[["Religioso",14382],["Religioso y otros",3952],["No religioso",964]],"spanishFrom":[["Galicia",3306],["Madrid",1963],["Cataluña",1530],["Comunidad Valenciana",1187],["Castilla León",1059],["Andalucía",1034],["Pais Vasco",627],["Asturias",499],["Castilla la Mancha",479],["Aragón",370],["Canarias",235],["Murcia",223],["Cantabria",205],["Extremadura",169],["Navarra",124],["Baleares",121],["La Rioja",102],["Ceuta",17],["Melilla",2]],"byCountry":[["España",13252],["Alemania",1154],["Francia",957],["Italia",672],["Estados Unidos",436],["Holanda",357],["Brasil",254],["Portugal",250],["Austria",222],["Reino Unido",216],["Belgica",211],["Canadá",209],["México",111],["Suiza",87],["Argentina",85],["Australia",83],["Irlanda",78],["Dinamarca",70],["Venezuela",55],["Suecia",55],["Finlandia",50],["Japón",41],["Noruega",34],["Uruguay",34],["España",34],["Andorra",28],["Colombia",28],["Hungría",25],["Eslovenia",23],["Sudáfrica",21],["República Checa",20],["Ecuador",16],["Chile",15],["Polonia",12],["Nueva Zelanda",11],["Perú",10],["Costa Rica",9],["Cuba",5],["Puerto Rico",4],["Rep. Dominicana",4],["Islandia",4],["Eslovaquia",4],["Israel",4],["Bolivia",4],["Croacia",4],["Taiwán",3],["Bulgaria",3],["Paraguay",3],["Mauritania",2],["San Marino",2],["Albania",2],["Rumania",2],["Luxemburgo",2],["Ucrania",2],["Panamá",1],["El Salvador",1],["Malasia",1],["Bosnia",1],["Guatemala",1],["Ghana",1],["Irán",1],["India",1],["Honduras",1],["Serbia",1],["Groenlandia",1],["Filipinas",1],["Singapur",1],["Túnez",1],["Rusia",1],["Argelia",1]],"professions":[["Empleados",3738],["Liberales",2700],["Jubilados",2486],["Tecnicos",2320],["Estudiantes",2166],["Funcionarios",1467],["Obreros",1371],["Amas de Casa",1276],["Profesores",857],["Parados",329],["Directivos",187],["Artistas",143],["Agricultores",110],["Sacerdotes",67],["Marinos",53],["Deportistas",15],["Religiosas",13]],"startingCities":[["Sarria",3313],["Cebreiro",2465],["Roncesvalles",1948],["S. Jean P. Port",1689],["León",911],["Ponferrada",904],["Astorga",731],["Tui",669],["Pamplona",483],["Vilafranca",424],["Burgos",422],["Le Puy",392],["Francia",362],["Ourense",312],["Somport",229],["Triacastela",203],["Holanda",200],["Sevilla",192],["Oporto",168],["Samos",166],["Resto C. León",141],["Ferrol",136],["Arles",135],["Ribadeo",129],["",127],["Neda",122],["Resto Asturias",112],["Logroño",104],["Resto Portugal",94],["Oviedo",90],["Vega de Valcarce",88],["Vigo",87],["Frómista",85],["Vilalba",82],["Porriño",69],["Valença do Minho",67],["Bélgica",67],["Carrión de los Condes",66],["Mérida",64],["Jaca",63],["Sahagún",63],["Lugo - C.P.",61],["Oviedo - C.P.",51],["Resto País Vasco",50],["Zamora",48],["Verín",47],["Irún",45],["Santander",45],["Avilés",44],["Sto. Domingo de la Calzada",44],["Mondoñedo",41],["Gijón",39],["Puente la Reina",36],["Madrid",35],["Salamanca",32],["Hospital de Orbigo",31],["Resto Cantabria",26],["Fonsagrada",26],["Bilbao",26],["Suiza",25],["Fonsagrada - C.P.",21],["Republica Checa",21],["Estella",19],["Fonfría",18],["Braga",18],["Puebla de Sanabria",17],["Canfranc",17],["Salas",15],["Vezelay",15],["Austria",15],["Madrid - C.F.",14],["Laza",14],["Valencia",13],["Cataluña",11],["Italia",10],["Castilla La Mancha",10],["Barcelona",9],["Lourdes",9],["Lisboa",9],["Hendaya",7],["Huelva",7],["Cáceres",6],["Resto C. León - V.P.",6],["San Juan de Ortega",5],["Valcarlos",4],["Vegadeo",4],["Castrojeriz",4],["Nájera",4],["Córdoba",4],["Tineo - C.P.",4],["Grado",4],["Com. Valenciana",4],["Resto Asturias - C.P.",4],["Resto de Extremadura",3],["Inglaterra",3],["Dinamarca",2],["Grandas de Salime",2],["Castilla la Mancha",2],["Grandas de Salime - C.P.",2],["Granada",2],["Paradela",1],["Tineo",1],["La Bañeza",1],["Roma",1],["París",1],["Finlandia",1],["Artieda",1],["Cast. la Mancha",1],["Reino Unido",1],["Ventas de Narón",1],["Alemania",1],["Cea",1],["Benavente",1],["Luxemburgo",1]],"startingRegions":[["Lugo",6527],["León",3301],["France",2839],["Navarra",2490],["Pontevedra",825],["Burgos",431],["Ourense",373],["Asturias",372],["Portugal",356],["A Coruña",258],["Holland",200],["Sevilla",192],["La Rioja",152],["Palencia",151],["City&nbsp;Was Blank",127],["Gipuzkoa",95],["Huesca",80],["Cantabria",71],["Badajoz",67],["Belgium",67],["Zamora",66],["Madrid",49],["Salamanca",32],["Vizcaya",26],["Switzerland",25],["Czech Republic",21],["Barcelona",20],["Valencia",17],["Austria",15],["Albacete",13],["Italy",11],["Huelva",7],["Cáceres",6],["Córdoba",4],["UK",4],["Denmark",2],["Granada",2],["Luxembourg",1],["Finland",1],["Zaragoza",1],["Germany",1]],"caminos":[["Frances-Camino de",15965],["Portugues-Camino",1181],["Via de la Plata",802],["Norte-Camino de",787],["Ingles-Camino",258],["Primitivo-Camino",163],["Otros caminos",127],["Otros caminos",15]]},"7":{"year":"2004","month":"7","pilgrims":31896,"gender":[["Hombre",17098],["Mujer",14798]],"transport":[["Pie",28128],["Bicicleta",3405],["Caballo",345],["Silla de ruedas",18]],"age":[["< 30",15290],["30 - 60",14847],["> 60",1759]],"motivation":[["Religioso",23764],["Religioso y otros",6403],["No religioso",1729]],"spanishFrom":[["Madrid",5124],["Andalucía",3413],["Castilla León",2709],["Galicia",2440],["Cataluña",2177],["Comunidad Valenciana",1983],["Castilla la Mancha",1448],["Pais Vasco",1442],["Extremadura",1194],["Asturias",640],["Cantabria",596],["Aragón",578],["Murcia",555],["Baleares",436],["Canarias",405],["Navarra",396],["La Rioja",176],["Ceuta",37],["Melilla",27]],"byCountry":[["España",25776],["Francia",986],["Italia",953],["Alemania",765],["Estados Unidos",433],["Portugal",401],["Belgica",294],["Holanda",223],["Reino Unido",187],["Brasil",153],["Austria",150],["Suiza",143],["Polonia",117],["México",112],["Canadá",108],["Dinamarca",104],["Irlanda",102],["Argentina",90],["Hungría",65],["España",56],["Venezuela",54],["Eslovenia",54],["Australia",52],["Suecia",48],["Japón",46],["República Checa",43],["Colombia",42],["Noruega",29],["Finlandia",29],["Chile",25],["Puerto Rico",23],["Ecuador",18],["Andorra",17],["Eslovaquia",13],["Uruguay",13],["Ucrania",11],["Perú",11],["Marruecos",11],["Malta",11],["Rumania",10],["Sudáfrica",10],["Filipinas",7],["Costa Rica",7],["Luxemburgo",6],["Lituania",5],["Bolivia",5],["Rusia",5],["Rep. Dominicana",4],["El Salvador",4],["Estonia",4],["Croacia",4],["Islandia",4],["Kenya",4],["Bulgaria",4],["Nueva Zelanda",3],["Cuba",3],["China",3],["Panamá",3],["Líbano",3],["Bosnia",3],["Taiwán",2],["Albania",2],["India",2],["Turquía",2],["Serbia",1],["Grecia",1],["Bielorrusia",1],["Gambia",1],["Nicaragua",1],["Mauricio",1],["Guinea Ecuatorial",1],["Groenlandia",1],["Yugoslavia",1],["Angola",1],["Nigeria",1],["Vietnam",1],["Argelia",1],["Haití",1]],"professions":[["Estudiantes",12029],["Empleados",3855],["Profesores",3119],["Liberales",2986],["Tecnicos",2671],["Funcionarios",1729],["Jubilados",1546],["Amas de Casa",1443],["Obreros",1391],["Parados",275],["Sacerdotes",250],["Directivos",213],["Artistas",189],["Agricultores",108],["Religiosas",41],["Marinos",36],["Deportistas",15]],"startingCities":[["Sarria",6263],["Cebreiro",3683],["Ponferrada",2668],["Tui",2090],["Roncesvalles",2027],["León",1816],["Astorga",1738],["S. Jean P. Port",1264],["Vilafranca",1124],["Triacastela",534],["Burgos",506],["Pamplona",473],["Ourense",427],["Ribadeo",412],["Le Puy",333],["Samos",302],["Resto Portugal",300],["Vilalba",294],["Francia",292],["Santander",290],["Ferrol",280],["Resto C. León",260],["Valença do Minho",251],["Somport",194],["Mérida",180],["Resto Asturias",175],["Logroño",170],["Salamanca",161],["Hospital de Orbigo",142],["Oporto",139],["Lugo - C.P.",138],["Oviedo - C.P.",137],["Sevilla",128],["Oviedo",127],["Resto País Vasco",121],["Irún",113],["Vigo",110],["Holanda",108],["Verín",107],["Bélgica",106],["Castilla La Mancha",104],["",102],["Zamora",95],["Sahagún",93],["Neda",82],["Sto. Domingo de la Calzada",82],["Frómista",78],["Carrión de los Condes",68],["Arles",67],["Jaca",66],["Mondoñedo",63],["Avilés",59],["Fonsagrada - C.P.",57],["Resto Cantabria",54],["Vega de Valcarce",48],["Bilbao",46],["Madrid",45],["Gijón",45],["Resto C. León - V.P.",45],["Estella",37],["Puebla de Sanabria",33],["Suiza",33],["Rábade",33],["Braga",33],["Puente la Reina",32],["La Bañeza",31],["Valencia",29],["Grandas de Salime - C.P.",27],["Viveiro",24],["Madrid - C.F.",19],["Cataluña",18],["Porriño",18],["Vezelay",18],["Italia",17],["Lourdes",16],["Austria",16],["Resto Asturias - C.P.",16],["Tineo - C.P.",14],["Fonsagrada",13],["Hendaya",12],["Canfranc",12],["Reino Unido",9],["Com. Valenciana",9],["Cast. la Mancha",8],["Barcelona",8],["Nájera",8],["Resto de Extremadura",7],["San Juan de Ortega",6],["Castrojeriz",6],["Lisboa",5],["Salas",4],["Cáceres",4],["Huelva",3],["Luxemburgo",3],["París",3],["Laza",3],["Tineo",3],["Badajoz",3],["Betanzos",2],["Valladolid",2],["Republica Checa",2],["Vegadeo",2],["Benavente",2],["Roma",2],["Irlanda",1],["Finlandia",1],["Leyre",1],["Grandas de Salime",1],["Fonfría",1],["Grado",1],["La Mesa",1],["Córdoba",1],["Granada",1]],"startingRegions":[["Lugo",11784],["León",7965],["Navarra",2570],["Pontevedra",2218],["France",2199],["Portugal",728],["Asturias",612],["Ourense",537],["Burgos",518],["A Coruña",364],["Cantabria",344],["La Rioja",260],["Gipuzkoa",234],["Badajoz",190],["Salamanca",161],["Palencia",146],["Zamora",130],["Sevilla",128],["Albacete",112],["Holland",108],["Belgium",106],["City&nbsp;Was Blank",102],["Huesca",78],["Madrid",64],["Vizcaya",46],["Valencia",38],["Huelva",36],["Switzerland",33],["Barcelona",26],["Italy",19],["Austria",16],["UK",9],["Cáceres",4],["Luxembourg",3],["Valladolid",2],["Czech Republic",2],["Ireland",1],["Finland",1],["Córdoba",1],["Granada",1]],"caminos":[["Frances-Camino de",24790],["Portugues-Camino",2946],["Norte-Camino de",1888],["Via de la Plata",1382],["Primitivo-Camino",395],["Ingles-Camino",364],["Otros caminos",102],["Otros caminos",29]]},"8":{"year":"2004","month":"8","pilgrims":45605,"gender":[["Hombre",25016],["Mujer",20589]],"transport":[["Pie",39980],["Bicicleta",5230],["Caballo",385],["Silla de ruedas",10]],"age":[["< 30",22590],["30 - 60",21717],["> 60",1298]],"motivation":[["Religioso",35921],["Religioso y otros",7494],["No religioso",2190]],"spanishFrom":[["Madrid",7868],["Andalucía",5795],["Cataluña",4527],["Comunidad Valenciana",4442],["Galicia",2758],["Castilla León",2452],["Castilla la Mancha",1986],["Pais Vasco",1938],["Murcia",1014],["Extremadura",1000],["Aragón",834],["Asturias",475],["Cantabria",431],["Canarias",409],["Navarra",332],["Baleares",303],["La Rioja",200],["Ceuta",68],["Melilla",27]],"byCountry":[["España",36859],["Italia",4055],["Francia",1066],["Alemania",889],["Portugal",712],["Belgica",189],["Reino Unido",170],["Austria",144],["Holanda",124],["Estados Unidos",124],["Brasil",103],["Polonia",102],["México",83],["Hungría",76],["Canadá",69],["Argentina",67],["Colombia",64],["Suiza",58],["Irlanda",52],["Suecia",46],["España",43],["Dinamarca",42],["República Checa",40],["Japón",38],["Ecuador",33],["Venezuela",32],["Andorra",27],["Rusia",26],["Chile",25],["Perú",24],["Eslovenia",24],["Australia",21],["Uruguay",17],["Eslovaquia",13],["Noruega",13],["Rumania",9],["Paraguay",8],["Bolivia",8],["Albania",6],["Panamá",6],["Honduras",6],["Cuba",5],["India",5],["Bulgaria",4],["Israel",4],["Ucrania",4],["Finlandia",4],["Nueva Zelanda",4],["Letonia",4],["Marruecos",4],["Luxemburgo",3],["Turquía",3],["Rep. Dominicana",3],["Filipinas",3],["Malta",3],["Sudáfrica",3],["China",3],["Armenia",2],["Guatemala",2],["El Salvador",2],["Senegal",2],["San Marino",2],["Croacia",2],["Tailandia",1],["Nicaragua",1],["Nigeria",1],["Lituania",1],["Benin",1],["Angola",1],["Madagascar",1],["Islandia",1],["Etiopía",1],["Yugoslavia",1],["Taiwán",1],["Egipto",1],["Cabo Verde",1],["Congo",1],["Argelia",1],["Puerto Rico",1],["Bosnia",1],["Mozambique",1]],"professions":[["Estudiantes",15569],["Empleados",7110],["Liberales",5320],["Tecnicos",4154],["Profesores",3910],["Obreros",3211],["Amas de Casa",1754],["Funcionarios",1582],["Jubilados",963],["Sacerdotes",573],["Parados",458],["Directivos",315],["Artistas",236],["Religiosas",195],["Agricultores",173],["Marinos",38],["Deportistas",36],["Oikoten",8]],"startingCities":[["Sarria",9467],["Cebreiro",4014],["Ourense",3179],["Roncesvalles",2981],["Ponferrada",2846],["Oviedo - C.P.",2645],["Tui",2515],["León",2348],["S. Jean P. Port",1643],["Astorga",1560],["Vilafranca",1083],["Burgos",831],["Triacastela",795],["Fonsagrada - C.P.",732],["Neda",681],["Pamplona",646],["Samos",462],["Ribadeo",441],["Vilalba",380],["Resto C. León",363],["Ferrol",361],["Valença do Minho",349],["Finisterra",245],["Somport",245],["Oviedo",233],["Resto Portugal",228],["Francia",227],["Resto Asturias",221],["Le Puy",214],["Lugo - C.P.",183],["Irún",180],["Logroño",162],["Frómista",145],["Sevilla",132],["Vigo",123],["",122],["Jaca",117],["Resto País Vasco",116],["Sahagún",115],["Puente la Reina",104],["Oporto",104],["Puebla de Sanabria",100],["Santander",95],["Carrión de los Condes",90],["Sto. Domingo de la Calzada",87],["Arles",79],["Mérida",77],["Mondoñedo",76],["Salamanca",72],["Estella",64],["Cataluña",63],["Bilbao",62],["Zamora",62],["Holanda",60],["Resto Cantabria",59],["Braga",56],["Hospital de Orbigo",55],["Avilés",50],["Madrid - C.F.",49],["Cast. la Mancha",47],["Verín",46],["Bélgica",44],["Castilla La Mancha",43],["Resto Asturias - C.P.",35],["Porriño",31],["Vega de Valcarce",30],["Gijón",30],["Madrid",29],["Italia",28],["Laza",28],["Lourdes",27],["Valencia",27],["Barcelona",24],["Castrojeriz",24],["Canfranc",24],["Resto C. León - V.P.",21],["Com. Valenciana",21],["Fonsagrada",20],["Grandas de Salime - C.P.",18],["Lisboa",18],["Hendaya",15],["Nájera",14],["Suiza",14],["Cáceres",13],["Grandas de Salime",12],["Austria",11],["Granada",11],["Tineo - C.P.",9],["Salas",9],["Peñaseita",8],["San Juan de Ortega",8],["Vezelay",7],["Valcarlos",6],["Tineo",6],["Reino Unido",5],["Benavente",4],["Paradela",4],["Republica Checa",4],["Resto de Extremadura",4],["París",4],["Badajoz",3],["Viveiro",3],["Huelva",3],["Córdoba",3],["Dinamarca",2],["Pontedeume",2],["Vincios",2],["Muxia",2],["Irlanda",1],["Leyre",1],["Ortigueira",1],["Vegadeo",1],["Luxemburgo",1],["Inglaterra",1],["Grado",1],["El Escamplero",1]],"startingRegions":[["Lugo",16577],["León",8421],["Navarra",3802],["Asturias",3279],["Ourense",3253],["Pontevedra",2671],["France",2461],["A Coruña",1292],["Burgos",863],["Portugal",755],["Gipuzkoa",296],["La Rioja",263],["Palencia",235],["Zamora",166],["Cantabria",154],["Huesca",141],["Sevilla",132],["City&nbsp;Was Blank",122],["Albacete",90],["Barcelona",87],["Badajoz",84],["Madrid",78],["Salamanca",72],["Vizcaya",62],["Holland",60],["Valencia",48],["Belgium",44],["Italy",28],["Switzerland",14],["Cáceres",13],["Austria",11],["Granada",11],["UK",6],["Czech Republic",4],["Huelva",3],["Córdoba",3],["Denmark",2],["Ireland",1],["Luxembourg",1]],"caminos":[["Frances-Camino de",31267],["Via de la Plata",3830],["Primitivo-Camino",3641],["Portugues-Camino",3426],["Norte-Camino de",2000],["Ingles-Camino",1045],["Muxia-Finisterre",247],["Otros caminos",122],["Otros caminos",27]]},"9":{"year":"2004","month":"9","pilgrims":22753,"gender":[["Hombre",12738],["Mujer",10015]],"transport":[["Pie",19313],["Bicicleta",3191],["Caballo",243],["Silla de ruedas",6]],"age":[["30 - 60",12853],["< 30",7565],["> 60",2335]],"motivation":[["Religioso",15958],["Religioso y otros",5429],["No religioso",1366]],"spanishFrom":[["Galicia",3143],["Madrid",2814],["Andalucía",1936],["Cataluña",1617],["Comunidad Valenciana",1556],["Castilla León",1492],["Castilla la Mancha",731],["Pais Vasco",628],["Asturias",500],["Murcia",387],["Aragón",376],["Extremadura",297],["Navarra",269],["Cantabria",266],["Canarias",265],["Baleares",201],["La Rioja",110],["Ceuta",37],["Melilla",4]],"byCountry":[["España",16629],["Alemania",1192],["Francia",945],["Italia",858],["Portugal",534],["Estados Unidos",228],["Reino Unido",220],["Holanda",207],["Austria",195],["Brasil",190],["México",179],["Belgica",176],["Canadá",154],["Irlanda",101],["Suiza",95],["Argentina",88],["Australia",76],["Venezuela",74],["Polonia",56],["Dinamarca",50],["Suecia",50],["Noruega",47],["Hungría",42],["Finlandia",40],["España",39],["Colombia",31],["Japón",30],["Eslovenia",20],["República Checa",19],["Eslovaquia",17],["Nueva Zelanda",17],["Chile",17],["Uruguay",14],["Ecuador",13],["Sudáfrica",11],["Andorra",11],["Puerto Rico",9],["Perú",9],["Israel",9],["Rumania",9],["Guatemala",5],["Filipinas",5],["Luxemburgo",3],["Lituania",3],["Marruecos",3],["Bolivia",3],["Bulgaria",2],["Rep. Dominicana",2],["Estonia",2],["Singapur",2],["Cuba",2],["Panamá",2],["Croacia",2],["India",2],["Belice",1],["Honduras",1],["Mónaco",1],["China",1],["Turquía",1],["Islandia",1],["Tailandia",1],["Nigeria",1],["Grecia",1],["Arabia Saudita",1],["Kenya",1],["Nicaragua",1],["Guinea Ecuatorial",1]],"professions":[["Estudiantes",4841],["Empleados",4270],["Liberales",2966],["Tecnicos",2714],["Jubilados",2053],["Funcionarios",1410],["Obreros",1289],["Amas de Casa",1241],["Profesores",934],["Parados",270],["Directivos",266],["Artistas",153],["Sacerdotes",132],["Agricultores",113],["Marinos",55],["Religiosas",29],["Deportistas",17]],"startingCities":[["Sarria",5786],["Cebreiro",2315],["Roncesvalles",1786],["Ponferrada",1462],["León",1361],["S. Jean P. Port",1289],["Tui",1031],["Astorga",977],["Pamplona",551],["Vilafranca",546],["Burgos",477],["Ourense",400],["Le Puy",359],["Ferrol",267],["Valença do Minho",258],["Samos",253],["Triacastela",219],["Francia",217],["Resto Portugal",199],["Resto C. León",183],["Oporto",154],["Resto Asturias",129],["Somport",118],["Oviedo - C.P.",113],["Logroño",108],["Frómista",108],["Sevilla",101],["Sahagún",100],["Holanda",88],["Arles",79],["Lugo - C.P.",68],["Bilbao",67],["",64],["Carrión de los Condes",59],["Ribadeo",57],["Neda",57],["Irún",54],["Oviedo",53],["Puebla de Sanabria",51],["Vilalba",51],["Vigo",50],["Sto. Domingo de la Calzada",48],["Resto País Vasco",46],["Castilla La Mancha",46],["Puente la Reina",45],["Mérida",43],["Madrid - C.F.",43],["Hospital de Orbigo",39],["Santander",39],["Vega de Valcarce",39],["Zamora",38],["Gijón",35],["Porriño",35],["Jaca",35],["Mondoñedo",32],["Bélgica",30],["Braga",30],["Salamanca",30],["Suiza",26],["Avilés",24],["Resto Cantabria",24],["Valencia",21],["Canfranc",21],["Estella",20],["Resto Asturias - C.P.",19],["Hendaya",18],["Verín",17],["Castrojeriz",14],["Austria",13],["Lourdes",13],["Cataluña",12],["Laza",12],["Vezelay",10],["Cáceres",9],["Reino Unido",8],["Fonsagrada - C.P.",8],["Grandas de Salime - C.P.",8],["Cast. la Mancha",8],["Nájera",8],["Com. Valenciana",7],["Lisboa",7],["Finisterra",7],["Tineo - C.P.",7],["Italia",7],["Tineo",7],["Resto C. León - V.P.",6],["Barcelona",5],["Huelva",5],["París",5],["Fonsagrada",5],["Roma",4],["Grandas de Salime",4],["Inglaterra",4],["Valcarlos",4],["Granada",4],["Madrid",4],["San Juan de Ortega",4],["Muxia",3],["La Bañeza",3],["Benavente",3],["Peñaseita",2],["Salas",2],["Vincios",2],["Resto de Extremadura",2],["Badajoz",2],["Murcia",1],["Córdoba",1],["Grado",1],["Vegadeo",1],["Leyre",1],["Paradela",1],["Grecia",1]],"startingRegions":[["Lugo",8795],["León",4716],["Navarra",2407],["France",2108],["Pontevedra",1118],["Portugal",648],["Burgos",495],["Ourense",429],["Asturias",405],["A Coruña",334],["Palencia",167],["La Rioja",164],["Sevilla",101],["Gipuzkoa",100],["Zamora",92],["Holland",88],["Vizcaya",67],["City&nbsp;Was Blank",64],["Cantabria",63],["Huesca",56],["Albacete",54],["Madrid",47],["Badajoz",47],["Belgium",30],["Salamanca",30],["Valencia",28],["Switzerland",26],["Barcelona",17],["Austria",13],["UK",12],["Italy",11],["Cáceres",9],["Huelva",5],["Granada",4],["Murcia",1],["Greece",1],["Córdoba",1]],"caminos":[["Frances-Camino de",18916],["Portugues-Camino",1766],["Via de la Plata",777],["Norte-Camino de",646],["Ingles-Camino",324],["Primitivo-Camino",228],["Otros caminos",64],["Otros caminos",22],["Muxia-Finisterre",10]]},"10":{"year":"2004","month":"10","pilgrims":14556,"gender":[["Hombre",8337],["Mujer",6219]],"transport":[["Pie",12951],["Bicicleta",1496],["Caballo",106],["Silla de ruedas",3]],"age":[["30 - 60",8975],["< 30",3933],["> 60",1648]],"motivation":[["Religioso",10784],["Religioso y otros",2932],["No religioso",840]],"spanishFrom":[["Galicia",2861],["Madrid",1848],["Cataluña",872],["Andalucía",780],["Comunidad Valenciana",700],["Castilla León",622],["Pais Vasco",457],["Asturias",365],["Castilla la Mancha",258],["Aragón",228],["Baleares",175],["Canarias",158],["Murcia",153],["Cantabria",113],["Navarra",104],["Extremadura",83],["La Rioja",61],["Ceuta",5],["Melilla",1]],"byCountry":[["España",9844],["Alemania",842],["Francia",787],["Portugal",418],["Italia",335],["Brasil",263],["México",237],["Canadá",219],["Estados Unidos",215],["Reino Unido",214],["Suiza",121],["Austria",109],["Holanda",107],["Belgica",84],["Australia",81],["Irlanda",79],["Argentina",74],["Venezuela",69],["Colombia",40],["Noruega",39],["Chile",37],["Dinamarca",32],["España",30],["Suecia",29],["Finlandia",25],["Japón",24],["Nueva Zelanda",23],["Hungría",21],["Polonia",20],["Puerto Rico",17],["Sudáfrica",17],["Uruguay",12],["Israel",9],["República Checa",9],["Eslovenia",7],["Andorra",6],["Perú",6],["Eslovaquia",5],["Rusia",5],["Mauricio",5],["China",4],["Cuba",3],["Rumania",3],["Ucrania",3],["Haití",2],["El Salvador",2],["Honduras",2],["Malta",2],["Costa Rica",2],["Guatemala",2],["Singapur",2],["Filipinas",2],["Serbia",1],["Turquía",1],["Tanzania",1],["Groenlandia",1],["Panamá",1],["Rep. Dominicana",1],["Zimbabwe",1],["Malasia",1],["Ecuador",1],["India",1],["Lituania",1]],"professions":[["Empleados",2491],["Estudiantes",2372],["Liberales",2325],["Tecnicos",1857],["Jubilados",1530],["Funcionarios",957],["Amas de Casa",922],["Obreros",782],["Profesores",615],["Parados",242],["Directivos",154],["Artistas",113],["Agricultores",78],["Sacerdotes",59],["Marinos",40],["Religiosas",11],["Deportistas",8]],"startingCities":[["Sarria",3844],["Cebreiro",1447],["Roncesvalles",1199],["S. Jean P. Port",1197],["León",702],["Ponferrada",685],["Tui",685],["Astorga",475],["Ourense",406],["Le Puy",336],["Vilafranca",306],["Pamplona",286],["Burgos",230],["Francia",214],["Oporto",165],["Triacastela",153],["Samos",131],["Resto Asturias",125],["Valença do Minho",121],["Somport",121],["Resto C. León",119],["Sevilla",106],["Resto Portugal",95],["Vilalba",79],["Oviedo - C.P.",79],["Ferrol",68],["Logroño",64],["Irún",46],["Jaca",45],["Lugo - C.P.",42],["Suiza",37],["Arles",36],["Porriño",36],["Puente la Reina",35],["Sahagún",35],["Resto País Vasco",35],["Neda",34],["Santander",32],["Mérida",28],["Holanda",28],["Madrid",28],["Oviedo",28],["Carrión de los Condes",27],["Ribadeo",26],["Salamanca",26],["Vigo",25],["Frómista",25],["Lourdes",24],["Zamora",23],["Sto. Domingo de la Calzada",22],["",20],["Verín",20],["Resto Cantabria",19],["Castilla La Mancha",18],["Fonsagrada - C.P.",18],["Resto Asturias - C.P.",18],["Hospital de Orbigo",18],["Madrid - C.F.",17],["Braga",16],["Estella",15],["Bélgica",15],["Canfranc",13],["Bilbao",13],["Valencia",12],["Gijón",12],["Cataluña",11],["Puebla de Sanabria",11],["Grandas de Salime - C.P.",10],["Austria",8],["Reino Unido",7],["Salas",6],["Com. Valenciana",6],["Avilés",6],["Lisboa",5],["Italia",5],["Cáceres",5],["Inglaterra",5],["Tineo - C.P.",5],["Mondoñedo",5],["Hendaya",5],["Ortigueira",5],["Vegadeo",4],["Castrojeriz",4],["Huelva",3],["San Juan de Ortega",3],["Barcelona",2],["Petín",2],["Resto C. León - V.P.",2],["Finlandia",2],["Nájera",2],["Badajoz",2],["Fonsagrada",2],["Paradela",2],["Roma",2],["Granada",2],["Tineo",2],["Dinamarca",1],["La Bañeza",1],["Muxia",1],["Republica Checa",1],["Finisterra",1],["Mella",1],["París",1],["Cast. la Mancha",1],["Grandas de Salime",1],["Laza",1]],"startingRegions":[["Lugo",5749],["León",2343],["France",1934],["Navarra",1535],["Pontevedra",746],["Ourense",429],["Portugal",402],["Asturias",296],["Burgos",237],["A Coruña",109],["Sevilla",106],["La Rioja",88],["Gipuzkoa",81],["Huesca",58],["Palencia",52],["Cantabria",51],["Madrid",45],["Switzerland",37],["Zamora",34],["Badajoz",30],["Holland",28],["Salamanca",26],["City&nbsp;Was Blank",20],["Albacete",19],["Valencia",18],["Belgium",15],["Vizcaya",13],["Barcelona",13],["UK",12],["Austria",8],["Italy",7],["Cáceres",5],["Huelva",3],["Finland",2],["Granada",2],["Denmark",1],["Czech Republic",1],["Málaga",1]],"caminos":[["Frances-Camino de",11964],["Portugues-Camino",1148],["Via de la Plata",684],["Norte-Camino de",440],["Primitivo-Camino",179],["Ingles-Camino",107],["Otros caminos",20],["Otros caminos",12],["Muxia-Finisterre",2]]},"11":{"year":"2004","month":"11","pilgrims":4410,"gender":[["Hombre",2454],["Mujer",1956]],"transport":[["Pie",4066],["Bicicleta",308],["Caballo",34],["Silla de ruedas",2]],"age":[["30 - 60",3056],["< 30",984],["> 60",370]],"motivation":[["Religioso",3239],["Religioso y otros",957],["No religioso",214]],"spanishFrom":[["Galicia",1542],["Madrid",390],["Baleares",224],["Cataluña",223],["Castilla León",186],["Asturias",158],["Andalucía",156],["Comunidad Valenciana",144],["Pais Vasco",73],["Castilla la Mancha",37],["Aragón",34],["Canarias",32],["Murcia",27],["Navarra",24],["Extremadura",20],["Cantabria",16],["La Rioja",12],["Ceuta",2],["Melilla",1]],"byCountry":[["España",3301],["Venezuela",194],["Francia",191],["Alemania",95],["Portugal",73],["Brasil",59],["Canadá",58],["Estados Unidos",54],["Reino Unido",39],["Argentina",33],["Italia",33],["Suecia",32],["Suiza",27],["Belgica",26],["Australia",22],["Austria",22],["Holanda",22],["México",17],["Japón",16],["Colombia",13],["Polonia",11],["Chile",10],["Irlanda",8],["República Checa",7],["Nueva Zelanda",5],["España",5],["Dinamarca",5],["Noruega",4],["Finlandia",4],["Rep. Dominicana",3],["Eslovenia",3],["Perú",3],["Costa Rica",3],["Ecuador",2],["Uruguay",2],["Grecia",1],["Ucrania",1],["Eslovaquia",1],["Sudáfrica",1],["China",1],["Estonia",1],["Lituania",1],["Armenia",1]],"professions":[["Empleados",916],["Liberales",724],["Tecnicos",491],["Obreros",410],["Estudiantes",385],["Amas de Casa",374],["Jubilados",322],["Funcionarios",271],["Profesores",222],["Parados",108],["Directivos",57],["Artistas",55],["Agricultores",30],["Marinos",24],["Sacerdotes",12],["Deportistas",4],["Religiosas",4],["Oikoten",1]],"startingCities":[["Sarria",983],["Cebreiro",766],["Roncesvalles",323],["S. Jean P. Port",271],["Tui",248],["Ponferrada",159],["León",151],["Astorga",122],["Le Puy",98],["Francia",73],["Triacastela",73],["Valença do Minho",65],["Pamplona",60],["Ourense",56],["Vilafranca",56],["Burgos",56],["Neda",52],["Zamora",51],["Republica Checa",43],["Oviedo - C.P.",42],["Somport",40],["Ferrol",38],["Resto C. León",38],["Resto Asturias",36],["Avilés",36],["Vigo",27],["Logroño",24],["Lugo - C.P.",21],["Resto Portugal",20],["Santander",19],["Sto. Domingo de la Calzada",18],["Samos",17],["Oviedo",16],["Arles",15],["Jaca",14],["Sevilla",14],["Oporto",13],["Verín",13],["Castilla La Mancha",12],["Fonsagrada",12],["Vezelay",12],["Puente la Reina",11],["Vilalba",11],["Salamanca",11],["Cataluña",10],["Bélgica",10],["Suiza",10],["Holanda",10],["Laza",9],["Sahagún",8],["Irún",8],["Muxia",7],["Frómista",6],["Mérida",6],["",6],["Com. Valenciana",6],["París",5],["Braga",5],["Resto País Vasco",4],["Ortigueira",4],["Pontedeume",4],["Canfranc",4],["Bilbao",3],["Lourdes",3],["Gijón",3],["Ribadeo",3],["Madrid - C.F.",3],["Tineo - C.P.",3],["Mondoñedo",3],["Resto C. León - V.P.",3],["Castrojeriz",2],["San Juan de Ortega",2],["Granada",2],["Austria",2],["Nájera",2],["Puebla de Sanabria",2],["Hendaya",2],["Resto Asturias - C.P.",2],["Estella",2],["Hospital de Orbigo",2],["Porriño",1],["Finisterra",1],["Huelva",1],["Tineo",1],["Fonsagrada - C.P.",1],["Barcelona",1],["Resto Cantabria",1],["Carrión de los Condes",1]],"startingRegions":[["Lugo",1890],["León",539],["France",519],["Navarra",396],["Pontevedra",276],["Asturias",139],["A Coruña",106],["Portugal",103],["Ourense",78],["Burgos",60],["Zamora",53],["La Rioja",44],["Czech Republic",43],["Cantabria",20],["Huesca",18],["Sevilla",14],["Albacete",12],["Gipuzkoa",12],["Barcelona",11],["Salamanca",11],["Switzerland",10],["Holland",10],["Belgium",10],["Palencia",7],["Valencia",6],["Badajoz",6],["City&nbsp;Was Blank",6],["Vizcaya",3],["Madrid",3],["Granada",2],["Austria",2],["Huelva",1]],"caminos":[["Frances-Camino de",3512],["Portugues-Camino",379],["Via de la Plata",180],["Norte-Camino de",158],["Ingles-Camino",98],["Primitivo-Camino",69],["Muxia-Finisterre",8],["Otros caminos",6]]},"12":{"year":"2004","month":"12","pilgrims":3803,"gender":[["Hombre",2105],["Mujer",1698]],"transport":[["Pie",3556],["Bicicleta",183],["Caballo",64]],"age":[["30 - 60",2543],["< 30",1038],["> 60",222]],"motivation":[["Religioso",2820],["Religioso y otros",808],["No religioso",175]],"spanishFrom":[["Galicia",1963],["Madrid",324],["Comunidad Valenciana",168],["Asturias",164],["Cataluña",154],["Andalucía",141],["Castilla León",134],["Pais Vasco",115],["Baleares",59],["Castilla la Mancha",46],["Aragón",42],["La Rioja",36],["Navarra",26],["Extremadura",19],["Cantabria",16],["Murcia",14],["Canarias",13],["Melilla",3]],"byCountry":[["España",3437],["Portugal",54],["Francia",45],["Italia",31],["Brasil",25],["Alemania",24],["Estados Unidos",21],["Argentina",19],["México",15],["Belgica",14],["Australia",13],["Reino Unido",11],["Venezuela",11],["Canadá",10],["Japón",9],["Austria",8],["Suiza",7],["Chile",6],["Irlanda",5],["Holanda",4],["España",4],["Polonia",3],["Ecuador",2],["Hungría",2],["Colombia",2],["Uruguay",2],["Suecia",2],["Rumania",2],["Croacia",2],["Indonesia",2],["Israel",1],["Ucrania",1],["Cuba",1],["Andorra",1],["Bulgaria",1],["Bolivia",1],["Perú",1],["Lituania",1],["Aruba",1],["Dinamarca",1]],"professions":[["Empleados",655],["Estudiantes",558],["Liberales",532],["Tecnicos",477],["Obreros",457],["Amas de Casa",306],["Profesores",227],["Funcionarios",221],["Jubilados",179],["Parados",69],["Artistas",42],["Agricultores",27],["Directivos",20],["Marinos",14],["Sacerdotes",13],["Religiosas",3],["Deportistas",3]],"startingCities":[["Sarria",977],["Cebreiro",739],["Tui",492],["Roncesvalles",178],["León",129],["Ponferrada",112],["S. Jean P. Port",105],["Ferrol",72],["Oviedo - C.P.",68],["Astorga",64],["Vilafranca",61],["Ourense",54],["Resto País Vasco",49],["Oviedo",48],["Lugo - C.P.",47],["Valença do Minho",38],["Resto Asturias",35],["Triacastela",35],["Resto C. León",34],["Samos",31],["Neda",28],["Ribadeo",26],["",24],["Somport",23],["Vigo",21],["Burgos",19],["Pamplona",17],["Le Puy",17],["Francia",15],["Castilla La Mancha",15],["Resto Portugal",14],["Sevilla",13],["Porriño",13],["Mondoñedo",13],["Muxia",11],["Oporto",9],["Logroño",9],["Vilalba",9],["Sto. Domingo de la Calzada",7],["Jaca",7],["Santander",7],["Bélgica",7],["Arles",7],["Suiza",6],["Irún",6],["Salamanca",6],["Resto Asturias - C.P.",5],["Puebla de Sanabria",5],["Fonsagrada - C.P.",4],["Frómista",4],["Madrid - C.F.",4],["Resto Cantabria",4],["Reino Unido",4],["Vegadeo",4],["Carrión de los Condes",3],["Canfranc",3],["Salas",3],["Vezelay",3],["Sahagún",3],["Cataluña",3],["Verín",2],["Hendaya",2],["Estella",2],["Puente la Reina",2],["Lourdes",2],["Grandas de Salime - C.P.",2],["Tineo - C.P.",2],["Zamora",2],["Com. Valenciana",2],["Leyre",1],["Laza",1],["Grandas de Salime",1],["Hospital de Orbigo",1],["Bilbao",1],["Fonsagrada",1],["San Juan de Ortega",1],["Valcarlos",1],["Lisboa",1],["Finisterra",1],["Barcelona",1],["Grecia",1],["Braga",1],["Resto C. León - V.P.",1],["Vega de Valcarce",1],["Paradela",1]],"startingRegions":[["Lugo",1883],["Pontevedra",526],["León",406],["Navarra",201],["France",174],["Asturias",168],["A Coruña",112],["Portugal",63],["Ourense",57],["Gipuzkoa",55],["City&nbsp;Was Blank",24],["Burgos",20],["La Rioja",16],["Albacete",15],["Sevilla",13],["Cantabria",11],["Huesca",10],["Belgium",7],["Palencia",7],["Zamora",7],["Salamanca",6],["Switzerland",6],["Madrid",4],["UK",4],["Barcelona",4],["Valencia",2],["Vizcaya",1],["Greece",1]],"caminos":[["Frances-Camino de",2642],["Portugues-Camino",589],["Norte-Camino de",206],["Primitivo-Camino",131],["Ingles-Camino",100],["Via de la Plata",99],["Otros caminos",24],["Muxia-Finisterre",12]]},"all":{"year":"2004","month":"","pilgrims":179944,"gender":[["Hombre",100431],["Mujer",79513]],"transport":[["Pie",156956],["Bicicleta",21256],["Caballo",1672],["Silla de ruedas",60]],"age":[["30 - 60",98600],["< 30",66783],["> 60",14561]],"motivation":[["Religioso",134330],["Religioso y otros",35528],["No religioso",10086]],"spanishFrom":[["Galicia",27778],["Madrid",24557],["Andalucía",15078],["Cataluña",13297],["Comunidad Valenciana",12166],["Castilla León",10684],["Pais Vasco",6609],["Castilla la Mancha",6038],["Asturias",3594],["Extremadura",3335],["Aragón",3058],["Murcia",2603],["Baleares",2057],["Canarias",1992],["Cantabria",1930],["Navarra",1536],["La Rioja",943],["Ceuta",177],["Melilla",70]],"byCountry":[["España",137795],["Italia",7638],["Alemania",6791],["Francia",6527],["Portugal",3241],["Estados Unidos",2016],["Brasil",1433],["Reino Unido",1416],["Holanda",1388],["Belgica",1276],["Austria",1200],["Canadá",1089],["México",991],["Suiza",698],["Venezuela",571],["Argentina",571],["Irlanda",561],["Australia",479],["Dinamarca",410],["Polonia",357],["Suecia",320],["Finlandia",294],["Colombia",277],["Noruega",261],["Japón",256],["Hungría",246],["Chile",173],["República Checa",153],["Eslovenia",145],["Uruguay",119],["Andorra",117],["Ecuador",102],["Nueva Zelanda",97],["Sudáfrica",84],["Perú",73],["Eslovaquia",61],["Puerto Rico",61],["Rumania",49],["Rusia",46],["Israel",30],["Ucrania",26],["Bolivia",25],["Cuba",25],["Marruecos",25],["Costa Rica",24],["Rep. Dominicana",23],["Filipinas",19],["Croacia",18],["Luxemburgo",18],["Malta",17],["Guatemala",16],["Bulgaria",16],["Panamá",15],["China",15],["Paraguay",13],["El Salvador",13],["Taiwán",13],["India",12],["Lituania",12],["Albania",11],["Islandia",11],["Honduras",11],["Estonia",9],["Turquía",7],["Singapur",7],["Mauricio",6],["Nicaragua",6],["Letonia",6],["Kenya",5],["Bosnia",5],["Serbia",4],["Grecia",4],["Groenlandia",4],["Armenia",4],["San Marino",4],["Nigeria",4],["Tailandia",3],["Argelia",3],["Ghana",3],["Liechtensein",3],["Haití",3],["Irán",3],["Yugoslavia",3],["Líbano",3],["Senegal",2],["Mauritania",2],["Indonesia",2],["Malasia",2],["Angola",2],["Guinea Ecuatorial",2],["Bielorrusia",2],["Vietnam",2],["Egipto",1],["Herzegovina",1],["Camerún",1],["Sri Lanka",1],["Guinea",1],["I. Reunión",1],["Túnez",1],["Benin",1],["Madagascar",1],["Etiopía",1],["Gambia",1],["Cabo Verde",1],["Congo",1],["Mozambique",1],["Belice",1],["Mónaco",1],["Arabia Saudita",1],["Tanzania",1],["Zimbabwe",1],["Islas Feroe",1],["Aruba",1]],"professions":[["Estudiantes",45132],["Empleados",29300],["Liberales",22660],["Tecnicos",18481],["Jubilados",12804],["Obreros",12019],["Profesores",11805],["Funcionarios",10048],["Amas de Casa",9763],["Parados",2383],["Directivos",1521],["Sacerdotes",1233],["Artistas",1143],["Agricultores",800],["Marinos",390],["Religiosas",325],["Deportistas",126],["Oikoten",11]],"startingCities":[["Sarria",39583],["Cebreiro",20695],["Roncesvalles",13108],["Tui",10725],["Ponferrada",10648],["S. Jean P. Port",9343],["León",9284],["Astorga",6944],["Ourense",5616],["Vilafranca",4686],["Pamplona",3253],["Burgos",3227],["Oviedo - C.P.",3175],["Triacastela",2370],["Le Puy",2194],["Ferrol",1871],["Francia",1843],["Samos",1614],["Valença do Minho",1594],["Resto C. León",1300],["Resto Portugal",1284],["Ribadeo",1227],["Somport",1196],["Neda",1156],["Vilalba",1031],["Sevilla",987],["Resto Asturias",940],["Oporto",852],["Fonsagrada - C.P.",843],["Logroño",836],["Vigo",808],["Oviedo",763],["",642],["Holanda",599],["Lugo - C.P.",579],["Santander",563],["Arles",560],["Frómista",553],["Irún",534],["Sahagún",524],["Resto País Vasco",499],["Mérida",484],["Jaca",415],["Salamanca",414],["Zamora",369],["Sto. Domingo de la Calzada",368],["Carrión de los Condes",365],["Puente la Reina",330],["Bélgica",327],["Hospital de Orbigo",325],["Castilla La Mancha",295],["Puebla de Sanabria",293],["Verín",282],["Braga",282],["Mondoñedo",276],["Finisterra",256],["Avilés",248],["Bilbao",244],["Vega de Valcarce",216],["Porriño",214],["Resto Cantabria",204],["Gijón",201],["Estella",190],["Madrid",189],["Madrid - C.F.",187],["Suiza",175],["Cataluña",160],["Paradela",155],["Valencia",139],["Lourdes",128],["Canfranc",121],["Resto Asturias - C.P.",103],["Fonsagrada",96],["Resto C. León - V.P.",93],["Castrojeriz",90],["Com. Valenciana",85],["Vegadeo",80],["Laza",77],["Cast. la Mancha",76],["Austria",73],["Italia",71],["Republica Checa",71],["Grandas de Salime - C.P.",68],["Hendaya",66],["Barcelona",65],["Vezelay",65],["Lisboa",57],["Ortigueira",57],["Nájera",52],["Tineo - C.P.",46],["Cáceres",43],["Salas",41],["San Juan de Ortega",39],["Reino Unido",37],["Grandas de Salime",36],["La Bañeza",36],["Rábade",34],["Granada",31],["Resto de Extremadura",31],["Viveiro",27],["París",24],["Tineo",24],["Muxia",24],["Vincios",22],["Huelva",22],["Fonfría",21],["Valcarlos",20],["Inglaterra",14],["Córdoba",13],["Badajoz",12],["Benavente",10],["Peñaseita",10],["Leyre",9],["Roma",9],["Dinamarca",7],["Grado",7],["Finlandia",6],["Valladolid",6],["Pontedeume",6],["Luxemburgo",5],["Castilla la Mancha",4],["Guitiriz",3],["Betanzos",2],["Cea",2],["Petín",2],["Irlanda",2],["Grecia",2],["Silleda",2],["La Mesa",1],["Alemania",1],["El Escamplero",1],["Murcia",1],["Ventas de Narón",1],["Artieda",1],["Mella",1]],"startingRegions":[["Lugo",68521],["León",34058],["Navarra",16910],["France",15419],["Pontevedra",11771],["Ourense",5977],["Asturias",5744],["Portugal",4069],["A Coruña",3372],["Burgos",3356],["La Rioja",1256],["Gipuzkoa",1033],["Sevilla",987],["Palencia",918],["Cantabria",767],["Zamora",672],["City&nbsp;Was Blank",642],["Holland",599],["Huesca",536],["Badajoz",527],["Salamanca",414],["Madrid",376],["Albacete",375],["Belgium",327],["Vizcaya",244],["Barcelona",225],["Valencia",224],["Switzerland",175],["Italy",80],["Austria",73],["Czech Republic",71],["Huelva",56],["UK",51],["Cáceres",43],["Granada",31],["Córdoba",13],["Denmark",7],["Valladolid",6],["Finland",6],["Luxembourg",5],["Ireland",2],["Greece",2],["Zaragoza",1],["Germany",1],["Murcia",1],["Málaga",1]],"caminos":[["Frances-Camino de",138646],["Portugues-Camino",15838],["Via de la Plata",9309],["Norte-Camino de",7117],["Primitivo-Camino",4876],["Ingles-Camino",3092],["Otros caminos",786],["Muxia-Finisterre",280]]}},"2005":{"1":{"year":"2005","month":"1","pilgrims":269,"gender":[["Hombre",196],["Mujer",73]],"transport":[["Pie",244],["Bicicleta",24],["Caballo",1]],"age":[["30 - 60",174],["< 30",86],["> 60",9]],"motivation":[["Religioso",188],["Religioso y otros",54],["No religioso",27]],"spanishFrom":[["Galicia",42],["Madrid",28],["Andalucía",23],["Cataluña",14],["Comunidad Valenciana",13],["Pais Vasco",9],["Aragón",7],["Castilla León",6],["Murcia",4],["Baleares",4],["Asturias",4],["La Rioja",4],["Castilla la Mancha",3],["Extremadura",1],["Cantabria",1],["Canarias",1]],"byCountry":[["España",164],["Estados Unidos",18],["Italia",16],["Francia",14],["Brasil",12],["Alemania",6],["Austria",5],["Portugal",4],["Australia",4],["Holanda",3],["Suiza",3],["México",2],["Estonia",2],["Reino Unido",2],["Finlandia",2],["Hungría",2],["Irlanda",1],["Argentina",1],["Canadá",1],["Japón",1],["Noruega",1],["España",1],["India",1],["Rumania",1],["Polonia",1],["Belgica",1]],"professions":[["Estudiantes",49],["Liberales",43],["Empleados",38],["Tecnicos",30],["Obreros",28],["Profesores",17],["Jubilados",14],["Funcionarios",13],["Parados",11],["Artistas",10],["Amas de Casa",8],["Directivos",5],["Sacerdotes",2],["Agricultores",1]],"startingCities":[["Sarria",42],["Cebreiro",33],["León",28],["S. Jean P. Port",22],["Ponferrada",14],["Tui",13],["Roncesvalles",11],["Burgos",9],["Astorga",9],["Francia",8],["Pamplona",8],["Vilafranca",7],["Resto Portugal",7],["Sevilla",4],["Le Puy",4],["Vilalba",3],["Sahagún",3],["Triacastela",3],["Ferrol",3],["Resto C. León",3],["Cataluña",2],["Ourense",2],["Jaca",2],["Resto País Vasco",2],["Alemania",2],["Logroño",2],["Rabanal del Camino",2],["Benavente",2],["Inglaterra",2],["Suiza",2],["Finisterra",1],["Italia",1],["Puente la Reina",1],["Barcelona",1],["Malaga",1],["Bilbao",1],["Madrid - C.F.",1],["Resto Cantabria",1],["Roma",1],["Austria",1],["Oviedo - C.P.",1],["Braga",1],["Oviedo",1],["París",1],["Lourdes",1]],"startingRegions":[["Lugo",81],["León",66],["France",36],["Navarra",20],["Pontevedra",13],["Burgos",9],["Portugal",8],["Sevilla",4],["A Coruña",4],["Barcelona",3],["Ourense",2],["Huesca",2],["Asturias",2],["Germany",2],["La Rioja",2],["Zamora",2],["UK",2],["Switzerland",2],["Italy",2],["Gipuzkoa",2],["Cantabria",1],["Málaga",1],["Vizcaya",1],["Madrid",1],["Austria",1]],"caminos":[["Frances-Camino de",226],["Portugues-Camino",21],["Via de la Plata",9],["Norte-Camino de",8],["Ingles-Camino",3],["Muxia-Finisterre",1],["Primitivo-Camino",1]]},"2":{"year":"2005","month":"2","pilgrims":558,"gender":[["Hombre",328],["Mujer",230]],"transport":[["Pie",532],["Bicicleta",26]],"age":[["30 - 60",316],["< 30",219],["> 60",23]],"motivation":[["Religioso",459],["Religioso y otros",79],["No religioso",20]],"spanishFrom":[["Galicia",200],["Andalucía",45],["Madrid",36],["Comunidad Valenciana",35],["Cataluña",25],["Baleares",15],["Castilla León",6],["Pais Vasco",6],["Canarias",5],["Murcia",2],["Aragón",2],["Navarra",2],["Melilla",1],["Cantabria",1],["Extremadura",1],["Castilla la Mancha",1],["Otra",1],["La Rioja",1]],"byCountry":[["España",385],["Portugal",64],["Alemania",26],["Francia",18],["Japón",13],["Italia",8],["Brasil",6],["Holanda",5],["Estados Unidos",4],["Reino Unido",4],["Irlanda",3],["Argentina",2],["Suiza",2],["Belgica",2],["Eslovenia",2],["República Checa",2],["Eslovaquia",2],["Rumania",2],["Australia",1],["Corea",1],["Letonia",1],["Austria",1],["Lituania",1],["Colombia",1],["Canadá",1],["España",1]],"professions":[["Estudiantes",154],["Empleados",140],["Liberales",58],["Amas de Casa",46],["Tecnicos",40],["Profesores",32],["Obreros",18],["Funcionarios",17],["Jubilados",16],["Parados",15],["Agricultores",7],["Artistas",5],["Marinos",4],["Directivos",2],["Religiosas",2],["Deportistas",1],["Sacerdotes",1]],"startingCities":[["Cebreiro",231],["Sarria",76],["Tui",30],["Ponferrada",26],["León",23],["S. Jean P. Port",22],["Roncesvalles",21],["Burgos",18],["Braga",12],["Pamplona",10],["Francia",6],["Valença do Minho",6],["Sevilla",6],["Astorga",6],["Mérida",5],["Logroño",5],["Jaca",4],["Triacastela",3],["Vilafranca",3],["Ferrol",3],["Le Puy",3],["Ourense",2],["Resto Portugal",2],["Irún",2],["Lisboa",2],["Grado",2],["Somport",2],["Puente la Reina",2],["Resto C. León",2],["Samos",2],["Resto C. León - V.P.",2],["Grandas de Salime",2],["Resto de Extremadura",2],["Suiza",2],["Oporto",2],["Resto Cantabria",1],["La Bañeza",1],["Resto País Vasco",1],["Valencia",1],["Cáceres",1],["Roma",1],["Carrión de los Condes",1],["Bélgica",1],["Cataluña",1],["Oviedo - C.P.",1],["Alemania",1]],"startingRegions":[["Lugo",312],["León",63],["France",33],["Navarra",33],["Pontevedra",30],["Portugal",24],["Burgos",18],["Badajoz",7],["Sevilla",6],["La Rioja",5],["Asturias",5],["Huesca",4],["A Coruña",3],["Gipuzkoa",3],["Ourense",2],["Switzerland",2],["Italy",1],["Valencia",1],["Cáceres",1],["Cantabria",1],["Palencia",1],["Belgium",1],["Barcelona",1],["Germany",1]],"caminos":[["Frances-Camino de",472],["Portugues-Camino",54],["Via de la Plata",19],["Norte-Camino de",6],["Primitivo-Camino",3],["Ingles-Camino",3],["Otros caminos",1]]},"3":{"year":"2005","month":"3","pilgrims":3128,"gender":[["Hombre",1877],["Mujer",1251]],"transport":[["Pie",2797],["Bicicleta",321],["Caballo",10]],"age":[["< 30",1682],["30 - 60",1354],["> 60",92]],"motivation":[["Religioso y otros",1516],["Religioso",1281],["No religioso",331]],"spanishFrom":[["Madrid",721],["Cataluña",238],["Comunidad Valenciana",233],["Galicia",219],["Castilla León",120],["Andalucía",118],["Pais Vasco",109],["Castilla la Mancha",82],["Extremadura",81],["Baleares",52],["Aragón",50],["Murcia",46],["Navarra",40],["Asturias",36],["Canarias",26],["Otra",6],["La Rioja",4],["Ceuta",2],["Cantabria",2]],"byCountry":[["España",2185],["Portugal",200],["Alemania",193],["Italia",88],["Estados Unidos",57],["Irlanda",44],["Reino Unido",42],["Belgica",42],["Francia",38],["México",33],["Japón",22],["Canadá",19],["Brasil",15],["Argentina",13],["Australia",13],["Noruega",12],["Colombia",11],["Suiza",10],["Venezuela",10],["Holanda",10],["Finlandia",9],["Austria",9],["España",6],["Uruguay",6],["Ecuador",5],["Suecia",4],["República Checa",4],["Rumania",3],["China",3],["Cuba",3],["Puerto Rico",2],["Nicaragua",2],["Rep. Dominicana",2],["Perú",1],["Chile",1],["Sudáfrica",1],["Eslovenia",1],["Polonia",1],["Rusia",1],["El Salvador",1],["Marruecos",1],["Luxemburgo",1],["Sri Lanka",1],["Dinamarca",1],["Ucrania",1],["Andorra",1]],"professions":[["Estudiantes",1302],["Empleados",349],["Tecnicos",324],["Liberales",320],["Profesores",267],["Obreros",177],["Funcionarios",119],["Amas de Casa",78],["Jubilados",71],["Parados",39],["Artistas",32],["Directivos",26],["Sacerdotes",12],["Agricultores",8],["Marinos",3],["Deportistas",1]],"startingCities":[["Sarria",1006],["Cebreiro",396],["Roncesvalles",171],["Ponferrada",149],["Astorga",139],["Tui",133],["León",128],["Valença do Minho",98],["Vilafranca",92],["Ourense",68],["S. Jean P. Port",56],["Burgos",56],["Ferrol",49],["",48],["Triacastela",47],["Ribadeo",45],["Pamplona",44],["Samos",34],["Sevilla",25],["Oporto",24],["Lugo - C.P.",22],["Porriño",17],["Oviedo",16],["Resto Portugal",14],["Vilalba",14],["Resto País Vasco",12],["Le Puy",12],["Hospital de Orbigo",12],["Jaca",12],["Resto Asturias",12],["Santander",12],["Somport",11],["Ponte de Lima",9],["Logroño",9],["Castilla La Mancha",8],["Neda",8],["Oviedo - C.P.",7],["Francia",6],["Puebla de Sanabria",6],["Irún",6],["Resto C. León",6],["Fonsagrada",5],["Vigo",5],["Sahagún",5],["Zaragoza",5],["Xunqueira de Ambia",4],["Canfranc",4],["Mérida",4],["Fonfría",4],["Alemania",4],["Estella",3],["Muxia",3],["Madrid - C.F.",3],["Frómista",3],["Zamora",3],["Salamanca",3],["Nájera",3],["Gudiña",3],["Lisboa",2],["Malaga",2],["Sto. Domingo de la Calzada",2],["Vega de Valcarce",2],["Roma",2],["Rabanal del Camino",2],["Benavente",2],["Tineo",2],["Granja de Moreruela",2],["Luxemburgo",1],["Cataluña",1],["Valencia",1],["Bilbao",1],["Tineo - C.P.",1],["Fonsagrada - C.P.",1],["Com. Valenciana",1]],"startingRegions":[["Lugo",1574],["León",535],["Navarra",218],["Pontevedra",155],["Portugal",147],["France",85],["Ourense",75],["A Coruña",60],["Burgos",56],["City&nbsp;Was Blank",48],["Asturias",38],["Sevilla",25],["Gipuzkoa",18],["Huesca",16],["La Rioja",14],["Zamora",13],["Cantabria",12],["Albacete",8],["Zaragoza",5],["Badajoz",4],["Germany",4],["Madrid",3],["Palencia",3],["Salamanca",3],["Málaga",2],["Italy",2],["Valencia",2],["Luxembourg",1],["Barcelona",1],["Vizcaya",1]],"caminos":[["Frances-Camino de",2426],["Portugues-Camino",302],["Via de la Plata",130],["Norte-Camino de",129],["Ingles-Camino",57],["Otros caminos",48],["Primitivo-Camino",31],["Muxia-Finisterre",3],["Otros caminos",2]]},"4":{"year":"2005","month":"4","pilgrims":3307,"gender":[["Hombre",1944],["Mujer",1363]],"transport":[["Pie",2968],["Bicicleta",329],["Caballo",9],["Silla de ruedas",1]],"age":[["30 - 60",1793],["< 30",1042],["> 60",472]],"motivation":[["Religioso y otros",1755],["Religioso",1265],["No religioso",287]],"spanishFrom":[["Madrid",251],["Castilla León",194],["Comunidad Valenciana",193],["Extremadura",143],["Andalucía",141],["Cataluña",137],["Galicia",118],["Baleares",98],["Pais Vasco",91],["Castilla la Mancha",73],["Navarra",31],["Aragón",21],["Murcia",18],["Cantabria",17],["La Rioja",13],["Canarias",13],["Asturias",12],["Otra",10],["Melilla",1]],"byCountry":[["España",1575],["Alemania",299],["Francia",239],["Portugal",172],["Italia",158],["Reino Unido",101],["Canadá",85],["Austria",83],["Suiza",71],["Estados Unidos",68],["Holanda",60],["Belgica",56],["Finlandia",50],["Dinamarca",39],["Brasil",33],["Australia",32],["Irlanda",28],["México",19],["Polonia",16],["Andorra",15],["Suecia",12],["República Checa",11],["Argentina",8],["Nueva Zelanda",8],["Noruega",8],["Japón",7],["Venezuela",6],["Chile",5],["Colombia",5],["Puerto Rico",4],["Eslovenia",4],["Perú",3],["España",3],["Guatemala",2],["Eslovaquia",2],["Hungría",2],["Singapur",2],["Corea",2],["Sudáfrica",2],["Estonia",2],["Rumania",1],["Bulgaria",1],["Malasia",1],["Turquía",1],["Rep. Dominicana",1],["Grecia",1],["Croacia",1],["Marruecos",1],["Luxemburgo",1],["Jamaica",1]],"professions":[["Estudiantes",734],["Empleados",505],["Jubilados",437],["Liberales",405],["Tecnicos",379],["Profesores",231],["Funcionarios",163],["Obreros",151],["Amas de Casa",111],["Parados",61],["Directivos",46],["Artistas",32],["Sacerdotes",21],["Agricultores",14],["Marinos",12],["Religiosas",3],["Deportistas",2]],"startingCities":[["Sarria",602],["Roncesvalles",265],["Cebreiro",255],["S. Jean P. Port",237],["León",229],["Ponferrada",190],["Valença do Minho",151],["Tui",146],["Astorga",142],["Vilafranca",108],["Pamplona",97],["Samos",89],["Sevilla",74],["Burgos",70],["Le Puy",69],["Francia",53],["Triacastela",51],["Oporto",37],["Ponte de Lima",31],["Logroño",31],["Resto Portugal",24],["Somport",22],["Vega de Valcarce",16],["Ferrol",16],["Lugo - C.P.",16],["Sahagún",14],["Suiza",14],["Carrión de los Condes",12],["Alemania",12],["Puente la Reina",12],["Ourense",12],["Braga",12],["Salamanca",11],["",9],["Mérida",9],["Zamora",8],["Bilbao",8],["Puebla de Sanabria",8],["Jaca",8],["Irún",8],["Santander",7],["Lourdes",7],["Holanda",7],["Sto. Domingo de la Calzada",6],["Lisboa",5],["Gudiña",5],["Vilalba",5],["Oviedo - C.P.",5],["Resto País Vasco",5],["Resto C. León - V.P.",5],["Bélgica",4],["Paradela",4],["Frómista",4],["Madrid - C.F.",4],["Estella",4],["Castilla La Mancha",4],["Vezelay",4],["Canfranc",3],["Valladolid",3],["Hospital de Orbigo",3],["Arles",2],["Rabanal del Camino",2],["Fonsagrada - C.P.",2],["Verín",2],["Avilés",2],["Córdoba",2],["Resto C. León",2],["Oviedo",2],["Cáceres",2],["Valencia",2],["Cast. la Mancha",2],["Resto Asturias - C.P.",1],["Hendaya",1],["Italia",1],["Tineo - C.P.",1],["Valcarlos",1],["Finisterra",1],["Reino Unido",1],["Madrid",1],["Dinamarca",1],["R.Pais Vasco",1],["Ribadeo",1],["Granada",1],["Badajoz",1]],"startingRegions":[["Lugo",1025],["León",711],["France",395],["Navarra",379],["Portugal",260],["Pontevedra",146],["Sevilla",74],["Burgos",70],["La Rioja",37],["Ourense",19],["A Coruña",17],["Palencia",16],["Zamora",16],["Gipuzkoa",14],["Switzerland",14],["Germany",12],["Huesca",11],["Asturias",11],["Salamanca",11],["Badajoz",10],["City&nbsp;Was Blank",9],["Vizcaya",8],["Cantabria",7],["Holland",7],["Albacete",6],["Madrid",5],["Belgium",4],["Valladolid",3],["Córdoba",2],["Cáceres",2],["Valencia",2],["UK",1],["Italy",1],["Denmark",1],["Granada",1]],"caminos":[["Frances-Camino de",2661],["Portugues-Camino",406],["Via de la Plata",148],["Norte-Camino de",39],["Primitivo-Camino",25],["Ingles-Camino",16],["Otros caminos",9],["Otros caminos",2],["Muxia-Finisterre",1]]},"5":{"year":"2005","month":"5","pilgrims":9310,"gender":[["Hombre",5635],["Mujer",3675]],"transport":[["Pie",7348],["Bicicleta",1920],["Caballo",41],["Silla de ruedas",1]],"age":[["30 - 60",5954],["> 60",2049],["< 30",1307]],"motivation":[["Religioso y otros",4797],["Religioso",3725],["No religioso",788]],"spanishFrom":[["Madrid",586],["Cataluña",490],["Galicia",444],["Castilla León",360],["Comunidad Valenciana",355],["Pais Vasco",328],["Andalucía",249],["Canarias",149],["Castilla la Mancha",82],["Aragón",79],["Baleares",78],["Asturias",70],["Navarra",45],["Cantabria",45],["Murcia",36],["Otra",22],["Extremadura",19],["La Rioja",18]],"byCountry":[["España",3455],["Alemania",1475],["Francia",924],["Italia",553],["Holanda",367],["Estados Unidos",307],["Portugal",276],["Austria",269],["Reino Unido",228],["Brasil",207],["Canadá",190],["Belgica",141],["Australia",119],["Suiza",105],["Irlanda",75],["Suecia",74],["Dinamarca",68],["Finlandia",54],["Noruega",39],["Argentina",37],["México",33],["Polonia",29],["Japón",27],["República Checa",26],["Eslovenia",24],["Sudáfrica",23],["Nueva Zelanda",22],["Hungría",21],["Venezuela",16],["Ecuador",14],["Colombia",14],["Andorra",12],["Eslovaquia",10],["Costa Rica",7],["Uruguay",6],["Chile",6],["Guatemala",5],["Malasia",5],["Israel",5],["Estonia",4],["Puerto Rico",4],["Perú",3],["España",3],["Islandia",3],["Chipre",2],["Paraguay",2],["Filipinas",2],["Bulgaria",2],["Rusia",2],["Rep. Dominicana",2],["Namibia",2],["Rumania",2],["Bolivia",1],["Singapur",1],["Ucrania",1],["Grecia",1],["Mozambique",1],["Antillas Holandesas",1],["Corea",1],["Honduras",1],["San Marino",1]],"professions":[["Jubilados",2130],["Empleados",1734],["Tecnicos",1403],["Liberales",1207],["Estudiantes",611],["Funcionarios",534],["Obreros",405],["Amas de Casa",392],["Profesores",383],["Directivos",159],["Parados",134],["Artistas",108],["Agricultores",39],["Sacerdotes",38],["Deportistas",17],["Marinos",10],["Religiosas",6]],"startingCities":[["S. Jean P. Port",1334],["Sarria",1049],["Roncesvalles",847],["León",678],["Cebreiro",584],["Ponferrada",513],["Pamplona",513],["Le Puy",338],["Astorga",311],["Burgos",311],["Francia",273],["Sevilla",254],["Tui",192],["Vilafranca",165],["Oporto",122],["Holanda",110],["Somport",102],["Triacastela",88],["Alemania",87],["Resto Portugal",78],["Logroño",67],["Mérida",58],["Valença do Minho",56],["Irún",49],["Resto Asturias",46],["Salamanca",42],["Jaca",42],["Resto C. León",40],["Oviedo - C.P.",40],["Vigo",40],["Samos",40],["Verín",39],["Ourense",37],["Bélgica",37],["Ponte de Lima",37],["Ferrol",36],["Puente la Reina",34],["Ribadeo",32],["Hospital de Orbigo",29],["Sahagún",29],["Suiza",27],["Frómista",25],["Madrid - C.F.",24],["Oviedo",23],["Arles",23],["Bilbao",23],["Lourdes",21],["Braga",20],["Resto País Vasco",20],["Vezelay",18],["Lugo - C.P.",17],["Carrión de los Condes",16],["Vega de Valcarce",14],["Lisboa",14],["Sto. Domingo de la Calzada",14],["Puebla de Sanabria",12],["Gijón",11],["Estella",11],["Gudiña",11],["Hendaya",11],["Cataluña",10],["Zamora",10],["Resto Cantabria",10],["Rabanal del Camino",9],["",9],["Santander",9],["Vegadeo",8],["Cáceres",8],["Nájera",7],["Canfranc",6],["Austria",6],["Fonsagrada - C.P.",5],["Huelva",5],["Italia",5],["Zaragoza",5],["Valencia",4],["Resto Andalucia",4],["San Juan de Ortega",4],["Barcelona",4],["París",4],["Porriño",4],["Resto Asturias - C.P.",3],["Resto C. León - V.P.",3],["Resto de Extremadura",3],["Avilés",3],["Vilalba",3],["Malaga",3],["Fonsagrada",2],["La Bañeza",2],["R.Pais Vasco",2],["Castrojeriz",2],["Com. Valenciana",2],["Inglaterra",2],["Roma",2],["Granada",1],["Luxemburgo",1],["Dinamarca",1],["Irlanda",1],["Tineo - C.P.",1],["Vincios",1],["Grandas de Salime",1],["Madrid",1]],"startingRegions":[["France",2124],["Lugo",1820],["León",1793],["Navarra",1405],["Portugal",327],["Burgos",317],["Sevilla",258],["Pontevedra",237],["Asturias",136],["Holland",110],["La Rioja",88],["Ourense",87],["Germany",87],["Gipuzkoa",71],["Badajoz",61],["Huesca",48],["Salamanca",42],["Palencia",41],["Belgium",37],["A Coruña",36],["Switzerland",27],["Madrid",25],["Vizcaya",23],["Zamora",22],["Cantabria",19],["Barcelona",14],["City&nbsp;Was Blank",9],["Cáceres",8],["Italy",7],["Austria",6],["Valencia",6],["Huelva",5],["Zaragoza",5],["Málaga",3],["UK",2],["Granada",1],["Luxembourg",1],["Denmark",1],["Ireland",1]],"caminos":[["Frances-Camino de",7885],["Portugues-Camino",564],["Via de la Plata",493],["Norte-Camino de",251],["Primitivo-Camino",66],["Ingles-Camino",36],["Otros caminos",9],["Otros caminos",6]]},"6":{"year":"2005","month":"6","pilgrims":12620,"gender":[["Hombre",7859],["Mujer",4761]],"transport":[["Pie",9561],["Bicicleta",3039],["Caballo",18],["Silla de ruedas",2]],"age":[["30 - 60",7814],["> 60",2716],["< 30",2090]],"motivation":[["Religioso y otros",6752],["Religioso",5008],["No religioso",860]],"spanishFrom":[["Madrid",850],["Cataluña",840],["Andalucía",494],["Pais Vasco",481],["Comunidad Valenciana",477],["Castilla León",369],["Galicia",336],["Canarias",167],["Castilla la Mancha",155],["Aragón",148],["Murcia",143],["Asturias",120],["Baleares",102],["Navarra",92],["Cantabria",73],["Extremadura",73],["La Rioja",61],["Otra",31],["Ceuta",5],["Melilla",2]],"byCountry":[["España",5019],["Alemania",1461],["Francia",1193],["Italia",1150],["Holanda",488],["Estados Unidos",436],["Austria",385],["Reino Unido",274],["Portugal",274],["Canadá",269],["Brasil",228],["Belgica",216],["Suiza",151],["Irlanda",128],["Australia",108],["República Checa",93],["Dinamarca",87],["México",68],["Finlandia",58],["Sudáfrica",56],["Noruega",51],["Suecia",49],["Japón",46],["Polonia",43],["Argentina",38],["Hungría",31],["Eslovenia",28],["Venezuela",24],["Nueva Zelanda",21],["Colombia",20],["Puerto Rico",12],["Andorra",11],["Chile",10],["Uruguay",9],["Luxemburgo",7],["Eslovaquia",5],["Rumania",5],["Croacia",5],["El Salvador",5],["Ecuador",5],["Costa Rica",4],["Rusia",4],["Ucrania",4],["Panamá",3],["España",3],["Malasia",3],["Islandia",3],["Cuba",3],["Perú",2],["Lituania",2],["Filipinas",2],["Angola",2],["India",1],["Israel",1],["Liechtensein",1],["Bielorrusia",1],["Grecia",1],["Mauricio",1],["Taiwán",1],["San Marino",1],["Pakistán",1],["Rep. Dominicana",1],["Zimbabwe",1],["Marruecos",1],["Nicaragua",1],["Ghana",1],["Paraguay",1],["Guatemala",1],["Malta",1]],"professions":[["Jubilados",2911],["Empleados",2198],["Tecnicos",1729],["Liberales",1516],["Estudiantes",1151],["Funcionarios",759],["Obreros",589],["Amas de Casa",565],["Profesores",515],["Parados",224],["Directivos",176],["Artistas",141],["Sacerdotes",65],["Agricultores",44],["Marinos",15],["Religiosas",14],["Deportistas",8]],"startingCities":[["S. Jean P. Port",1902],["Roncesvalles",1500],["Sarria",1338],["León",884],["Pamplona",633],["Cebreiro",612],["Ponferrada",578],["Le Puy",522],["Astorga",486],["Francia",394],["Burgos",350],["Holanda",285],["Sevilla",253],["Vilafranca",220],["Tui",212],["Somport",205],["Alemania",167],["Valença do Minho",105],["Oporto",97],["Irún",94],["Logroño",88],["Triacastela",78],["Resto Portugal",74],["Jaca",73],["Braga",56],["Samos",55],["Puente la Reina",54],["Sahagún",54],["Ourense",54],["Bélgica",53],["Bilbao",47],["Mérida",41],["Oviedo - C.P.",41],["Santander",40],["Vezelay",39],["Frómista",38],["Ferrol",37],["Oviedo",36],["Sto. Domingo de la Calzada",35],["Arles",35],["Ponte de Lima",35],["Salamanca",34],["Resto C. León",33],["Resto País Vasco",33],["Resto Asturias",33],["Lourdes",31],["Madrid - C.F.",28],["Resto Cantabria",27],["Suiza",27],["Lugo - C.P.",26],["Fonsagrada - C.P.",25],["Austria",24],["Vega de Valcarce",24],["Ribadeo",24],["Gudiña",20],["Canfranc",19],["Carrión de los Condes",17],["Rabanal del Camino",17],["Resto C. León - V.P.",15],["Hendaya",14],["París",13],["Estella",13],["Italia",12],["Avilés",12],["Puebla de Sanabria",11],["Castrojeriz",11],["Lisboa",10],["Zamora",10],["Cataluña",10],["Gijón",10],["Resto Asturias - C.P.",9],["Neda",8],["Huelva",8],["Valencia",8],["Salas",7],["Finisterra",7],["R.Pais Vasco",7],["Vigo",7],["Vilalba",6],["Badajoz",6],["Zaragoza",5],["Hospital de Orbigo",5],["Malaga",4],["Muxia",4],["Nájera",4],["Reino Unido",3],["Granada",3],["Republica Checa",3],["Cáceres",3],["A Guarda",3],["La Mesa",2],["Luxemburgo",2],["Barcelona",2],["Resto Andalucia",2],["Dinamarca",2],["Valladolid",2],["Cast. la Mancha",2],["Polonia",1],["Roma",1],["Inglaterra",1],["Grado",1],["San Juan de Ortega",1],["Irlanda",1],["Verín",1],["Laza",1],["Porriño",1],["Artieda",1],["Resto de Extremadura",1],["",1],["Fonsagrada",1]],"startingRegions":[["France",3155],["León",2316],["Navarra",2200],["Lugo",2165],["Portugal",377],["Burgos",362],["Holland",285],["Sevilla",255],["Pontevedra",223],["Germany",167],["Asturias",151],["Gipuzkoa",134],["La Rioja",127],["Huesca",92],["Ourense",76],["Cantabria",67],["A Coruña",56],["Palencia",55],["Belgium",53],["Badajoz",48],["Vizcaya",47],["Salamanca",34],["Madrid",28],["Switzerland",27],["Austria",24],["Zamora",21],["Italy",13],["Barcelona",12],["Huelva",8],["Valencia",8],["Zaragoza",6],["Málaga",4],["UK",4],["Granada",3],["Czech Republic",3],["Cáceres",3],["Luxembourg",2],["Albacete",2],["Denmark",2],["Valladolid",2],["Ireland",1],["City&nbsp;Was Blank",1],["Poland",1]],"caminos":[["Frances-Camino de",10998],["Portugues-Camino",600],["Via de la Plata",469],["Norte-Camino de",377],["Primitivo-Camino",111],["Ingles-Camino",45],["Muxia-Finisterre",11],["Otros caminos",8],["Otros caminos",1]]},"7":{"year":"2005","month":"7","pilgrims":18807,"gender":[["Hombre",10680],["Mujer",8127]],"transport":[["Pie",15813],["Bicicleta",2918],["Caballo",74],["Silla de ruedas",2]],"age":[["30 - 60",9232],["< 30",8371],["> 60",1204]],"motivation":[["Religioso y otros",9697],["Religioso",7386],["No religioso",1724]],"spanishFrom":[["Madrid",2266],["Andalucía",2113],["Comunidad Valenciana",1535],["Cataluña",1409],["Pais Vasco",1200],["Castilla León",1033],["Galicia",548],["Extremadura",513],["Castilla la Mancha",478],["Murcia",401],["Aragón",367],["Navarra",261],["Asturias",225],["Canarias",174],["Baleares",118],["Cantabria",86],["La Rioja",67],["Otra",33],["Ceuta",16],["Melilla",12]],"byCountry":[["España",12855],["Italia",1108],["Francia",880],["Alemania",720],["Estados Unidos",474],["Portugal",317],["Belgica",266],["Dinamarca",219],["Holanda",191],["Reino Unido",185],["Austria",173],["Canadá",148],["Brasil",134],["Polonia",119],["Irlanda",113],["Suecia",97],["Suiza",91],["República Checa",85],["Hungría",81],["México",77],["Australia",55],["Argentina",45],["Noruega",29],["Finlandia",29],["Japón",28],["Colombia",25],["Eslovaquia",20],["Puerto Rico",19],["Sudáfrica",18],["Eslovenia",18],["Ecuador",16],["España",13],["Venezuela",12],["Uruguay",12],["Perú",11],["Nueva Zelanda",10],["Chile",10],["Andorra",8],["Rusia",7],["Croacia",7],["Marruecos",7],["Luxemburgo",6],["Cuba",5],["Estonia",4],["Islandia",4],["Rep. Dominicana",4],["Armenia",4],["Ucrania",4],["Guatemala",3],["Rumania",3],["Camerún",3],["Israel",3],["Angola",2],["Bolivia",2],["Bulgaria",2],["Malta",2],["Ghana",2],["Vietnam",2],["Madagascar",1],["Congo",1],["Trinidad y Tobago",1],["Filipinas",1],["Grecia",1],["Yugoslavia",1],["Guinea",1],["Mozambique",1],["Sierra Leona",1],["Bosnia",1],["Serbia",1],["Tailandia",1],["Nigeria",1],["China",1],["El Salvador",1],["Malasia",1],["Corea",1],["Honduras",1]],"professions":[["Estudiantes",6465],["Profesores",2416],["Empleados",2262],["Tecnicos",1781],["Liberales",1681],["Jubilados",1190],["Funcionarios",911],["Obreros",789],["Amas de Casa",541],["Parados",238],["Sacerdotes",151],["Artistas",149],["Directivos",119],["Agricultores",72],["Religiosas",18],["Marinos",16],["Deportistas",8]],"startingCities":[["Sarria",3338],["Cebreiro",1637],["Roncesvalles",1564],["S. Jean P. Port",1363],["Ponferrada",1359],["León",1276],["Astorga",1241],["Tui",548],["Pamplona",514],["Burgos",477],["Vilafranca",451],["Triacastela",331],["Le Puy",321],["Francia",225],["Ourense",225],["Rabanal del Camino",215],["Ribadeo",187],["Oviedo - C.P.",155],["Samos",153],["Ferrol",144],["Resto Asturias",139],["Logroño",139],["Somport",130],["Vilalba",127],["Valença do Minho",122],["Irún",118],["Oporto",111],["Holanda",95],["Ponte de Lima",85],["Sevilla",83],["Resto C. León",71],["Santander",71],["Oviedo",71],["Bélgica",70],["Alemania",67],["Lugo - C.P.",67],["Sahagún",66],["Vega de Valcarce",62],["Xunqueira de Ambia",61],["Frómista",57],["Jaca",56],["Sto. Domingo de la Calzada",55],["Resto País Vasco",55],["Puebla de Sanabria",52],["Bilbao",50],["Resto Portugal",48],["Carrión de los Condes",47],["Gudiña",43],["Mérida",42],["Rábade",38],["Suiza",35],["Mondoñedo",33],["Madrid - C.F.",32],["Finisterra",28],["Salamanca",28],["Neda",27],["Hospital de Orbigo",26],["Resto Asturias - C.P.",25],["Vigo",25],["Puente la Reina",25],["Zamora",24],["Estella",24],["Arles",21],["Muxia",21],["Gijón",20],["Lourdes",19],["Valencia",19],["Avilés",18],["Cáceres",17],["Lourenzá",15],["Hendaya",15],["Vezelay",15],["Austria",14],["Nájera",14],["",14],["Grandas de Salime",13],["R.Pais Vasco",13],["Canfranc",11],["París",11],["Resto Cantabria",11],["Porriño",11],["Grandas de Salime - C.P.",10],["Fonsagrada - C.P.",9],["Cataluña",9],["Madrid",9],["Murcia",8],["Braga",8],["Com. Valenciana",6],["Castrojeriz",6],["Badajoz",6],["Hungría",6],["Barcelona",6],["Zaragoza",5],["Fonsagrada",5],["Reino Unido",4],["Resto C. León - V.P.",4],["Tineo - C.P.",4],["Lisboa",4],["Resto Andalucia",3],["Cast. la Mancha",3],["Grado",3],["Resto de Extremadura",3],["Benavente",3],["Cadavo",3],["Italia",3],["Vegadeo",2],["Granada",2],["Dinamarca",2],["Cataluña",2],["Laza",2],["Polonia",2],["Republica Checa",2],["Valcarlos",2],["Tineo",2],["Verín",2],["Salas",1],["Castilla La Mancha",1],["Paradela",1],["Valladolid",1],["Roma",1],["Inglaterra",1],["Castilla la Mancha",1],["La Bañeza",1],["Irlanda",1],["Luxemburgo",1],["Artieda",1]],"startingRegions":[["Lugo",5906],["León",4772],["Navarra",2129],["France",2120],["Pontevedra",584],["Burgos",483],["Asturias",463],["Portugal",378],["Ourense",333],["A Coruña",220],["La Rioja",208],["Gipuzkoa",186],["Palencia",104],["Holland",95],["Sevilla",86],["Cantabria",82],["Zamora",79],["Belgium",70],["Germany",67],["Huesca",67],["Badajoz",51],["Vizcaya",50],["Madrid",41],["Huelva",38],["Switzerland",35],["Salamanca",28],["Valencia",25],["Cáceres",17],["Barcelona",17],["Austria",14],["City&nbsp;Was Blank",14],["Murcia",8],["Hungary",6],["Zaragoza",6],["UK",5],["Albacete",5],["Italy",4],["Granada",2],["Denmark",2],["Poland",2],["Czech Republic",2],["Valladolid",1],["Ireland",1],["Luxembourg",1]],"caminos":[["Frances-Camino de",15696],["Norte-Camino de",990],["Portugues-Camino",962],["Via de la Plata",612],["Primitivo-Camino",277],["Ingles-Camino",171],["Muxia-Finisterre",49],["Otros caminos",36],["Otros caminos",14]]},"8":{"year":"2005","month":"8","pilgrims":24820,"gender":[["Hombre",14462],["Mujer",10358]],"transport":[["Pie",19755],["Bicicleta",4991],["Caballo",60],["Silla de ruedas",14]],"age":[["30 - 60",14343],["< 30",9676],["> 60",801]],"motivation":[["Religioso y otros",13074],["Religioso",9309],["No religioso",2437]],"spanishFrom":[["Cataluña",3155],["Madrid",2766],["Comunidad Valenciana",2586],["Andalucía",2095],["Pais Vasco",1635],["Castilla León",1019],["Castilla la Mancha",646],["Galicia",622],["Murcia",527],["Extremadura",433],["Aragón",369],["Baleares",329],["Navarra",250],["Asturias",199],["Canarias",128],["La Rioja",119],["Cantabria",109],["Otra",17],["Melilla",7],["Ceuta",4]],"byCountry":[["España",17015],["Italia",3115],["Alemania",908],["Francia",886],["Portugal",560],["Belgica",260],["Reino Unido",191],["Austria",187],["Holanda",184],["Estados Unidos",167],["Hungría",120],["Eslovaquia",108],["Polonia",107],["Brasil",96],["Dinamarca",86],["Canadá",81],["Suiza",80],["México",76],["Irlanda",64],["Argentina",62],["Japón",52],["Australia",44],["República Checa",40],["Suecia",37],["Colombia",33],["Venezuela",29],["Eslovenia",24],["Chile",17],["Sudáfrica",17],["Rumania",17],["Andorra",14],["España",13],["Finlandia",11],["Ecuador",10],["San Marino",10],["Uruguay",9],["Perú",9],["Croacia",7],["Noruega",7],["Cuba",5],["Corea",5],["Israel",5],["Nueva Zelanda",4],["Luxemburgo",4],["Filipinas",3],["Costa Rica",3],["Puerto Rico",3],["Bolivia",3],["Rusia",3],["Malta",2],["Panamá",2],["India",2],["Zambia",2],["Estonia",2],["Rep. Dominicana",2],["Bielorrusia",1],["Letonia",1],["Nigeria",1],["China",1],["Serbia",1],["Lituania",1],["Bulgaria",1],["Paraguay",1],["Angola",1],["Liechtensein",1],["Marruecos",1],["Ucrania",1],["Islas Feroe",1],["Fiji",1],["Irak",1]],"professions":[["Estudiantes",5195],["Empleados",5110],["Tecnicos",3228],["Liberales",3194],["Profesores",3002],["Obreros",1763],["Funcionarios",1118],["Jubilados",686],["Amas de Casa",597],["Parados",292],["Artistas",233],["Directivos",180],["Sacerdotes",116],["Agricultores",57],["Marinos",19],["Religiosas",19],["Deportistas",11]],"startingCities":[["Sarria",4429],["Roncesvalles",2704],["Cebreiro",2118],["S. Jean P. Port",2032],["Ponferrada",1928],["León",1797],["Astorga",1144],["Tui",819],["Vilafranca",744],["Burgos",698],["Pamplona",647],["Triacastela",306],["Valença do Minho",284],["Irún",257],["Le Puy",257],["Logroño",222],["Ourense",220],["Ribadeo",203],["Francia",188],["Oporto",162],["Somport",155],["Vega de Valcarce",151],["Samos",145],["Oviedo - C.P.",136],["Vilalba",117],["Resto Portugal",114],["Sto. Domingo de la Calzada",113],["Resto País Vasco",111],["Ferrol",107],["Santander",106],["Sahagún",104],["Sevilla",103],["Oviedo",99],["Ponte de Lima",95],["Bilbao",95],["Resto C. León",91],["Frómista",89],["Mérida",83],["Avilés",80],["Jaca",79],["Resto Asturias",78],["Gudiña",75],["Lugo - C.P.",75],["Rabanal del Camino",73],["Holanda",72],["Hospital de Orbigo",63],["Alemania",53],["Carrión de los Condes",48],["Bélgica",48],["Puente la Reina",47],["Salamanca",40],["",37],["Tineo - C.P.",35],["Gijón",34],["Estella",32],["Madrid - C.F.",31],["Braga",30],["Neda",28],["Muxia",27],["Resto Cantabria",27],["Zamora",26],["Mondoñedo",24],["Cataluña",22],["Lourdes",22],["Resto Asturias - C.P.",22],["Canfranc",21],["Barcelona",20],["Verín",20],["Castrojeriz",19],["Zaragoza",18],["Suiza",18],["Puebla de Sanabria",17],["Nájera",17],["Vezelay",16],["Italia",15],["Valencia",14],["Hendaya",13],["Austria",12],["Lisboa",12],["Fonsagrada - C.P.",12],["Grandas de Salime",9],["R.Pais Vasco",9],["Resto de Extremadura",9],["París",8],["Tineo",8],["Madrid",7],["Cáceres",7],["Valcarlos",7],["Xunqueira de Ambia",7],["Granja de Moreruela",6],["Castilla la Mancha",6],["Badajoz",5],["Dinamarca",5],["Arles",5],["Fonsagrada",5],["Cadavo",5],["Reino Unido",4],["Lourenzá",4],["Grado",4],["Resto Europa",4],["Resto C. León - V.P.",4],["Com. Valenciana",4],["Valladolid",3],["San Juan de Ortega",3],["Inglaterra",3],["Jerusalem",3],["Porriño",3],["Grandas de Salime - C.P.",3],["Fonfría",3],["Salas",3],["Malaga",2],["Cataluña",2],["Polonia",2],["Córdoba",1],["Castilla La Mancha",1],["Vegadeo",1],["Vincios",1],["Artieda",1],["Vilabade",1],["Borres",1],["Finlandia",1],["Vigo",1],["Republica Checa",1],["Cea",1],["Murcia",1],["Granada",1]],"startingRegions":[["Lugo",7447],["León",6100],["Navarra",3437],["France",2696],["Pontevedra",824],["Burgos",720],["Portugal",697],["Asturias",513],["Gipuzkoa",377],["La Rioja",352],["Ourense",322],["A Coruña",162],["Palencia",137],["Cantabria",133],["Sevilla",103],["Huesca",100],["Badajoz",97],["Vizcaya",95],["Holland",72],["Germany",53],["Zamora",49],["Belgium",48],["Barcelona",44],["Salamanca",40],["Madrid",38],["City&nbsp;Was Blank",37],["Zaragoza",19],["Valencia",18],["Switzerland",18],["Italy",15],["Austria",12],["Cáceres",7],["Albacete",7],["UK",7],["Denmark",5],["Europe Other",4],["Valladolid",3],["Israel",3],["Málaga",2],["Poland",2],["Córdoba",1],["Finland",1],["Czech Republic",1],["Murcia",1],["Granada",1]],"caminos":[["Frances-Camino de",20864],["Portugues-Camino",1521],["Norte-Camino de",1274],["Via de la Plata",638],["Primitivo-Camino",297],["Ingles-Camino",135],["Otros caminos",37],["Muxia-Finisterre",27],["Otros caminos",27]]},"9":{"year":"2005","month":"9","pilgrims":12168,"gender":[["Hombre",7155],["Mujer",5013]],"transport":[["Pie",9807],["Bicicleta",2348],["Caballo",11],["Silla de ruedas",2]],"age":[["30 - 60",6905],["< 30",3650],["> 60",1613]],"motivation":[["Religioso y otros",6914],["Religioso",3949],["No religioso",1305]],"spanishFrom":[["Madrid",1131],["Cataluña",937],["Andalucía",803],["Comunidad Valenciana",660],["Castilla León",611],["Galicia",565],["Pais Vasco",450],["Castilla la Mancha",203],["Aragón",185],["Murcia",137],["Asturias",136],["Extremadura",131],["Baleares",125],["Canarias",120],["Navarra",112],["Cantabria",93],["La Rioja",45],["Otra",15],["Ceuta",5]],"byCountry":[["España",6464],["Alemania",1207],["Italia",863],["Francia",822],["Portugal",361],["Reino Unido",257],["Estados Unidos",242],["Canadá",192],["Holanda",187],["Brasil",174],["Austria",169],["Belgica",144],["Australia",138],["Dinamarca",121],["Irlanda",101],["Suiza",88],["Polonia",83],["México",79],["República Checa",55],["Noruega",45],["Hungría",41],["Finlandia",39],["Suecia",37],["Japón",35],["Argentina",25],["Nueva Zelanda",25],["Sudáfrica",21],["Colombia",17],["Eslovaquia",17],["Chile",15],["Eslovenia",15],["Perú",14],["Uruguay",9],["Israel",8],["Venezuela",6],["Rumania",5],["España",5],["Estonia",4],["Rusia",3],["Ecuador",3],["Andorra",3],["Grecia",3],["Luxemburgo",2],["Croacia",2],["Letonia",2],["Taiwán",2],["Rep. Dominicana",2],["Líbano",2],["Corea",2],["Filipinas",2],["Marruecos",1],["Guatemala",1],["Bosnia",1],["Bulgaria",1],["Serbia",1],["Lituania",1],["Turquía",1],["Costa Rica",1],["Brunei",1],["Tailandia",1]],"professions":[["Empleados",2404],["Estudiantes",2172],["Tecnicos",1614],["Liberales",1484],["Jubilados",1459],["Funcionarios",868],["Profesores",578],["Obreros",510],["Amas de Casa",381],["Parados",212],["Directivos",206],["Artistas",143],["Sacerdotes",72],["Agricultores",35],["Deportistas",14],["Religiosas",8],["Marinos",8]],"startingCities":[["Sarria",1815],["S. Jean P. Port",1363],["Roncesvalles",1190],["Cebreiro",1119],["León",1046],["Ponferrada",757],["Astorga",582],["Pamplona",456],["Burgos",388],["Le Puy",328],["Vilafranca",258],["Tui",230],["Francia",191],["Valença do Minho",170],["Somport",121],["Irún",108],["Logroño",105],["Oporto",86],["Ourense",85],["Triacastela",82],["Sevilla",77],["Ribadeo",76],["Oviedo - C.P.",69],["Sahagún",68],["Holanda",66],["Alemania",62],["Oviedo",60],["Samos",57],["Ferrol",56],["Resto Asturias",55],["Jaca",47],["Sto. Domingo de la Calzada",45],["Santander",44],["Resto Portugal",43],["Mérida",41],["Bilbao",40],["Frómista",39],["Vega de Valcarce",37],["Lugo - C.P.",33],["Resto País Vasco",33],["Puente la Reina",26],["Resto Asturias - C.P.",25],["Lourdes",25],["Madrid - C.F.",24],["Ponte de Lima",24],["Bélgica",23],["Zamora",22],["Suiza",21],["Hospital de Orbigo",20],["Avilés",20],["",19],["Neda",19],["Carrión de los Condes",19],["Rabanal del Camino",18],["Resto C. León",18],["Braga",17],["Barcelona",15],["Salamanca",14],["Vezelay",13],["Canfranc",13],["Gijón",12],["Arles",11],["Verín",10],["Estella",10],["Mondoñedo",10],["Zaragoza",9],["Vilalba",9],["Hendaya",8],["Muxia",8],["Nájera",8],["Cáceres",8],["Granja de Moreruela",8],["R.Pais Vasco",8],["Gudiña",8],["Resto Cantabria",7],["Xunqueira de Ambia",7],["Cadavo",5],["Cataluña",5],["Paradela",5],["Puebla de Sanabria",5],["Valencia",5],["Austria",4],["Madrid",4],["Resto Europa",4],["Castrojeriz",4],["Resto de Extremadura",4],["Italia",4],["Grandas de Salime - C.P.",4],["Tineo - C.P.",3],["Gonzar",3],["París",3],["Lourenzá",3],["Lisboa",3],["Vincios",3],["Vigo",2],["Fonfría",2],["Huelva",2],["Polonia",2],["Laza",2],["Badajoz",2],["Resto Andalucia",2],["Republica Checa",2],["Valcarlos",2],["Grado",2],["Valladolid",1],["Tineo",1],["Grandas de Salime",1],["Dinamarca",1],["Malaga",1],["Jerusalem",1],["Luxemburgo",1],["Roma",1],["Finisterra",1],["Fonsagrada - C.P.",1],["Leyre",1],["Com. Valenciana",1],["Resto C. León - V.P.",1]],"startingRegions":[["Lugo",3220],["León",2805],["France",2063],["Navarra",1685],["Burgos",392],["Portugal",343],["Asturias",252],["Pontevedra",235],["La Rioja",158],["Gipuzkoa",149],["Ourense",112],["A Coruña",84],["Sevilla",79],["Holland",66],["Germany",62],["Huesca",60],["Palencia",58],["Cantabria",51],["Badajoz",47],["Vizcaya",40],["Zamora",35],["Madrid",28],["Belgium",23],["Switzerland",21],["Barcelona",20],["City&nbsp;Was Blank",19],["Salamanca",14],["Zaragoza",9],["Cáceres",8],["Valencia",6],["Italy",5],["Europe Other",4],["Austria",4],["Huelva",2],["Poland",2],["Czech Republic",2],["Valladolid",1],["Denmark",1],["Málaga",1],["Israel",1],["Luxembourg",1]],"caminos":[["Frances-Camino de",10543],["Portugues-Camino",578],["Norte-Camino de",489],["Via de la Plata",304],["Primitivo-Camino",145],["Ingles-Camino",75],["Otros caminos",19],["Muxia-Finisterre",9],["Otros caminos",6]]},"10":{"year":"2005","month":"10","pilgrims":6873,"gender":[["Hombre",4142],["Mujer",2731]],"transport":[["Pie",5953],["Bicicleta",905],["Caballo",14],["Silla de ruedas",1]],"age":[["30 - 60",4064],["< 30",1548],["> 60",1261]],"motivation":[["Religioso y otros",4030],["Religioso",2309],["No religioso",534]],"spanishFrom":[["Madrid",523],["Cataluña",350],["Galicia",324],["Andalucía",291],["Comunidad Valenciana",281],["Pais Vasco",197],["Castilla León",173],["Castilla la Mancha",88],["Asturias",80],["Aragón",64],["Baleares",54],["Navarra",49],["Murcia",43],["Canarias",42],["Cantabria",35],["Extremadura",28],["La Rioja",24],["Otra",7],["Ceuta",6],["Melilla",4]],"byCountry":[["España",2663],["Francia",740],["Alemania",727],["Canadá",369],["Portugal",299],["Italia",276],["Estados Unidos",224],["Brasil",206],["Reino Unido",179],["Austria",164],["Belgica",122],["Australia",109],["Holanda",92],["Suiza",92],["Noruega",76],["Dinamarca",74],["México",66],["Irlanda",56],["Nueva Zelanda",28],["Argentina",28],["Venezuela",28],["Suecia",26],["Japón",24],["Polonia",21],["Sudáfrica",21],["Hungría",20],["Uruguay",19],["Finlandia",17],["Colombia",14],["Eslovenia",12],["Eslovaquia",10],["Israel",9],["República Checa",9],["Chile",9],["Corea",9],["Perú",5],["Bolivia",5],["Puerto Rico",3],["España",3],["Andorra",2],["Lituania",2],["Dominica",1],["Indonesia",1],["Croacia",1],["Estonia",1],["Mozambique",1],["Ecuador",1],["Malasia",1],["Rusia",1],["Letonia",1],["El Salvador",1],["Bahamas",1],["India",1],["Mónaco",1],["Luxemburgo",1],["Jamaica",1]],"professions":[["Empleados",1389],["Jubilados",1288],["Liberales",902],["Tecnicos",797],["Estudiantes",786],["Funcionarios",423],["Profesores",352],["Amas de Casa",220],["Obreros",208],["Parados",148],["Directivos",136],["Artistas",131],["Agricultores",41],["Sacerdotes",32],["Religiosas",9],["Marinos",7],["Deportistas",4]],"startingCities":[["S. Jean P. Port",1193],["Sarria",933],["Roncesvalles",746],["León",489],["Ponferrada",401],["Cebreiro",323],["Le Puy",313],["Pamplona",284],["Francia",203],["Astorga",189],["Burgos",176],["Tui",153],["Vilafranca",149],["Sevilla",95],["Oporto",89],["Valença do Minho",86],["Somport",75],["Triacastela",60],["Irún",55],["Logroño",55],["Alemania",48],["Resto Portugal",47],["Santander",33],["Samos",33],["Oviedo",31],["Ourense",31],["Jaca",29],["Holanda",27],["Mérida",25],["Suiza",24],["Sahagún",23],["Oviedo - C.P.",21],["Ribadeo",21],["Resto Asturias",18],["Bélgica",18],["Puebla de Sanabria",18],["Lourdes",16],["Frómista",16],["Sto. Domingo de la Calzada",14],["Vezelay",14],["Neda",14],["Fonsagrada - C.P.",13],["Bilbao",12],["Arles",12],["Austria",12],["Ferrol",11],["Hospital de Orbigo",10],["Resto País Vasco",10],["Puente la Reina",10],["Salamanca",10],["Nájera",10],["Braga",9],["Vilalba",9],["Carrión de los Condes",8],["Canfranc",7],["Resto C. León",7],["Estella",7],["Valencia",7],["Zaragoza",6],["Lisboa",6],["Barcelona",6],["Zamora",6],["Cáceres",6],["Rabanal del Camino",6],["Gijón",5],["Ponte de Lima",5],["Hendaya",5],["Lugo - C.P.",4],["Italia",4],["R.Pais Vasco",4],["Muxia",4],["Resto Europa",3],["Tineo - C.P.",3],["Gudiña",3],["",3],["Avilés",3],["Reino Unido",3],["Madrid - C.F.",2],["Grandas de Salime",2],["Vega de Valcarce",2],["Resto Cantabria",2],["Resto C. León - V.P.",2],["Malaga",2],["Xunqueira de Ambia",2],["París",2],["Granada",2],["Grandas de Salime - C.P.",2],["Castrojeriz",2],["Inglaterra",2],["Dinamarca",1],["Cataluña",1],["Laza",1],["Resto Asturias - C.P.",1],["A Guarda",1],["Madrid",1],["Cataluña",1],["Fonsagrada",1],["Valcarlos",1],["Mondoñedo",1],["La Bañeza",1],["Verín",1]],"startingRegions":[["France",1833],["Lugo",1398],["León",1279],["Navarra",1048],["Portugal",242],["Burgos",178],["Pontevedra",154],["Sevilla",95],["Asturias",86],["La Rioja",79],["Gipuzkoa",69],["Germany",48],["Ourense",38],["Huesca",36],["Cantabria",35],["A Coruña",29],["Holland",27],["Badajoz",25],["Switzerland",24],["Zamora",24],["Palencia",24],["Belgium",18],["Vizcaya",12],["Austria",12],["Salamanca",10],["Barcelona",8],["Valencia",7],["Cáceres",6],["Zaragoza",6],["UK",5],["Italy",4],["City&nbsp;Was Blank",3],["Europe Other",3],["Madrid",3],["Málaga",2],["Granada",2],["Denmark",1]],"caminos":[["Frances-Camino de",5979],["Portugues-Camino",396],["Norte-Camino de",208],["Via de la Plata",206],["Primitivo-Camino",44],["Ingles-Camino",25],["Otros caminos",8],["Muxia-Finisterre",4],["Otros caminos",3]]},"11":{"year":"2005","month":"11","pilgrims":1396,"gender":[["Hombre",933],["Mujer",463]],"transport":[["Pie",1276],["Bicicleta",119],["Caballo",1]],"age":[["30 - 60",908],["< 30",344],["> 60",144]],"motivation":[["Religioso y otros",942],["Religioso",331],["No religioso",123]],"spanishFrom":[["Galicia",143],["Madrid",116],["Comunidad Valenciana",83],["Cataluña",76],["Baleares",52],["Pais Vasco",39],["Andalucía",34],["Castilla León",31],["Aragón",14],["Castilla la Mancha",12],["Extremadura",11],["Navarra",10],["Murcia",9],["Asturias",9],["Cantabria",9],["Canarias",6],["La Rioja",4],["Otra",3]],"byCountry":[["España",661],["Francia",122],["Alemania",110],["Italia",73],["Canadá",51],["Estados Unidos",42],["Brasil",41],["Reino Unido",39],["Australia",39],["Suiza",28],["Holanda",20],["Austria",19],["Belgica",18],["Portugal",17],["México",14],["Argentina",13],["Japón",12],["Noruega",9],["Irlanda",8],["Colombia",6],["Hungría",6],["Nueva Zelanda",5],["Luxemburgo",4],["República Checa",4],["Dinamarca",3],["Finlandia",3],["Sudáfrica",3],["Suecia",3],["Uruguay",3],["Polonia",2],["Taiwán",2],["Rusia",2],["Ecuador",2],["Corea",2],["Venezuela",2],["Puerto Rico",2],["Cuba",1],["Croacia",1],["Chile",1],["Rumania",1],["Perú",1],["Grecia",1]],"professions":[["Empleados",327],["Liberales",219],["Tecnicos",179],["Jubilados",161],["Estudiantes",99],["Obreros",91],["Parados",76],["Funcionarios",64],["Profesores",61],["Amas de Casa",46],["Artistas",35],["Directivos",15],["Agricultores",11],["Marinos",5],["Sacerdotes",5],["Deportistas",2]],"startingCities":[["S. Jean P. Port",276],["Roncesvalles",154],["Sarria",126],["Cebreiro",77],["León",64],["Le Puy",57],["Pamplona",56],["Francia",53],["Astorga",43],["Burgos",42],["Neda",38],["Ponferrada",38],["Gudiña",33],["Tui",30],["Vilafranca",25],["Sevilla",25],["Somport",25],["Irún",16],["Suiza",15],["",14],["Jaca",11],["Samos",11],["Vezelay",10],["Valença do Minho",8],["Alemania",7],["Mérida",7],["Ferrol",6],["Arles",6],["Lourdes",6],["Sto. Domingo de la Calzada",5],["Holanda",5],["Oporto",5],["Carrión de los Condes",4],["Avilés",4],["Bilbao",4],["Triacastela",4],["Logroño",4],["Barcelona",4],["Verín",4],["Resto Portugal",3],["Puebla de Sanabria",3],["Resto País Vasco",3],["Madrid - C.F.",3],["Frómista",3],["Oviedo - C.P.",3],["Resto C. León",3],["Cataluña",3],["Zamora",3],["Estella",3],["Ourense",3],["Luxemburgo",2],["Canfranc",2],["Republica Checa",2],["Santander",2],["Rabanal del Camino",2],["Bélgica",2],["Vega de Valcarce",2],["Resto Asturias",2],["Cáceres",2],["Austria",2],["Sahagún",2],["Ribadeo",2],["Córdoba",1],["Hospital de Orbigo",1],["Lugo - C.P.",1],["Salas",1],["Oviedo",1],["Dinamarca",1],["Vilalba",1],["Roma",1],["Ponte de Lima",1],["Reino Unido",1],["Puente la Reina",1],["R.Pais Vasco",1],["Nájera",1],["París",1],["Resto Cantabria",1],["Salamanca",1],["Hendaya",1]],"startingRegions":[["France",435],["Lugo",222],["Navarra",214],["León",180],["A Coruña",44],["Burgos",42],["Ourense",40],["Pontevedra",30],["Sevilla",25],["Gipuzkoa",20],["Portugal",17],["Switzerland",15],["City&nbsp;Was Blank",14],["Huesca",13],["Asturias",11],["La Rioja",10],["Germany",7],["Badajoz",7],["Palencia",7],["Barcelona",7],["Zamora",6],["Holland",5],["Vizcaya",4],["Cantabria",3],["Madrid",3],["Cáceres",2],["Belgium",2],["Luxembourg",2],["Czech Republic",2],["Austria",2],["Córdoba",1],["Denmark",1],["Italy",1],["UK",1],["Salamanca",1]],"caminos":[["Frances-Camino de",1167],["Via de la Plata",82],["Portugues-Camino",47],["Ingles-Camino",44],["Norte-Camino de",37],["Otros caminos",14],["Primitivo-Camino",5]]},"12":{"year":"2005","month":"12","pilgrims":668,"gender":[["Hombre",495],["Mujer",173]],"transport":[["Pie",621],["Bicicleta",44],["Caballo",3]],"age":[["30 - 60",437],["< 30",202],["> 60",29]],"motivation":[["Religioso y otros",367],["Religioso",246],["No religioso",55]],"spanishFrom":[["Galicia",112],["Madrid",81],["Cataluña",47],["Castilla León",45],["Andalucía",33],["Comunidad Valenciana",29],["Pais Vasco",24],["Baleares",18],["Castilla la Mancha",11],["Aragón",10],["Asturias",10],["Murcia",8],["Canarias",7],["Navarra",3],["Cantabria",1],["Extremadura",1]],"byCountry":[["España",440],["Francia",33],["Portugal",28],["Alemania",23],["Italia",21],["Belgica",15],["Canadá",14],["Brasil",11],["Japón",11],["Reino Unido",10],["Estados Unidos",8],["Austria",6],["México",6],["Suiza",5],["Argentina",5],["Australia",4],["Chile",3],["Holanda",3],["Venezuela",2],["Perú",2],["España",2],["Hungría",2],["Bolivia",2],["Colombia",2],["Nueva Zelanda",2],["Uruguay",1],["Suecia",1],["República Checa",1],["Corea",1],["Irlanda",1],["Noruega",1],["India",1],["Ghana",1]],"professions":[["Liberales",124],["Estudiantes",109],["Empleados",96],["Tecnicos",88],["Obreros",69],["Parados",40],["Funcionarios",40],["Profesores",32],["Jubilados",26],["Artistas",16],["Directivos",10],["Sacerdotes",6],["Agricultores",4],["Amas de Casa",4],["Marinos",3],["Deportistas",1]],"startingCities":[["Sarria",94],["Roncesvalles",57],["S. Jean P. Port",51],["Cebreiro",49],["Ferrol",39],["León",35],["Ponferrada",32],["Tui",27],["Ourense",20],["Fonsagrada - C.P.",20],["Vilafranca",19],["Pamplona",18],["Le Puy",17],["Valença do Minho",16],["Burgos",14],["Francia",11],["Astorga",11],["Triacastela",9],["Oviedo",9],["Somport",9],["Irún",7],["Vilalba",7],["Jaca",6],["Resto País Vasco",6],["Sevilla",5],["Oporto",5],["Mondoñedo",4],["Vega de Valcarce",4],["Holanda",4],["Vezelay",3],["Resto Portugal",3],["Logroño",3],["Vigo",3],["Austria",3],["Bélgica",3],["Alemania",3],["Suiza",3],["Salamanca",3],["Roma",3],["Cataluña",2],["Madrid - C.F.",2],["Neda",2],["Zamora",2],["Frómista",2],["Gijón",2],["Sahagún",2],["Resto C. León",2],["Arles",2],["Carrión de los Condes",1],["Sto. Domingo de la Calzada",1],["Muxia",1],["Oviedo - C.P.",1],["Vincios",1],["",1],["Lugo - C.P.",1],["Canfranc",1],["Samos",1],["París",1],["Estella",1],["Resto Asturias - C.P.",1],["Ponte de Lima",1],["Valencia",1],["Finisterra",1]],"startingRegions":[["Lugo",185],["León",105],["France",94],["Navarra",76],["A Coruña",43],["Pontevedra",31],["Portugal",25],["Ourense",20],["Burgos",14],["Asturias",13],["Gipuzkoa",13],["Huesca",7],["Sevilla",5],["Holland",4],["La Rioja",4],["Austria",3],["Germany",3],["Switzerland",3],["Salamanca",3],["Italy",3],["Belgium",3],["Palencia",3],["Madrid",2],["Zamora",2],["Barcelona",2],["City&nbsp;Was Blank",1],["Valencia",1]],"caminos":[["Frances-Camino de",479],["Portugues-Camino",56],["Ingles-Camino",41],["Norte-Camino de",35],["Via de la Plata",30],["Primitivo-Camino",23],["Muxia-Finisterre",2],["Otros caminos",1],["Otros caminos",1]]},"all":{"year":"2005","month":"","pilgrims":93924,"gender":[["Hombre",55706],["Mujer",38218]],"transport":[["Pie",76675],["Bicicleta",16984],["Caballo",242],["Silla de ruedas",23]],"age":[["30 - 60",53294],["< 30",30217],["> 60",10413]],"motivation":[["Religioso",35456],["Religioso y otros",49977],["No religioso",8491]],"spanishFrom":[["Madrid",9355],["Cataluña",7718],["Comunidad Valenciana",6480],["Andalucía",6439],["Pais Vasco",4569],["Castilla León",3967],["Galicia",3673],["Castilla la Mancha",1834],["Extremadura",1435],["Murcia",1374],["Aragón",1316],["Baleares",1045],["Asturias",901],["Navarra",895],["Canarias",838],["Cantabria",472],["La Rioja",360],["Otra",145],["Ceuta",38],["Melilla",27]],"byCountry":[["España",52934],["Italia",7429],["Alemania",7155],["Francia",5909],["Portugal",2572],["Estados Unidos",2047],["Holanda",1610],["Reino Unido",1512],["Austria",1470],["Canadá",1420],["Belgica",1283],["Brasil",1163],["Suiza",726],["Dinamarca",698],["Australia",666],["Irlanda",622],["México",473],["Polonia",422],["Suecia",340],["República Checa",330],["Hungría",326],["Noruega",278],["Japón",278],["Argentina",277],["Finlandia",272],["Eslovaquia",174],["Sudáfrica",162],["Colombia",148],["Venezuela",135],["Eslovenia",128],["Nueva Zelanda",125],["Chile",77],["Uruguay",74],["Andorra",66],["Ecuador",56],["Perú",51],["Puerto Rico",49],["Rumania",40],["Israel",31],["Luxemburgo",26],["Croacia",24],["Corea",24],["Rusia",23],["Estonia",19],["Cuba",17],["Costa Rica",15],["Rep. Dominicana",14],["Bolivia",13],["San Marino",12],["Marruecos",12],["Guatemala",12],["Ucrania",11],["Malasia",11],["Islandia",10],["Filipinas",10],["El Salvador",8],["Grecia",8],["Bulgaria",7],["Lituania",7],["India",6],["Malta",5],["China",5],["Angola",5],["Taiwán",5],["Letonia",5],["Panamá",5],["Paraguay",4],["Armenia",4],["Ghana",4],["Serbia",3],["Camerún",3],["Nicaragua",3],["Singapur",3],["Mozambique",3],["Namibia",2],["Bielorrusia",2],["Chipre",2],["Turquía",2],["Jamaica",2],["Vietnam",2],["Liechtensein",2],["Bosnia",2],["Honduras",2],["Tailandia",2],["Nigeria",2],["Zambia",2],["Líbano",2],["Congo",1],["Trinidad y Tobago",1],["Yugoslavia",1],["Guinea",1],["Sierra Leona",1],["Mónaco",1],["Antillas Holandesas",1],["Mauricio",1],["Sri Lanka",1],["Pakistán",1],["Islas Feroe",1],["Fiji",1],["Irak",1],["Zimbabwe",1],["Brunei",1],["Dominica",1],["Indonesia",1],["Bahamas",1],["Madagascar",1]],"professions":[["Estudiantes",18827],["Empleados",16552],["Tecnicos",11592],["Liberales",11153],["Jubilados",10389],["Profesores",7886],["Funcionarios",5029],["Obreros",4798],["Amas de Casa",2989],["Parados",1490],["Directivos",1080],["Artistas",1035],["Sacerdotes",521],["Agricultores",333],["Marinos",102],["Religiosas",79],["Deportistas",69]],"startingCities":[["Sarria",14848],["S. Jean P. Port",9851],["Roncesvalles",9230],["Cebreiro",7434],["León",6677],["Ponferrada",5985],["Astorga",4303],["Pamplona",3280],["Burgos",2609],["Tui",2533],["Le Puy",2241],["Vilafranca",2241],["Francia",1611],["Valença do Minho",1102],["Triacastela",1062],["Sevilla",1004],["Somport",857],["Ourense",759],["Oporto",740],["Logroño",730],["Irún",720],["Holanda",671],["Samos",620],["Ribadeo",591],["Alemania",513],["Ferrol",507],["Oviedo - C.P.",480],["Resto Portugal",457],["Resto Asturias",383],["Sahagún",370],["Jaca",369],["Oviedo",349],["Rabanal del Camino",346],["Santander",324],["Ponte de Lima",323],["Mérida",315],["Vega de Valcarce",314],["Vilalba",301],["Resto País Vasco",291],["Sto. Domingo de la Calzada",290],["Bilbao",281],["Resto C. León",278],["Frómista",276],["Lugo - C.P.",262],["Bélgica",259],["Puente la Reina",212],["Gudiña",201],["Suiza",188],["Salamanca",186],["Carrión de los Condes",173],["Hospital de Orbigo",169],["Braga",165],["",155],["Madrid - C.F.",154],["Lourdes",148],["Neda",144],["Avilés",142],["Vezelay",132],["Puebla de Sanabria",132],["Arles",117],["Zamora",114],["Estella",108],["Gijón",94],["Fonsagrada - C.P.",88],["Resto Cantabria",87],["Canfranc",87],["Resto Asturias - C.P.",87],["Vigo",83],["Xunqueira de Ambia",81],["Verín",79],["Austria",78],["Mondoñedo",72],["Cataluña",71],["Hendaya",68],["Muxia",68],["Nájera",64],["Valencia",62],["Lisboa",58],["Barcelona",58],["Cáceres",54],["Zaragoza",53],["Tineo - C.P.",48],["R.Pais Vasco",45],["Italia",45],["París",44],["Castrojeriz",44],["Finisterra",39],["Rábade",38],["Porriño",36],["Resto C. León - V.P.",36],["Grandas de Salime",28],["Madrid",23],["Lourenzá",22],["Resto de Extremadura",22],["Badajoz",20],["Grandas de Salime - C.P.",19],["Fonsagrada",19],["Reino Unido",16],["Granja de Moreruela",16],["Huelva",15],["Malaga",15],["Castilla La Mancha",14],["Com. Valenciana",14],["Dinamarca",14],["Cadavo",13],["Tineo",13],["Roma",13],["Valcarlos",13],["Grado",12],["Salas",12],["Resto Europa",11],["Vegadeo",11],["Resto Andalucia",11],["Inglaterra",11],["Valladolid",10],["Paradela",10],["Republica Checa",10],["Granada",10],["Murcia",9],["Fonfría",9],["Luxemburgo",8],["San Juan de Ortega",8],["Castilla la Mancha",7],["Polonia",7],["Cast. la Mancha",7],["Benavente",7],["Laza",6],["Hungría",6],["Vincios",6],["La Bañeza",5],["A Guarda",4],["Jerusalem",4],["Córdoba",4],["Artieda",3],["Irlanda",3],["Gonzar",3],["La Mesa",2],["Vilabade",1],["Borres",1],["Finlandia",1],["Cea",1],["Leyre",1]],"startingRegions":[["Lugo",25355],["León",20725],["France",15069],["Navarra",12844],["Portugal",2845],["Pontevedra",2662],["Burgos",2661],["Asturias",1681],["Ourense",1126],["La Rioja",1084],["Gipuzkoa",1056],["Sevilla",1015],["A Coruña",758],["Holland",671],["Germany",513],["Huesca",456],["Palencia",449],["Cantabria",411],["Badajoz",357],["Vizcaya",281],["Zamora",269],["Belgium",259],["Switzerland",188],["Salamanca",186],["Madrid",177],["City&nbsp;Was Blank",155],["Barcelona",129],["Austria",78],["Valencia",76],["Italy",58],["Zaragoza",56],["Cáceres",54],["Huelva",53],["Albacete",28],["UK",27],["Málaga",15],["Denmark",14],["Europe Other",11],["Granada",10],["Czech Republic",10],["Valladolid",10],["Murcia",9],["Luxembourg",8],["Poland",7],["Hungary",6],["Israel",4],["Córdoba",4],["Ireland",3],["Finland",1]],"caminos":[["Frances-Camino de",79396],["Portugues-Camino",5507],["Norte-Camino de",3843],["Via de la Plata",3140],["Primitivo-Camino",1028],["Ingles-Camino",651],["Otros caminos",252],["Muxia-Finisterre",107]]}},"2006":{"1":{"year":"2006","month":"1","pilgrims":314,"gender":[["Hombre",232],["Mujer",82]],"transport":[["Pie",288],["Bicicleta",24],["Caballo",2]],"age":[["30 - 60",210],["< 30",86],["> 60",18]],"motivation":[["Religioso y otros",186],["Religioso",87],["No religioso",41]],"spanishFrom":[["Galicia",43],["Andalucía",30],["Comunidad Valenciana",22],["Madrid",21],["Cataluña",20],["Castilla León",16],["Pais Vasco",11],["Aragón",5],["Murcia",5],["Baleares",4],["Asturias",2],["La Rioja",1],["Melilla",1],["Navarra",1],["Cantabria",1],["Extremadura",1],["Canarias",1]],"byCountry":[["España",185],["Italia",19],["Alemania",18],["Francia",15],["Brasil",10],["Reino Unido",9],["Argentina",6],["Japón",6],["Austria",6],["Belgica",5],["Portugal",4],["Canadá",3],["Suiza",3],["Estados Unidos",3],["México",2],["Suecia",2],["Holanda",2],["Irlanda",2],["Chile",2],["Hungría",2],["Australia",1],["Albania",1],["Eslovaquia",1],["Uruguay",1],["Dinamarca",1],["Sudáfrica",1],["Perú",1],["Corea",1]],"professions":[["Liberales",59],["Empleados",45],["Tecnicos",42],["Estudiantes",33],["Profesores",31],["Obreros",22],["Jubilados",22],["Funcionarios",21],["Artistas",13],["Parados",11],["Marinos",4],["Sacerdotes",3],["Directivos",2],["Agricultores",2],["Deportistas",2],["Amas de Casa",2]],"startingCities":[["Sarria",49],["Cebreiro",34],["Roncesvalles",29],["León",25],["Ponferrada",16],["Vilafranca",14],["S. Jean P. Port",14],["Burgos",13],["Astorga",11],["Valença do Minho",11],["Oporto",9],["Pamplona",8],["Puebla de Sanabria",6],["Francia",6],["Somport",6],["Le Puy",6],["Tui",4],["Ribadeo",4],["Alemania",3],["Suiza",3],["Samos",3],["Oviedo",3],["",2],["Finisterra",2],["Vigo",2],["Santander",2],["Resto Andalucia",2],["Jaca",2],["Salamanca",2],["Sevilla",2],["Mérida",2],["Logroño",2],["Carrión de los Condes",1],["Oviedo - C.P.",1],["Triacastela",1],["Avilés",1],["Puente la Reina",1],["Ourense",1],["Vezelay",1],["Ferrol",1],["Irún",1],["Resto Asturias",1],["Roma",1],["Hendaya",1],["Resto C. León",1],["Lugo - C.P.",1],["Arles",1],["Ponte de Lima",1],["Resto Asturias - C.P.",1]],"startingRegions":[["Lugo",92],["León",67],["Navarra",38],["France",35],["Portugal",21],["Burgos",13],["Asturias",7],["Zamora",6],["Pontevedra",6],["Sevilla",4],["Switzerland",3],["Germany",3],["A Coruña",3],["Cantabria",2],["City&nbsp;Was Blank",2],["Huesca",2],["Salamanca",2],["Badajoz",2],["La Rioja",2],["Gipuzkoa",1],["Ourense",1],["Palencia",1],["Italy",1]],"caminos":[["Frances-Camino de",251],["Portugues-Camino",27],["Via de la Plata",15],["Norte-Camino de",13],["Primitivo-Camino",3],["Otros caminos",2],["Muxia-Finisterre",2],["Ingles-Camino",1]]},"2":{"year":"2006","month":"2","pilgrims":351,"gender":[["Hombre",225],["Mujer",126]],"transport":[["Pie",329],["Bicicleta",22]],"age":[["< 30",167],["30 - 60",166],["> 60",18]],"motivation":[["Religioso y otros",189],["Religioso",133],["No religioso",29]],"spanishFrom":[["Madrid",60],["Cataluña",36],["Comunidad Valenciana",32],["Galicia",30],["Castilla la Mancha",25],["Andalucía",17],["Murcia",9],["Pais Vasco",8],["Baleares",7],["Castilla León",7],["Asturias",4],["Cantabria",3],["Aragón",3],["Extremadura",2],["Navarra",1]],"byCountry":[["España",244],["Alemania",23],["Portugal",12],["Italia",9],["Reino Unido",8],["Estados Unidos",7],["Francia",6],["Austria",5],["Polonia",5],["Brasil",4],["México",4],["Argentina",2],["Bulgaria",2],["Belgica",2],["Uruguay",2],["Holanda",2],["Suecia",2],["Canadá",2],["Suiza",2],["Finlandia",2],["Cuba",1],["Chile",1],["Rumania",1],["Irlanda",1],["Filipinas",1],["Ecuador",1]],"professions":[["Estudiantes",121],["Liberales",56],["Empleados",42],["Tecnicos",29],["Jubilados",20],["Obreros",19],["Parados",17],["Profesores",15],["Agricultores",8],["Funcionarios",8],["Amas de Casa",5],["Sacerdotes",4],["Artistas",4],["Directivos",3]],"startingCities":[["Sarria",110],["Cebreiro",44],["Roncesvalles",27],["Valença do Minho",16],["Astorga",16],["Ponferrada",14],["S. Jean P. Port",14],["León",12],["Burgos",10],["Samos",9],["Oporto",9],["Ferrol",8],["Vilafranca",6],["Tui",5],["Sevilla",5],["Ourense",5],["Francia",4],["Pamplona",4],["Irún",3],["Jaca",3],["Logroño",3],["Oviedo",3],["Somport",3],["Cataluña",2],["Vigo",2],["Resto Cantabria",2],["Santander",2],["Vilalba",2],["Puebla de Sanabria",1],["Sahagún",1],["Vincios",1],["Muxia",1],["Ribadeo",1],["Triacastela",1],["Hospital de Orbigo",1],["Resto C. León",1]],"startingRegions":[["Lugo",167],["León",51],["Navarra",31],["Portugal",25],["France",21],["Burgos",10],["A Coruña",9],["Pontevedra",8],["Sevilla",5],["Ourense",5],["Cantabria",4],["Gipuzkoa",3],["Huesca",3],["La Rioja",3],["Asturias",3],["Barcelona",2],["Zamora",1]],"caminos":[["Frances-Camino de",285],["Portugues-Camino",33],["Norte-Camino de",13],["Via de la Plata",11],["Ingles-Camino",8],["Muxia-Finisterre",1]]},"3":{"year":"2006","month":"3","pilgrims":1093,"gender":[["Hombre",708],["Mujer",385]],"transport":[["Pie",1017],["Bicicleta",72],["Caballo",3],["Silla de ruedas",1]],"age":[["30 - 60",532],["< 30",493],["> 60",68]],"motivation":[["Religioso y otros",592],["Religioso",410],["No religioso",91]],"spanishFrom":[["Madrid",154],["Extremadura",77],["Cataluña",65],["Galicia",38],["Andalucía",35],["Baleares",34],["Comunidad Valenciana",32],["Castilla la Mancha",27],["Castilla León",25],["Canarias",23],["Pais Vasco",20],["Aragón",11],["Murcia",4],["Asturias",3],["Cantabria",2],["La Rioja",2],["Navarra",1],["Ceuta",1],["Otra",1]],"byCountry":[["España",555],["Portugal",118],["Alemania",109],["Reino Unido",49],["Francia",40],["Italia",31],["Canadá",27],["México",23],["Estados Unidos",16],["Irlanda",12],["Brasil",12],["Belgica",11],["Andorra",10],["Suiza",9],["Argentina",8],["Australia",8],["Japón",7],["Austria",7],["Finlandia",6],["Holanda",6],["Polonia",4],["Suecia",4],["República Checa",3],["Corea",3],["Chile",2],["Colombia",2],["Nueva Zelanda",2],["Hungría",2],["Luxemburgo",2],["Dinamarca",1],["España",1],["Perú",1],["Venezuela",1],["Trinidad y Tobago",1]],"professions":[["Estudiantes",380],["Empleados",162],["Liberales",148],["Jubilados",92],["Profesores",90],["Tecnicos",69],["Obreros",33],["Funcionarios",29],["Parados",27],["Amas de Casa",21],["Sacerdotes",14],["Directivos",11],["Agricultores",7],["Artistas",6],["Deportistas",3],["Marinos",1]],"startingCities":[["Sarria",296],["Cebreiro",109],["León",98],["S. Jean P. Port",60],["Roncesvalles",56],["Ponferrada",50],["Triacastela",38],["Astorga",36],["Vilafranca",35],["Pamplona",30],["Le Puy",20],["Burgos",19],["Valença do Minho",19],["Sevilla",17],["Tui",16],["Oporto",15],["Oviedo",11],["Francia",10],["Logroño",10],["Xunqueira de Ambia",9],["Sahagún",7],["Jaca",7],["Somport",7],["Samos",6],["Cataluña",6],["Rabanal del Camino",6],["Irún",6],["Avilés",6],["Vilalba",5],["Ferrol",5],["Ourense",5],["Santander",5],["Bélgica",5],["Oviedo - C.P.",4],["Holanda",4],["Sto. Domingo de la Calzada",4],["Lisboa",4],["Hendaya",4],["Lugo - C.P.",3],["Ponte de Lima",3],["Nájera",3],["Hospital de Orbigo",3],["Vega de Valcarce",2],["Puente la Reina",2],["Resto Asturias",2],["Lourdes",2],["Suiza",2],["Zamora",1],["Resto Andalucia",1],["Canfranc",1],["Puebla de Sanabria",1],["Malaga",1],["Arles",1],["Alemania",1],["Muxia",1],["Salamanca",1],["Com. Valenciana",1],["Resto C. León",1],["Frómista",1],["R.Pais Vasco",1],["Reino Unido",1],["Madrid",1],["Resto Europa",1],["Braga",1],["Resto Portugal",1],["",1],["Porriño",1],["Austria",1]],"startingRegions":[["Lugo",457],["León",238],["France",104],["Navarra",88],["Portugal",43],["Asturias",23],["Burgos",19],["Sevilla",18],["Pontevedra",17],["La Rioja",17],["Ourense",14],["Huesca",8],["Gipuzkoa",7],["Barcelona",6],["A Coruña",6],["Cantabria",5],["Belgium",5],["Holland",4],["Zamora",2],["Switzerland",2],["Málaga",1],["Austria",1],["Salamanca",1],["Germany",1],["Palencia",1],["UK",1],["Madrid",1],["Europe Other",1],["City&nbsp;Was Blank",1],["Valencia",1]],"caminos":[["Frances-Camino de",942],["Portugues-Camino",60],["Norte-Camino de",39],["Via de la Plata",37],["Primitivo-Camino",7],["Ingles-Camino",5],["Otros caminos",1],["Muxia-Finisterre",1],["Otros caminos",1]]},"4":{"year":"2006","month":"4","pilgrims":7438,"gender":[["Hombre",4324],["Mujer",3114]],"transport":[["Pie",6278],["Bicicleta",1133],["Caballo",26],["Silla de ruedas",1]],"age":[["30 - 60",3626],["< 30",3253],["> 60",559]],"motivation":[["Religioso y otros",3699],["Religioso",3019],["No religioso",720]],"spanishFrom":[["Madrid",935],["Andalucía",790],["Galicia",538],["Comunidad Valenciana",462],["Cataluña",460],["Pais Vasco",283],["Castilla León",279],["Extremadura",172],["Baleares",128],["Asturias",96],["Canarias",79],["Castilla la Mancha",72],["Murcia",69],["Navarra",59],["Aragón",47],["Cantabria",33],["Otra",18],["La Rioja",17],["Ceuta",3]],"byCountry":[["España",4540],["Portugal",749],["Alemania",448],["Francia",349],["Italia",244],["Reino Unido",133],["Estados Unidos",102],["Irlanda",98],["Finlandia",78],["Austria",70],["Brasil",68],["Holanda",59],["Canadá",52],["México",49],["Suiza",48],["Belgica",47],["Venezuela",34],["Noruega",27],["Dinamarca",25],["Argentina",24],["Australia",24],["Suecia",21],["Estonia",19],["Colombia",19],["Polonia",17],["Hungría",12],["Ecuador",10],["Chile",7],["Andorra",7],["Japón",6],["Perú",6],["República Checa",5],["Cuba",4],["Nueva Zelanda",4],["Grecia",3],["Sudáfrica",3],["Rep. Dominicana",3],["Rusia",2],["Nicaragua",2],["Uruguay",2],["Turquía",1],["Islandia",1],["Eslovenia",1],["Luxemburgo",1],["Rumania",1],["Angola",1],["Laos",1],["Paraguay",1],["China",1],["Serbia",1],["Honduras",1],["Lituania",1],["Albania",1],["Puerto Rico",1],["Cabo Verde",1],["Corea",1],["Chipre",1]],"professions":[["Estudiantes",2438],["Empleados",1051],["Liberales",862],["Tecnicos",859],["Profesores",612],["Jubilados",537],["Funcionarios",304],["Obreros",265],["Amas de Casa",171],["Directivos",96],["Parados",86],["Artistas",61],["Sacerdotes",44],["Agricultores",24],["Religiosas",11],["Marinos",9],["Deportistas",8]],"startingCities":[["Sarria",2040],["Cebreiro",578],["Ponferrada",478],["Roncesvalles",427],["Tui",356],["León",349],["S. Jean P. Port",324],["Valença do Minho",248],["Astorga",216],["Oporto",201],["Resto Portugal",149],["Burgos",148],["Vilafranca",128],["Le Puy",117],["Pamplona",112],["Triacastela",111],["Sevilla",106],["Ourense",96],["Ferrol",79],["Samos",78],["Vilalba",74],["Ponte de Lima",72],["Ribadeo",69],["Francia",67],["Rabanal del Camino",61],["Verín",40],["Logroño",39],["Avilés",34],["Porriño",33],["Resto C. León",30],["Mérida",30],["Somport",29],["Salamanca",26],["Resto Asturias",23],["Bilbao",23],["Irún",22],["Alemania",21],["Braga",20],["Sahagún",18],["Jaca",16],["Oviedo",15],["Gudiña",13],["Frómista",13],["Cáceres",13],["Paradela",12],["Lugo - C.P.",12],["Grandas de Salime",11],["Oviedo - C.P.",11],["Vezelay",10],["Grandas de Salime - C.P.",10],["Vega de Valcarce",10],["Muxia",10],["Fonsagrada - C.P.",10],["Madrid - C.F.",9],["",9],["Lourenzá",8],["Zaragoza",8],["Santander",8],["Suiza",8],["Sto. Domingo de la Calzada",8],["Zamora",7],["Puente la Reina",7],["Chaves-Portugal",7],["Carrión de los Condes",7],["Castilla la Mancha",6],["Holanda",5],["Canfranc",5],["Resto País Vasco",5],["Hospital de Orbigo",5],["Valencia",5],["Lisboa",4],["R.Pais Vasco",4],["Arles",4],["Irlanda",3],["Vigo",3],["Malaga",3],["Granada",3],["Neda",3],["Mondoñedo",3],["Borres",3],["Barcelona",3],["Austria",3],["Estella",3],["La Bañeza",3],["Hendaya",3],["Fonsagrada",3],["Madrid",2],["Inglaterra",2],["Resto Asturias - C.P.",2],["Nájera",2],["Laza",2],["Puebla de Sanabria",2],["Córdoba",2],["Gijón",2],["Italia",2],["Lourdes",2],["Resto Andalucia",2],["Bélgica",1],["París",1],["Roma",1],["Valladolid",1],["Reino Unido",1],["Cataluña",1],["Resto Europa",1],["San Juan de Ortega",1],["Com. Valenciana",1],["Resto Cantabria",1]],"startingRegions":[["Lugo",2998],["León",1298],["Portugal",694],["France",557],["Navarra",549],["Pontevedra",392],["Ourense",151],["Burgos",149],["Asturias",111],["Sevilla",108],["A Coruña",92],["La Rioja",49],["Gipuzkoa",31],["Badajoz",30],["Salamanca",26],["Vizcaya",23],["Germany",21],["Huesca",21],["Palencia",20],["Cáceres",13],["Madrid",11],["City&nbsp;Was Blank",9],["Cantabria",9],["Zamora",9],["Switzerland",8],["Zaragoza",8],["Porgugal",7],["Albacete",6],["Valencia",6],["Holland",5],["Barcelona",4],["Málaga",3],["Granada",3],["Ireland",3],["Austria",3],["UK",3],["Italy",3],["Córdoba",2],["Belgium",1],["Valladolid",1],["Europe Other",1]],"caminos":[["Frances-Camino de",5530],["Portugues-Camino",1086],["Via de la Plata",358],["Norte-Camino de",304],["Ingles-Camino",82],["Primitivo-Camino",48],["Otros caminos",11],["Muxia-Finisterre",10],["Otros caminos",9]]},"5":{"year":"2006","month":"5","pilgrims":9992,"gender":[["Hombre",6126],["Mujer",3866]],"transport":[["Pie",8127],["Bicicleta",1834],["Caballo",30],["Silla de ruedas",1]],"age":[["30 - 60",6112],["> 60",2476],["< 30",1404]],"motivation":[["Religioso y otros",4994],["Religioso",4278],["No religioso",720]],"spanishFrom":[["Madrid",598],["Galicia",532],["Cataluña",519],["Andalucía",326],["Comunidad Valenciana",269],["Pais Vasco",261],["Castilla León",237],["Castilla la Mancha",143],["Canarias",126],["Aragón",77],["Asturias",71],["Baleares",66],["Extremadura",46],["Navarra",44],["Cantabria",42],["Murcia",33],["Otra",32],["La Rioja",15],["Ceuta",12],["Melilla",1]],"byCountry":[["España",3450],["Alemania",1408],["Francia",1082],["Italia",722],["Austria",327],["Holanda",305],["Canadá",292],["Portugal",282],["Reino Unido",278],["Estados Unidos",232],["Brasil",208],["Belgica",197],["Dinamarca",152],["Australia",131],["Suiza",108],["Irlanda",100],["Polonia",82],["Finlandia",81],["Suecia",61],["Hungría",51],["México",44],["Eslovenia",41],["Noruega",40],["Japón",38],["Venezuela",33],["Argentina",30],["Sudáfrica",29],["República Checa",20],["Nueva Zelanda",18],["Colombia",17],["Letonia",15],["Puerto Rico",10],["Uruguay",10],["Costa Rica",9],["Chile",8],["Andorra",8],["Ecuador",7],["Corea",7],["Eslovaquia",6],["España",6],["Estonia",6],["Luxemburgo",6],["Guatemala",5],["China",4],["Rumania",4],["Filipinas",3],["Croacia",2],["Perú",2],["Nicaragua",2],["Lituania",1],["Serbia",1],["Grecia",1],["Cuba",1],["Singapur",1],["Rusia",1],["Panamá",1],["Israel",1],["Malasia",1],["Bulgaria",1],["Islandia",1]],"professions":[["Jubilados",2543],["Empleados",1810],["Liberales",1424],["Tecnicos",1269],["Estudiantes",637],["Funcionarios",533],["Obreros",415],["Profesores",397],["Amas de Casa",353],["Parados",242],["Directivos",162],["Artistas",96],["Sacerdotes",38],["Agricultores",35],["Marinos",17],["Religiosas",17],["Deportistas",4]],"startingCities":[["S. Jean P. Port",1550],["Sarria",1219],["Roncesvalles",845],["León",680],["Cebreiro",512],["Pamplona",462],["Le Puy",456],["Astorga",434],["Ponferrada",433],["Burgos",347],["Sevilla",257],["Francia",244],["Tui",184],["Oporto",154],["Vilafranca",146],["Holanda",119],["Resto Portugal",114],["Somport",112],["Ourense",97],["Alemania",87],["Triacastela",84],["Logroño",76],["Irún",61],["Valença do Minho",59],["Ponte de Lima",55],["Oviedo",51],["Sto. Domingo de la Calzada",43],["Bélgica",38],["Jaca",38],["Ribadeo",34],["Oviedo - C.P.",33],["",31],["Muxia",31],["Santander",30],["Samos",30],["Ferrol",29],["Resto C. León",29],["Mérida",29],["Frómista",29],["Carrión de los Condes",28],["Arles",28],["Zamora",25],["Sahagún",24],["Vezelay",24],["Braga",24],["Gudiña",23],["Madrid - C.F.",22],["Resto Asturias",22],["Salamanca",22],["Suiza",21],["Fonsagrada - C.P.",21],["Bilbao",21],["Gijón",20],["Resto País Vasco",19],["Canfranc",17],["Puente la Reina",17],["Puebla de Sanabria",16],["Lourdes",15],["Lisboa",14],["Lugo - C.P.",14],["Hendaya",14],["Vigo",13],["Chaves-Portugal",12],["Vega de Valcarce",12],["Hospital de Orbigo",11],["Resto Asturias - C.P.",11],["Rabanal del Camino",11],["Austria",11],["Cataluña",11],["Barcelona",11],["Fonsagrada",10],["Valencia",10],["Francia",9],["Resto Cantabria",8],["Avilés",8],["Córdoba",7],["Resto Andalucia",7],["Zaragoza",7],["Nájera",7],["Italia",7],["R.Pais Vasco",6],["Resto C. León - V.P.",6],["Estella",6],["Granja de Moreruela",6],["Badajoz",5],["París",5],["Com. Valenciana",5],["Granada",5],["Luxemburgo",5],["Resto Europa",4],["Tineo - C.P.",4],["Valladolid",4],["Roma",3],["Finisterra",3],["Madrid",3],["Cáceres",2],["A Guarda",2],["Grandas de Salime - C.P.",2],["Porriño",2],["Vilalba",2],["Neda",2],["Resto de Extremadura",2],["Cast. la Mancha",2],["Laza",2],["Verín",2],["Valcarlos",1],["Reino Unido",1],["Malaga",1],["Dinamarca",1],["Castrojeriz",1],["Xunqueira de Ambia",1]],"startingRegions":[["France",2457],["Lugo",1926],["León",1786],["Navarra",1331],["Portugal",420],["Burgos",348],["Sevilla",264],["Pontevedra",201],["Asturias",151],["La Rioja",126],["Ourense",125],["Holland",119],["Germany",87],["Gipuzkoa",86],["A Coruña",65],["Palencia",57],["Huesca",55],["Zamora",47],["Cantabria",38],["Belgium",38],["Badajoz",36],["City&nbsp;Was Blank",31],["Madrid",25],["Salamanca",22],["Barcelona",22],["Switzerland",21],["Vizcaya",21],["Valencia",15],["Porgugal",12],["Austria",11],["Italy",10],["Zaragoza",7],["Córdoba",7],["Luxembourg",5],["Granada",5],["Europe Other",4],["Valladolid",4],["Cáceres",2],["Albacete",2],["UK",1],["Málaga",1],["Denmark",1]],"caminos":[["Frances-Camino de",8332],["Portugues-Camino",621],["Via de la Plata",534],["Norte-Camino de",309],["Primitivo-Camino",85],["Muxia-Finisterre",34],["Otros caminos",31],["Ingles-Camino",31],["Otros caminos",15]]},"6":{"year":"2006","month":"6","pilgrims":12946,"gender":[["Hombre",7994],["Mujer",4952]],"transport":[["Pie",9806],["Bicicleta",3091],["Caballo",48],["Silla de ruedas",1]],"age":[["30 - 60",8026],["> 60",2859],["< 30",2061]],"motivation":[["Religioso y otros",6252],["Religioso",5635],["No religioso",1059]],"spanishFrom":[["Cataluña",818],["Madrid",735],["Andalucía",602],["Comunidad Valenciana",558],["Pais Vasco",487],["Castilla León",375],["Galicia",293],["Aragón",182],["Asturias",172],["Castilla la Mancha",152],["Extremadura",124],["Canarias",120],["Baleares",93],["Navarra",79],["Murcia",73],["Cantabria",40],["La Rioja",40],["Otra",11],["Ceuta",5],["Melilla",4]],"byCountry":[["España",4963],["Alemania",1446],["Francia",1260],["Italia",1223],["Holanda",482],["Estados Unidos",390],["Portugal",381],["Austria",285],["Canadá",278],["Reino Unido",270],["Belgica",231],["Brasil",231],["Australia",163],["Irlanda",160],["Suiza",136],["República Checa",114],["Dinamarca",99],["Suecia",90],["Hungría",89],["Finlandia",84],["México",77],["Sudáfrica",68],["Noruega",60],["Japón",48],["Nueva Zelanda",45],["Argentina",27],["Polonia",24],["Colombia",23],["Venezuela",23],["Eslovenia",19],["Estonia",15],["Chile",13],["Andorra",11],["Eslovaquia",11],["Corea",10],["Islandia",10],["Uruguay",10],["Puerto Rico",10],["Ecuador",5],["Singapur",5],["España",5],["Grecia",4],["Rumania",4],["Israel",4],["Panamá",3],["Rep. Dominicana",3],["Letonia",3],["Perú",3],["Cuba",3],["Costa Rica",3],["Malasia",2],["Rusia",2],["Taiwán",2],["Serbia",2],["Croacia",1],["Islas Feroe",1],["Mauricio",1],["Paraguay",1],["Marruecos",1],["Belice",1],["Bolivia",1],["Bulgaria",1],["Lituania",1],["Luxemburgo",1],["Nicaragua",1],["Turquía",1],["Argelia",1]],"professions":[["Jubilados",2989],["Empleados",2282],["Liberales",1772],["Tecnicos",1704],["Estudiantes",1049],["Funcionarios",843],["Profesores",599],["Obreros",561],["Amas de Casa",428],["Parados",277],["Directivos",153],["Artistas",121],["Agricultores",68],["Sacerdotes",60],["Marinos",16],["Religiosas",15],["Deportistas",7],["Oikoten",2]],"startingCities":[["S. Jean P. Port",2125],["Roncesvalles",1401],["Sarria",1371],["León",870],["Cebreiro",660],["Pamplona",629],["Le Puy",576],["Ponferrada",542],["Astorga",463],["Francia",389],["Burgos",358],["Tui",244],["Holanda",237],["Sevilla",236],["Vilafranca",183],["Somport",180],["Irún",150],["Samos",147],["Resto Portugal",135],["Oporto",130],["Valença do Minho",116],["Logroño",99],["Alemania",92],["Jaca",74],["Ferrol",71],["Triacastela",65],["Bélgica",63],["Oviedo - C.P.",62],["Resto C. León",59],["Mérida",58],["Santander",55],["Sahagún",50],["Vezelay",44],["Arles",42],["Bilbao",41],["Suiza",40],["Chaves-Portugal",37],["Ourense",36],["Resto Asturias",35],["Salamanca",35],["Lourdes",31],["Resto País Vasco",31],["Madrid - C.F.",31],["Ribadeo",31],["Zamora",27],["Oviedo",25],["Puente la Reina",25],["Hospital de Orbigo",23],["Resto C. León - V.P.",23],["Sto. Domingo de la Calzada",22],["Hendaya",22],["Vilalba",22],["Canfranc",22],["Vega de Valcarce",22],["Lisboa",22],["Braga",20],["Frómista",19],["Lugo - C.P.",18],["Austria",16],["Ponte de Lima",16],["Carrión de los Condes",16],["Resto Cantabria",15],["Rabanal del Camino",13],["R.Pais Vasco",13],["París",12],["Zaragoza",11],["Cataluña",10],["Fonsagrada - C.P.",10],["Avilés",10],["Cáceres",10],["Barcelona",9],["Gijón",9],["Resto de Extremadura",9],["Resto Asturias - C.P.",8],["Puebla de Sanabria",8],["Valencia",7],["",7],["Gudiña",6],["Estella",6],["Resto Andalucia",6],["Granada",6],["Italia",6],["Badajoz",5],["Francia",5],["Vigo",4],["Malaga",4],["Castilla la Mancha",4],["Com. Valenciana",4],["Granja de Moreruela",3],["Nájera",3],["Castrojeriz",3],["Fonsagrada",3],["Fonfría",2],["Roma",2],["Madrid",2],["Porriño",2],["Córdoba",2],["Republica Checa",2],["Laza",2],["Reino Unido",2],["Xunqueira de Ambia",2],["Verín",2],["Pontedeume",1],["San Juan de Ortega",1],["Tineo",1],["Hungría",1],["Polonia",1],["Com. Valenciana",1],["Neda",1],["Inglaterra",1],["Mondoñedo",1],["Resto Europa",1],["Finisterra",1],["Irlanda",1],["Valladolid",1]],"startingRegions":[["France",3426],["Lugo",2330],["León",2248],["Navarra",2061],["Portugal",439],["Burgos",362],["Pontevedra",250],["Sevilla",242],["Holland",237],["Gipuzkoa",194],["Asturias",150],["La Rioja",124],["Huesca",96],["Germany",92],["A Coruña",74],["Badajoz",72],["Cantabria",70],["Belgium",63],["Ourense",48],["Vizcaya",41],["Switzerland",40],["Zamora",38],["Porgugal",37],["Palencia",35],["Salamanca",35],["Madrid",33],["Barcelona",19],["Austria",16],["Valencia",12],["Zaragoza",11],["Cáceres",10],["Italy",8],["City&nbsp;Was Blank",7],["Granada",6],["Málaga",4],["Albacete",4],["UK",3],["Córdoba",2],["Czech Republic",2],["Hungary",1],["Poland",1],["Europe Other",1],["Ireland",1],["Valladolid",1]],"caminos":[["Frances-Camino de",11085],["Portugues-Camino",689],["Via de la Plata",520],["Norte-Camino de",458],["Primitivo-Camino",98],["Ingles-Camino",73],["Otros caminos",15],["Otros caminos",7],["Muxia-Finisterre",1]]},"7":{"year":"2006","month":"7","pilgrims":18560,"gender":[["Hombre",10420],["Mujer",8140]],"transport":[["Pie",15589],["Bicicleta",2908],["Caballo",63]],"age":[["30 - 60",8889],["< 30",8540],["> 60",1131]],"motivation":[["Religioso y otros",9207],["Religioso",7661],["No religioso",1692]],"spanishFrom":[["Madrid",2112],["Andalucía",1995],["Comunidad Valenciana",1362],["Cataluña",1315],["Castilla León",975],["Pais Vasco",910],["Extremadura",671],["Castilla la Mancha",538],["Galicia",489],["Aragón",342],["Murcia",275],["Navarra",243],["Asturias",214],["Canarias",204],["Baleares",179],["Cantabria",81],["La Rioja",63],["Otra",41],["Ceuta",17],["Melilla",11]],"byCountry":[["España",12037],["Italia",1274],["Francia",1015],["Alemania",823],["Portugal",450],["Estados Unidos",434],["Belgica",246],["Dinamarca",210],["Holanda",210],["Reino Unido",155],["Canadá",150],["Austria",149],["Hungría",119],["Irlanda",117],["Brasil",114],["Polonia",95],["Suiza",91],["Suecia",91],["Australia",75],["México",72],["Noruega",69],["Eslovaquia",60],["República Checa",59],["Finlandia",56],["Argentina",55],["Japón",41],["Sudáfrica",25],["Colombia",25],["Eslovenia",23],["Uruguay",17],["Corea",15],["Chile",15],["Rusia",14],["Nueva Zelanda",12],["Andorra",11],["Marruecos",11],["Rumania",10],["España",9],["Ecuador",8],["Puerto Rico",6],["Islandia",6],["Estonia",5],["Lituania",5],["Cuba",5],["Bolivia",4],["Perú",4],["Venezuela",4],["Israel",3],["India",3],["Taiwán",2],["Liberia",2],["Panamá",2],["Singapur",2],["Filipinas",2],["China",2],["Yugoslavia",2],["Ucrania",2],["Haití",2],["Bulgaria",2],["Indonesia",2],["Kenya",2],["Turquía",2],["Paraguay",2],["Croacia",1],["Camerún",1],["Luxemburgo",1],["Egipto",1],["Guatemala",1],["Líbano",1],["Grecia",1],["Belice",1],["Malta",1],["Sierra Leona",1],["Mónaco",1],["Namibia",1],["Pakistán",1],["Malasia",1],["Senegal",1],["Albania",1],["Serbia",1],["Congo",1],["Costa Rica",1]],"professions":[["Estudiantes",6720],["Profesores",2408],["Empleados",2197],["Tecnicos",1772],["Liberales",1656],["Jubilados",1113],["Funcionarios",809],["Obreros",734],["Amas de Casa",450],["Parados",198],["Sacerdotes",167],["Directivos",120],["Artistas",118],["Agricultores",42],["Religiosas",21],["Deportistas",18],["Marinos",17]],"startingCities":[["Sarria",3036],["Roncesvalles",1561],["S. Jean P. Port",1363],["Cebreiro",1325],["León",1279],["Ponferrada",1157],["Astorga",1017],["Vilafranca",507],["Tui",493],["Burgos",437],["Pamplona",427],["Valença do Minho",328],["Le Puy",323],["Ourense",303],["Triacastela",303],["Vilalba",282],["Francia",246],["Resto Portugal",227],["Rabanal del Camino",193],["Ribadeo",167],["Oviedo - C.P.",154],["Ferrol",148],["Mondoñedo",148],["Irún",138],["Resto C. León",136],["Holanda",132],["Oviedo",131],["Samos",129],["Oporto",126],["Resto Asturias",119],["Somport",117],["Logroño",115],["Alemania",99],["Santander",97],["Zamora",80],["Sevilla",75],["Bélgica",71],["Ponte de Lima",67],["Neda",60],["Vega de Valcarce",60],["Sahagún",58],["Avilés",56],["Resto País Vasco",56],["Rábade",54],["Lourdes",49],["Jaca",48],["Sto. Domingo de la Calzada",46],["Cadavo",45],["Salamanca",44],["Bilbao",43],["Lugo - C.P.",43],["Mérida",43],["Frómista",42],["Gudiña",41],["Hospital de Orbigo",36],["Vezelay",34],["Madrid - C.F.",34],["Lourenzá",32],["Suiza",28],["Puebla de Sanabria",28],["R.Pais Vasco",25],["Muxia",25],["",24],["Carrión de los Condes",21],["Puente la Reina",21],["Gijón",20],["Fonsagrada - C.P.",20],["Canfranc",18],["Resto Cantabria",18],["Verín",16],["Estella",15],["Arles",15],["Benavente",15],["Zaragoza",14],["Vincios",13],["Tineo - C.P.",13],["Resto Asturias - C.P.",11],["Braga",11],["París",11],["Cáceres",11],["Francia",11],["Resto Andalucia",10],["Tineo",10],["Austria",10],["Barcelona",10],["Hendaya",9],["Com. Valenciana",9],["Vigo",9],["Malaga",8],["Resto C. León - V.P.",8],["Cataluña",8],["Castrojeriz",6],["Xunqueira de Ambia",5],["Grandas de Salime",5],["Finisterra",5],["Porriño",5],["Roma",5],["Resto de Extremadura",5],["Lisboa",5],["Nájera",4],["Córdoba",4],["Fonsagrada",4],["Com. Valenciana",4],["Granja de Moreruela",3],["Grandas de Salime - C.P.",3],["Huelva",3],["Reino Unido",2],["Madrid",2],["Salas",2],["Valencia",2],["Resto Europa",2],["Viveiro",2],["Granada",2],["Grado",1],["Andorra",1],["Dinamarca",1],["Murcia",1],["Valladolid",1]],"startingRegions":[["Lugo",5536],["León",4451],["France",2178],["Navarra",2024],["Portugal",764],["Asturias",525],["Pontevedra",520],["Burgos",443],["Ourense",365],["A Coruña",238],["Gipuzkoa",219],["La Rioja",165],["Holland",132],["Zamora",126],["Cantabria",115],["Germany",99],["Sevilla",85],["Belgium",71],["Huesca",66],["Palencia",63],["Huelva",57],["Badajoz",48],["Salamanca",44],["Vizcaya",43],["Madrid",36],["Switzerland",28],["City&nbsp;Was Blank",24],["Barcelona",18],["Valencia",15],["Zaragoza",14],["Cáceres",11],["Austria",10],["Málaga",8],["Italy",5],["Córdoba",4],["Granada",2],["Europe Other",2],["UK",2],["Andorra",1],["Denmark",1],["Murcia",1],["Valladolid",1]],"caminos":[["Frances-Camino de",14601],["Norte-Camino de",1402],["Portugues-Camino",1284],["Via de la Plata",707],["Primitivo-Camino",292],["Ingles-Camino",208],["Muxia-Finisterre",30],["Otros caminos",24],["Otros caminos",12]]},"8":{"year":"2006","month":"8","pilgrims":25968,"gender":[["Hombre",15230],["Mujer",10738]],"transport":[["Pie",20682],["Bicicleta",5233],["Caballo",50],["Silla de ruedas",3]],"age":[["30 - 60",14370],["< 30",10717],["> 60",881]],"motivation":[["Religioso y otros",12098],["Religioso",11413],["No religioso",2457]],"spanishFrom":[["Cataluña",2852],["Madrid",2396],["Comunidad Valenciana",2356],["Andalucía",2035],["Pais Vasco",1498],["Castilla León",853],["Castilla la Mancha",670],["Galicia",658],["Murcia",563],["Extremadura",395],["Aragón",317],["Navarra",227],["Canarias",183],["Asturias",182],["Baleares",167],["La Rioja",118],["Cantabria",91],["Otra",40],["Melilla",19],["Ceuta",4]],"byCountry":[["España",15624],["Italia",5022],["Alemania",1070],["Francia",1014],["Portugal",604],["Holanda",216],["Belgica",212],["Hungría",207],["Austria",206],["Reino Unido",199],["Polonia",191],["Estados Unidos",164],["República Checa",132],["Brasil",112],["Irlanda",99],["Canadá",99],["Dinamarca",86],["Eslovaquia",83],["Suiza",79],["Argentina",61],["México",48],["Suecia",48],["Eslovenia",32],["Australia",31],["Japón",30],["Venezuela",24],["Noruega",19],["Rumania",17],["Perú",14],["Finlandia",12],["Sudáfrica",11],["Ecuador",11],["Chile",11],["Uruguay",10],["Colombia",10],["Luxemburgo",10],["Nueva Zelanda",10],["Israel",9],["Andorra",9],["España",8],["Corea",7],["Cuba",6],["Grecia",6],["Estonia",6],["Marruecos",6],["Taiwán",6],["Nicaragua",5],["Filipinas",5],["Puerto Rico",4],["San Marino",4],["Islandia",4],["Ucrania",4],["Croacia",4],["Bulgaria",3],["Bolivia",3],["Rep. Dominicana",3],["El Salvador",2],["Malta",2],["India",2],["Albania",2],["China",2],["Bielorrusia",2],["Rusia",2],["Turquía",2],["Líbano",1],["Letonia",1],["Guatemala",1],["Antillas Holandesas",1],["Panamá",1],["Gabón",1],["Siria",1],["Serbia",1],["Paraguay",1],["Costa Rica",1],["Zimbabwe",1],["Argelia",1],["Irán",1],["Camerún",1],["Macedonia",1],["Mongolia",1],["Lituania",1]],"professions":[["Estudiantes",6180],["Empleados",4551],["Liberales",3817],["Tecnicos",3192],["Profesores",3057],["Obreros",1781],["Funcionarios",916],["Jubilados",795],["Amas de Casa",595],["Parados",272],["Sacerdotes",253],["Artistas",217],["Directivos",186],["Agricultores",62],["Religiosas",54],["Deportistas",20],["Marinos",19],["Oikoten",1]],"startingCities":[["Sarria",4682],["Roncesvalles",2701],["S. Jean P. Port",2116],["León",1985],["Cebreiro",1965],["Ponferrada",1864],["Astorga",1070],["Burgos",722],["Pamplona",721],["Vilafranca",648],["Tui",603],["Oviedo - C.P.",368],["Triacastela",306],["Valença do Minho",287],["Irún",274],["Resto C. León",265],["Ourense",259],["Le Puy",256],["Resto Asturias",247],["Samos",234],["Francia",215],["Ribadeo",215],["Ferrol",213],["Logroño",208],["Oporto",193],["Lugo - C.P.",166],["Alemania",146],["Somport",145],["Ponte de Lima",141],["Resto Portugal",140],["Resto País Vasco",135],["Santander",118],["Bilbao",103],["Vilalba",100],["Holanda",98],["Avilés",82],["Sevilla",76],["Fonsagrada - C.P.",68],["Sahagún",67],["Vega de Valcarce",65],["Bélgica",64],["R.Pais Vasco",64],["Mérida",61],["Carrión de los Condes",60],["Gijón",59],["Sto. Domingo de la Calzada",54],["Oviedo",54],["Puente la Reina",48],["Verín",47],["Lourenzá",46],["Resto Cantabria",44],["Rabanal del Camino",44],["Salamanca",42],["Madrid - C.F.",42],["Jaca",40],["Zamora",37],["Hospital de Orbigo",37],["",37],["Lourdes",36],["Puebla de Sanabria",36],["Suiza",35],["Frómista",35],["Hendaya",34],["Gudiña",31],["Grandas de Salime",30],["Cataluña",28],["Mondoñedo",28],["Neda",28],["Italia",26],["Braga",25],["Barcelona",24],["Resto Asturias - C.P.",20],["Canfranc",19],["Vezelay",19],["Estella",19],["Castrojeriz",18],["Laza",18],["Nájera",18],["Arles",16],["Resto C. León - V.P.",16],["Lisboa",15],["Xunqueira de Ambia",15],["Grandas de Salime - C.P.",15],["Zaragoza",15],["Cáceres",14],["Tineo",13],["Tineo - C.P.",12],["Resto Europa",12],["Cadavo",11],["Porriño",11],["Fonsagrada",10],["Resto de Extremadura",9],["Valencia",8],["Com. Valenciana",7],["Muxia",7],["Austria",7],["La Mesa",7],["Salas",6],["Murcia",6],["Com. Valenciana",5],["Madrid",5],["Cataluña",4],["Reino Unido",4],["Castilla la Mancha",4],["Resto Andalucia",3],["París",3],["Córdoba",3],["Huelva",2],["Irlanda",2],["Valladolid",2],["Grado",2],["Francia",2],["Chaves-Portugal",2],["Malaga",2],["Badajoz",2],["Inglaterra",2],["Roma",1],["Vigo",1],["Ortigueira",1],["Cast. la Mancha",1],["Finisterra",1],["Vegadeo",1],["Polonia",1],["Fonfría",1],["Castilla La Mancha",1],["Republica Checa",1],["Andorra",1],["Benavente",1],["Granada",1]],"startingRegions":[["Lugo",7832],["León",6061],["Navarra",3489],["France",2842],["Asturias",916],["Portugal",801],["Burgos",740],["Pontevedra",615],["Gipuzkoa",473],["Ourense",370],["La Rioja",280],["A Coruña",250],["Cantabria",162],["Germany",146],["Vizcaya",103],["Holland",98],["Palencia",95],["Sevilla",79],["Zamora",74],["Badajoz",72],["Belgium",64],["Huesca",59],["Barcelona",56],["Madrid",47],["Salamanca",42],["City&nbsp;Was Blank",37],["Switzerland",35],["Italy",27],["Valencia",20],["Zaragoza",15],["Cáceres",14],["Europe Other",12],["Austria",7],["Murcia",6],["Albacete",6],["UK",6],["Córdoba",3],["Huelva",2],["Ireland",2],["Valladolid",2],["Porgugal",2],["Málaga",2],["Poland",1],["Czech Republic",1],["Andorra",1],["Granada",1]],"caminos":[["Frances-Camino de",21280],["Norte-Camino de",1596],["Portugues-Camino",1416],["Via de la Plata",685],["Primitivo-Camino",675],["Ingles-Camino",242],["Otros caminos",37],["Otros caminos",29],["Muxia-Finisterre",8]]},"9":{"year":"2006","month":"9","pilgrims":13451,"gender":[["Hombre",7807],["Mujer",5644]],"transport":[["Pie",10668],["Bicicleta",2749],["Caballo",33],["Silla de ruedas",1]],"age":[["30 - 60",7550],["< 30",3737],["> 60",2164]],"motivation":[["Religioso y otros",6853],["Religioso",5376],["No religioso",1222]],"spanishFrom":[["Madrid",1092],["Cataluña",862],["Andalucía",796],["Comunidad Valenciana",682],["Castilla León",535],["Galicia",509],["Pais Vasco",454],["Castilla la Mancha",219],["Aragón",191],["Navarra",166],["Murcia",163],["Asturias",161],["Canarias",147],["Extremadura",122],["Baleares",110],["Cantabria",64],["La Rioja",48],["Otra",26],["Ceuta",11],["Melilla",5]],"byCountry":[["España",6363],["Alemania",1616],["Francia",1046],["Italia",1013],["Portugal",469],["Belgica",271],["Reino Unido",254],["Estados Unidos",236],["Holanda",217],["Austria",202],["Canadá",201],["Brasil",177],["Irlanda",154],["Dinamarca",149],["Suiza",143],["Polonia",136],["Australia",88],["México",84],["Hungría",78],["Noruega",69],["Argentina",51],["Finlandia",39],["República Checa",38],["Venezuela",38],["Sudáfrica",37],["Suecia",37],["Japón",33],["Eslovaquia",21],["Colombia",19],["Nueva Zelanda",17],["Eslovenia",14],["Uruguay",14],["Estonia",13],["Israel",12],["Filipinas",11],["Chile",11],["Croacia",8],["Ecuador",7],["Perú",7],["Lituania",7],["Andorra",6],["Taiwán",4],["Bolivia",4],["España",3],["Rumania",3],["Bulgaria",2],["India",2],["Rusia",2],["Grecia",2],["Namibia",2],["Irán",1],["Egipto",1],["Luxemburgo",1],["Guinea Ecuatorial",1],["Malta",1],["Ucrania",1],["Marruecos",1],["Guatemala",1],["Puerto Rico",1],["Corea",1],["San Marino",1],["Nigeria",1],["Cuba",1],["Panamá",1],["Serbia",1],["Malasia",1],["China",1],["Nicaragua",1],["Rep. Dominicana",1],["Turkmenistán",1],["El Salvador",1]],"professions":[["Empleados",2363],["Estudiantes",2186],["Jubilados",2040],["Liberales",1935],["Tecnicos",1833],["Obreros",703],["Funcionarios",703],["Profesores",599],["Amas de Casa",411],["Parados",228],["Directivos",136],["Artistas",122],["Sacerdotes",90],["Agricultores",59],["Marinos",16],["Religiosas",15],["Deportistas",12]],"startingCities":[["Sarria",2022],["S. Jean P. Port",1560],["Roncesvalles",1208],["León",1042],["Ponferrada",825],["Cebreiro",821],["Astorga",631],["Pamplona",540],["Burgos",520],["Le Puy",464],["Vilafranca",266],["Francia",263],["Tui",241],["Valença do Minho",159],["Irún",127],["Resto Portugal",125],["Oviedo - C.P.",124],["Somport",121],["Samos",103],["Oporto",103],["Alemania",100],["Holanda",92],["Sevilla",87],["Triacastela",87],["Logroño",85],["Oviedo",74],["Resto Asturias",74],["Resto C. León",74],["Santander",72],["Ourense",65],["Bilbao",65],["Ribadeo",63],["Vilalba",55],["Lugo - C.P.",51],["Lourdes",48],["Sto. Domingo de la Calzada",48],["Suiza",47],["Resto País Vasco",45],["Bélgica",44],["Sahagún",44],["Resto Cantabria",44],["Jaca",42],["Mérida",40],["Ferrol",40],["Madrid - C.F.",39],["Rabanal del Camino",36],["Zamora",33],["Hospital de Orbigo",31],["Frómista",28],["Gijón",28],["Braga",27],["Avilés",27],["Salamanca",25],["Vezelay",24],["Muxia",23],["Carrión de los Condes",22],["Puente la Reina",22],["Ponte de Lima",20],["Fonsagrada - C.P.",16],["Arles",14],["R.Pais Vasco",12],["Austria",12],["Resto Asturias - C.P.",12],["Estella",11],["Hendaya",11],["Chaves-Portugal",11],["Vega de Valcarce",10],["Cáceres",10],["Tineo - C.P.",9],["París",9],["Canfranc",9],["Barcelona",9],["Nájera",9],["Cataluña",9],["Tineo",8],["Verín",7],["Resto Europa",7],["Pontedeume",7],["Zaragoza",7],["Gudiña",6],["Vigo",6],["Puebla de Sanabria",6],["Reino Unido",6],["Francia",6],["Cadavo",5],["Neda",5],["Grandas de Salime",5],["Lourenzá",5],["Italia",4],["Lisboa",3],["Fonsagrada",3],["Mondoñedo",3],["Malaga",2],["Madrid",2],["Cast. la Mancha",2],["Vegadeo",2],["Polonia",2],["Valencia",2],["Murcia",2],["",2],["Resto C. León - V.P.",2],["Resto de Extremadura",2],["Borres",2],["Castilla La Mancha",2],["Finlandia",2],["Grado",2],["Porriño",1],["Valladolid",1],["Irlanda",1],["Huelva",1],["Republica Checa",1],["Resto Andalucia",1],["Com. Valenciana",1],["Roma",1],["La Bañeza",1],["Córdoba",1],["Valcarlos",1],["Castilla la Mancha",1],["Granada",1],["Castrojeriz",1],["Finisterra",1]],"startingRegions":[["Lugo",3234],["León",2962],["France",2520],["Navarra",1782],["Burgos",521],["Portugal",437],["Asturias",367],["Pontevedra",248],["Gipuzkoa",184],["La Rioja",142],["Cantabria",116],["Germany",100],["Holland",92],["Sevilla",88],["Ourense",78],["A Coruña",76],["Vizcaya",65],["Huesca",51],["Palencia",50],["Switzerland",47],["Belgium",44],["Badajoz",42],["Madrid",41],["Zamora",39],["Salamanca",25],["Barcelona",18],["Austria",12],["Porgugal",11],["Cáceres",10],["Zaragoza",7],["Europe Other",7],["UK",6],["Italy",5],["Albacete",5],["Valencia",3],["Málaga",2],["Murcia",2],["City&nbsp;Was Blank",2],["Finland",2],["Poland",2],["Granada",1],["Ireland",1],["Huelva",1],["Czech Republic",1],["Córdoba",1],["Valladolid",1]],"caminos":[["Frances-Camino de",11439],["Norte-Camino de",717],["Portugues-Camino",685],["Via de la Plata",306],["Primitivo-Camino",221],["Ingles-Camino",52],["Muxia-Finisterre",24],["Otros caminos",5],["Otros caminos",2]]},"10":{"year":"2006","month":"10","pilgrims":7661,"gender":[["Hombre",4578],["Mujer",3083]],"transport":[["Pie",6643],["Bicicleta",990],["Caballo",26],["Silla de ruedas",2]],"age":[["30 - 60",4647],["< 30",1573],["> 60",1441]],"motivation":[["Religioso y otros",4158],["Religioso",2873],["No religioso",630]],"spanishFrom":[["Madrid",548],["Cataluña",406],["Galicia",385],["Comunidad Valenciana",332],["Andalucía",284],["Pais Vasco",249],["Castilla León",167],["Castilla la Mancha",87],["Canarias",64],["Aragón",57],["Baleares",51],["Asturias",48],["Murcia",46],["Navarra",41],["Extremadura",38],["Otra",22],["La Rioja",20],["Cantabria",14],["Ceuta",1],["Melilla",1]],"byCountry":[["España",2861],["Alemania",953],["Francia",758],["Canadá",369],["Italia",344],["Estados Unidos",261],["Portugal",242],["Belgica",193],["Brasil",168],["Reino Unido",155],["Australia",147],["Austria",140],["Suiza",127],["Holanda",107],["Irlanda",89],["Noruega",70],["Dinamarca",69],["Argentina",57],["México",56],["Japón",48],["Suecia",47],["Hungría",41],["Finlandia",40],["Sudáfrica",39],["Polonia",39],["Nueva Zelanda",22],["República Checa",20],["Uruguay",19],["Eslovaquia",16],["Estonia",16],["Corea",14],["Venezuela",14],["Chile",12],["Colombia",11],["Israel",11],["Andorra",10],["Letonia",7],["Rusia",6],["Perú",6],["Eslovenia",6],["España",5],["Puerto Rico",4],["Rumania",4],["Costa Rica",4],["Grecia",3],["Ecuador",3],["Cuba",3],["Luxemburgo",2],["Nicaragua",2],["Bulgaria",2],["Turquía",2],["Lituania",2],["Filipinas",2],["Nigeria",1],["Honduras",1],["Marruecos",1],["Irán",1],["Paraguay",1],["Malasia",1],["Bolivia",1],["Croacia",1],["Guinea",1],["Antillas Holandesas",1],["India",1],["Urbekistán",1]],"professions":[["Jubilados",1479],["Empleados",1358],["Liberales",1134],["Tecnicos",959],["Estudiantes",835],["Obreros",388],["Funcionarios",354],["Profesores",346],["Amas de Casa",253],["Parados",222],["Directivos",120],["Artistas",112],["Sacerdotes",47],["Agricultores",25],["Religiosas",19],["Marinos",8],["Deportistas",2]],"startingCities":[["S. Jean P. Port",1393],["Sarria",1075],["Roncesvalles",752],["León",463],["Le Puy",393],["Cebreiro",356],["Ponferrada",337],["Pamplona",327],["Astorga",249],["Francia",217],["Burgos",196],["Oporto",161],["Vilafranca",121],["Sevilla",106],["Somport",92],["Irún",77],["Valença do Minho",74],["Resto Portugal",65],["Ourense",61],["Tui",56],["Oviedo - C.P.",55],["Logroño",49],["Alemania",49],["Ribadeo",39],["Ferrol",38],["Resto C. León",37],["Ponte de Lima",34],["Holanda",31],["Rabanal del Camino",30],["Bilbao",29],["Jaca",29],["Suiza",25],["Santander",25],["Triacastela",24],["Arles",22],["Fonsagrada - C.P.",21],["Resto Asturias",20],["Mérida",20],["Lourdes",20],["Sahagún",19],["Salamanca",19],["Bélgica",18],["Braga",18],["Mondoñedo",18],["Lourenzá",17],["Oviedo",17],["Neda",17],["Puente la Reina",16],["Vega de Valcarce",15],["Samos",15],["Sto. Domingo de la Calzada",15],["Lugo - C.P.",15],["Cataluña",15],["Vezelay",14],["R.Pais Vasco",12],["Canfranc",12],["Francia",12],["Vilalba",11],["Madrid - C.F.",11],["Hospital de Orbigo",11],["Zamora",11],["Carrión de los Condes",10],["Estella",10],["Austria",10],["Resto País Vasco",9],["Frómista",8],["Huelva",7],["Gudiña",7],["Avilés",6],["París",6],["Laza",6],["Hendaya",5],["",5],["Resto Asturias - C.P.",5],["Barcelona",4],["Muxia",4],["Lisboa",4],["Castrojeriz",4],["Gijón",4],["Resto Cantabria",4],["Puebla de Sanabria",4],["Com. Valenciana",3],["Cadavo",3],["Dinamarca",3],["Chaves-Portugal",3],["Nájera",3],["Inglaterra",2],["Com. Valenciana",2],["Cáceres",2],["Resto C. León - V.P.",2],["Resto Europa",2],["Irlanda",2],["Fonsagrada",2],["Valencia",2],["Tineo - C.P.",2],["Zaragoza",1],["Madrid",1],["Cataluña",1],["A Guarda",1],["Cast. la Mancha",1],["Córdoba",1],["Resto de Extremadura",1],["Tineo",1],["Benavente",1],["Paradela",1]],"startingRegions":[["France",2174],["Lugo",1597],["León",1284],["Navarra",1105],["Portugal",356],["Burgos",200],["Asturias",110],["Sevilla",106],["Gipuzkoa",98],["Ourense",74],["La Rioja",67],["A Coruña",59],["Pontevedra",57],["Germany",49],["Huesca",41],["Holland",31],["Vizcaya",29],["Cantabria",29],["Switzerland",25],["Badajoz",21],["Barcelona",20],["Salamanca",19],["Palencia",18],["Belgium",18],["Zamora",16],["Madrid",12],["Austria",10],["Huelva",7],["Valencia",7],["City&nbsp;Was Blank",5],["Denmark",3],["Porgugal",3],["UK",2],["Cáceres",2],["Europe Other",2],["Ireland",2],["Zaragoza",1],["Albacete",1],["Córdoba",1]],"caminos":[["Frances-Camino de",6530],["Portugues-Camino",413],["Norte-Camino de",296],["Via de la Plata",252],["Primitivo-Camino",101],["Ingles-Camino",55],["Otros caminos",5],["Otros caminos",5],["Muxia-Finisterre",4]]},"11":{"year":"2006","month":"11","pilgrims":1755,"gender":[["Hombre",1167],["Mujer",588]],"transport":[["Pie",1574],["Bicicleta",168],["Caballo",12],["Silla de ruedas",1]],"age":[["30 - 60",1090],["< 30",452],["> 60",213]],"motivation":[["Religioso y otros",1031],["Religioso",576],["No religioso",148]],"spanishFrom":[["Galicia",153],["Cataluña",120],["Madrid",112],["Asturias",81],["Baleares",80],["Andalucía",61],["Comunidad Valenciana",50],["Pais Vasco",40],["Castilla León",38],["Castilla la Mancha",26],["Canarias",20],["Aragón",18],["Murcia",15],["Navarra",12],["Cantabria",7],["Otra",6],["La Rioja",5],["Extremadura",3],["Melilla",2]],"byCountry":[["España",849],["Francia",153],["Alemania",144],["Italia",91],["Canadá",60],["Brasil",58],["Australia",55],["Estados Unidos",50],["Suiza",28],["Portugal",24],["Holanda",22],["Austria",20],["Belgica",19],["Reino Unido",18],["Argentina",16],["Japón",16],["México",15],["Irlanda",11],["Finlandia",10],["Noruega",10],["Sudáfrica",9],["Dinamarca",9],["Andorra",8],["Nueva Zelanda",7],["República Checa",7],["Hungría",6],["Suecia",6],["Polonia",5],["Colombia",4],["Venezuela",4],["Eslovenia",4],["Corea",3],["Ecuador",2],["Perú",1],["Rusia",1],["Rep. Dominicana",1],["Uruguay",1],["Taiwán",1],["Cuba",1],["Panamá",1],["India",1],["Turquía",1],["Chile",1],["Bolivia",1],["Israel",1]],"professions":[["Empleados",325],["Liberales",278],["Jubilados",221],["Tecnicos",200],["Estudiantes",178],["Obreros",171],["Parados",81],["Profesores",80],["Funcionarios",73],["Amas de Casa",63],["Artistas",35],["Directivos",25],["Sacerdotes",9],["Agricultores",8],["Marinos",5],["Deportistas",3]],"startingCities":[["S. Jean P. Port",284],["Sarria",177],["Roncesvalles",171],["Le Puy",105],["Cebreiro",103],["Ponferrada",88],["León",73],["Pamplona",72],["Ribadeo",55],["Somport",53],["Francia",51],["Astorga",44],["Burgos",38],["Sevilla",37],["Vilafranca",34],["Ferrol",25],["Tui",21],["Alemania",21],["Suiza",19],["Oviedo - C.P.",16],["Resto Portugal",15],["Irún",14],["Triacastela",12],["Ourense",11],["Oporto",11],["Lugo - C.P.",11],["Valença do Minho",10],["Arles",9],["Vezelay",8],["Holanda",8],["Logroño",8],["Estella",7],["Jaca",7],["Bélgica",7],["Lourdes",6],["Mérida",6],["Bilbao",6],["Salamanca",6],["Resto Asturias - C.P.",5],["Neda",5],["Nájera",5],["Resto País Vasco",5],["Vega de Valcarce",5],["Vilalba",5],["Resto Asturias",4],["Resto Andalucia",4],["Austria",4],["Sahagún",4],["Cataluña",3],["Gudiña",3],["Hospital de Orbigo",3],["R.Pais Vasco",3],["Francia",3],["Santander",2],["Porriño",2],["Puente la Reina",2],["Samos",2],["Fonsagrada - C.P.",2],["Canfranc",2],["Avilés",2],["Granada",2],["Valcarlos",2],["Resto Cantabria",2],["",2],["Zamora",2],["Oviedo",2],["Com. Valenciana",2],["Braga",2],["París",2],["Resto C. León",1],["Carrión de los Condes",1],["Chaves-Portugal",1],["Italia",1],["Polonia",1],["Cast. la Mancha",1],["Lisboa",1],["Madrid - C.F.",1],["Resto Europa",1],["Hendaya",1],["Finlandia",1],["Frómista",1],["Rabanal del Camino",1]],"startingRegions":[["France",522],["Lugo",367],["Navarra",254],["León",253],["Sevilla",41],["Portugal",39],["Burgos",38],["A Coruña",30],["Asturias",29],["Pontevedra",23],["Gipuzkoa",22],["Germany",21],["Switzerland",19],["Ourense",14],["La Rioja",13],["Huesca",9],["Holland",8],["Belgium",7],["Badajoz",6],["Vizcaya",6],["Salamanca",6],["Austria",4],["Cantabria",4],["Barcelona",3],["Granada",2],["City&nbsp;Was Blank",2],["Zamora",2],["Valencia",2],["Palencia",2],["Porgugal",1],["Italy",1],["Poland",1],["Albacete",1],["Madrid",1],["Europe Other",1],["Finland",1]],"caminos":[["Frances-Camino de",1454],["Norte-Camino de",101],["Via de la Plata",72],["Portugues-Camino",62],["Primitivo-Camino",34],["Ingles-Camino",30],["Otros caminos",2]]},"12":{"year":"2006","month":"12","pilgrims":848,"gender":[["Hombre",605],["Mujer",243]],"transport":[["Pie",782],["Bicicleta",65],["Caballo",1]],"age":[["30 - 60",573],["< 30",223],["> 60",52]],"motivation":[["Religioso y otros",467],["Religioso",332],["No religioso",49]],"spanishFrom":[["Galicia",108],["Madrid",86],["Pais Vasco",50],["Castilla León",48],["Cataluña",45],["Asturias",39],["Andalucía",39],["Comunidad Valenciana",38],["Baleares",30],["Aragón",17],["Castilla la Mancha",13],["Navarra",9],["Canarias",5],["Murcia",5],["La Rioja",4],["Cantabria",2],["Extremadura",1],["Otra",1]],"byCountry":[["España",540],["Francia",53],["Alemania",39],["Portugal",30],["Italia",21],["Estados Unidos",14],["Reino Unido",13],["Canadá",13],["México",10],["Argentina",10],["Brasil",10],["Noruega",9],["Japón",9],["Belgica",9],["Australia",7],["Suiza",6],["Irlanda",6],["Ecuador",6],["Holanda",5],["Austria",5],["Estonia",4],["Corea",4],["Uruguay",3],["Bolivia",2],["Polonia",2],["Venezuela",2],["Suecia",2],["Hungría",2],["Colombia",1],["Nicaragua",1],["Croacia",1],["India",1],["Israel",1],["Paraguay",1],["Nueva Zelanda",1],["Puerto Rico",1],["Rumania",1],["Chile",1],["Perú",1],["República Checa",1]],"professions":[["Empleados",165],["Tecnicos",126],["Liberales",125],["Estudiantes",109],["Obreros",86],["Profesores",51],["Funcionarios",49],["Jubilados",37],["Parados",33],["Amas de Casa",24],["Artistas",15],["Directivos",15],["Marinos",7],["Sacerdotes",3],["Agricultores",3]],"startingCities":[["Sarria",138],["Roncesvalles",123],["Cebreiro",83],["S. Jean P. Port",72],["Tui",59],["Ponferrada",44],["León",31],["Astorga",26],["Le Puy",22],["Vilafranca",22],["Ferrol",17],["Burgos",15],["Francia",14],["Oporto",13],["Sevilla",11],["Oviedo - C.P.",11],["Pamplona",10],["Gudiña",9],["Alemania",9],["Valença do Minho",9],["Somport",8],["Resto Portugal",8],["Lugo - C.P.",8],["Puente la Reina",7],["Arles",6],["Logroño",5],["Cadavo",5],["Austria",4],["Resto Asturias",4],["Mondoñedo",4],["Ourense",4],["Sto. Domingo de la Calzada",4],["Bélgica",4],["Suiza",4],["Triacastela",3],["Vezelay",3],["Lourdes",3],["Frómista",3],["Jaca",3],["Resto C. León",3],["Irún",2],["Zaragoza",2],["Valencia",2],["Vega de Valcarce",2],["Estella",1],["Resto Cantabria",1],["Cataluña",1],["Madrid",1],["Sahagún",1],["Salamanca",1],["Canfranc",1],["Ponte de Lima",1],["Resto Europa",1]],"startingRegions":[["Lugo",241],["Navarra",141],["León",129],["France",128],["Pontevedra",59],["Portugal",31],["A Coruña",17],["Burgos",15],["Asturias",15],["Ourense",13],["Sevilla",11],["Germany",9],["La Rioja",9],["Austria",4],["Switzerland",4],["Belgium",4],["Huesca",4],["Palencia",3],["Gipuzkoa",2],["Zaragoza",2],["Valencia",2],["Cantabria",1],["Barcelona",1],["Madrid",1],["Salamanca",1],["Europe Other",1]],"caminos":[["Frances-Camino de",678],["Portugues-Camino",90],["Via de la Plata",26],["Primitivo-Camino",24],["Ingles-Camino",17],["Norte-Camino de",11],["Otros caminos",2]]},"all":{"year":"2006","month":"","pilgrims":100377,"gender":[["Hombre",59416],["Mujer",40961]],"transport":[["Pie",81783],["Bicicleta",18289],["Caballo",294],["Silla de ruedas",11]],"age":[["30 - 60",55791],["< 30",32706],["> 60",11880]],"motivation":[["Religioso y otros",49726],["Religioso",41793],["No religioso",8858]],"spanishFrom":[["Madrid",8849],["Cataluña",7518],["Andalucía",7010],["Comunidad Valenciana",6195],["Pais Vasco",4271],["Galicia",3776],["Castilla León",3555],["Castilla la Mancha",1972],["Extremadura",1652],["Aragón",1267],["Murcia",1260],["Asturias",1073],["Canarias",972],["Baleares",949],["Navarra",883],["Cantabria",380],["La Rioja",333],["Otra",198],["Ceuta",54],["Melilla",44]],"byCountry":[["España",52248],["Italia",10013],["Alemania",8097],["Francia",6791],["Portugal",3365],["Estados Unidos",1909],["Holanda",1633],["Canadá",1546],["Reino Unido",1541],["Belgica",1443],["Austria",1422],["Brasil",1172],["Irlanda",849],["Dinamarca",801],["Suiza",780],["Australia",730],["Hungría",609],["Polonia",600],["México",484],["Suecia",411],["Finlandia",408],["República Checa",399],["Noruega",373],["Argentina",347],["Japón",282],["Sudáfrica",222],["Eslovaquia",198],["Venezuela",177],["Eslovenia",140],["Nueva Zelanda",138],["Colombia",131],["Uruguay",89],["Chile",84],["Estonia",84],["Andorra",80],["Corea",66],["Ecuador",60],["Perú",46],["Rumania",45],["Israel",42],["Puerto Rico",37],["Rusia",30],["Letonia",26],["Cuba",25],["Luxemburgo",24],["Filipinas",24],["Islandia",22],["Grecia",20],["Marruecos",20],["Lituania",18],["Croacia",18],["Costa Rica",18],["Bolivia",16],["Taiwán",15],["Nicaragua",14],["Bulgaria",13],["Rep. Dominicana",11],["India",10],["China",10],["Turquía",9],["Panamá",9],["Guatemala",8],["Singapur",8],["Ucrania",7],["Paraguay",7],["Serbia",7],["Malasia",6],["Albania",5],["San Marino",5],["Malta",4],["Namibia",3],["El Salvador",3],["Irán",3],["Honduras",2],["Haití",2],["Indonesia",2],["Kenya",2],["Egipto",2],["Líbano",2],["Belice",2],["Argelia",2],["Camerún",2],["Liberia",2],["Bielorrusia",2],["Antillas Holandesas",2],["Yugoslavia",2],["Nigeria",2],["Sierra Leona",1],["Mónaco",1],["Trinidad y Tobago",1],["Pakistán",1],["Senegal",1],["Congo",1],["Angola",1],["Islas Feroe",1],["Chipre",1],["Mauricio",1],["Gabón",1],["Siria",1],["Zimbabwe",1],["Laos",1],["Macedonia",1],["Mongolia",1],["Guinea Ecuatorial",1],["Cabo Verde",1],["Turkmenistán",1],["Guinea",1],["Urbekistán",1]],"professions":[["Estudiantes",20866],["Empleados",16351],["Liberales",13266],["Tecnicos",12054],["Jubilados",11888],["Profesores",8285],["Obreros",5178],["Funcionarios",4642],["Amas de Casa",2776],["Parados",1694],["Directivos",1029],["Artistas",920],["Sacerdotes",732],["Agricultores",343],["Religiosas",152],["Marinos",119],["Deportistas",79],["Oikoten",3]],"startingCities":[["Sarria",16215],["S. Jean P. Port",10875],["Roncesvalles",9301],["León",6907],["Cebreiro",6590],["Ponferrada",5848],["Astorga",4213],["Pamplona",3342],["Burgos",2823],["Le Puy",2738],["Tui",2282],["Vilafranca",2110],["Francia",1774],["Valença do Minho",1336],["Oporto",1125],["Triacastela",1035],["Sevilla",1015],["Resto Portugal",979],["Ourense",943],["Irún",875],["Somport",873],["Oviedo - C.P.",839],["Samos",756],["Holanda",726],["Logroño",699],["Ribadeo",678],["Ferrol",674],["Resto C. León",637],["Alemania",628],["Vilalba",558],["Resto Asturias",551],["Santander",416],["Ponte de Lima",410],["Rabanal del Camino",395],["Oviedo",386],["Lugo - C.P.",342],["Bilbao",331],["Bélgica",315],["Jaca",309],["Resto País Vasco",305],["Sahagún",293],["Mérida",289],["Sto. Domingo de la Calzada",244],["Suiza",232],["Avilés",232],["Salamanca",223],["Zamora",223],["Lourdes",212],["Mondoñedo",205],["Vega de Valcarce",203],["Madrid - C.F.",189],["Vezelay",181],["Frómista",179],["Fonsagrada - C.P.",168],["Puente la Reina",168],["Carrión de los Condes",166],["Hospital de Orbigo",161],["Arles",158],["Braga",148],["Gijón",142],["R.Pais Vasco",140],["Gudiña",139],["Resto Cantabria",139],["Neda",121],["",120],["Verín",114],["Lourenzá",108],["Puebla de Sanabria",108],["Canfranc",106],["Hendaya",104],["Muxia",102],["Cataluña",99],["Estella",78],["Austria",78],["Resto Asturias - C.P.",75],["Chaves-Portugal",73],["Lisboa",72],["Barcelona",70],["Cadavo",69],["Zaragoza",65],["Cáceres",62],["Resto C. León - V.P.",57],["Porriño",57],["Nájera",54],["Rábade",54],["Grandas de Salime",51],["París",49],["Italia",46],["Com. Valenciana",45],["Vigo",40],["Tineo - C.P.",40],["Valencia",38],["Resto Andalucia",36],["Fonsagrada",35],["Castrojeriz",33],["Tineo",33],["Xunqueira de Ambia",32],["Resto Europa",32],["Laza",30],["Grandas de Salime - C.P.",30],["Resto de Extremadura",28],["Malaga",21],["Córdoba",20],["Granada",20],["Madrid",19],["Benavente",17],["Reino Unido",17],["Castilla la Mancha",15],["Roma",14],["Vincios",14],["Huelva",13],["Finisterra",13],["Paradela",13],["Granja de Moreruela",12],["Badajoz",12],["Valladolid",10],["Irlanda",9],["Murcia",9],["Salas",8],["Pontedeume",8],["Inglaterra",7],["Cast. la Mancha",7],["La Mesa",7],["Polonia",5],["Dinamarca",5],["Luxemburgo",5],["Grado",5],["Borres",5],["Republica Checa",4],["Valcarlos",4],["La Bañeza",4],["Vegadeo",3],["Fonfría",3],["Finlandia",3],["A Guarda",3],["Castilla La Mancha",3],["Andorra",2],["San Juan de Ortega",2],["Viveiro",2],["Ortigueira",1],["Hungría",1]],"startingRegions":[["Lugo",26777],["León",20828],["France",16964],["Navarra",12893],["Portugal",4070],["Burgos",2858],["Asturias",2407],["Pontevedra",2396],["Gipuzkoa",1320],["Ourense",1258],["Sevilla",1051],["La Rioja",997],["A Coruña",919],["Holland",726],["Germany",628],["Cantabria",555],["Huesca",415],["Zamora",360],["Palencia",345],["Vizcaya",331],["Badajoz",329],["Belgium",315],["Switzerland",232],["Salamanca",223],["Madrid",208],["Barcelona",169],["City&nbsp;Was Blank",120],["Valencia",83],["Austria",78],["Porgugal",73],["Huelva",67],["Zaragoza",65],["Cáceres",62],["Italy",60],["Europe Other",32],["Albacete",25],["UK",24],["Málaga",21],["Granada",20],["Córdoba",20],["Valladolid",10],["Murcia",9],["Ireland",9],["Poland",5],["Denmark",5],["Luxembourg",5],["Czech Republic",4],["Finland",3],["Andorra",2],["Hungary",1]],"caminos":[["Frances-Camino de",82407],["Portugues-Camino",6466],["Norte-Camino de",5259],["Via de la Plata",3523],["Primitivo-Camino",1588],["Ingles-Camino",804],["Otros caminos",215],["Muxia-Finisterre",115]]}},"2007":{"1":{"year":"2007","month":"1","pilgrims":350,"gender":[["Hombre",252],["Mujer",98]],"transport":[["Pie",322],["Bicicleta",28]],"age":[["30 - 60",231],["< 30",99],["> 60",20]],"motivation":[["Religioso y otros",274],["Religioso",68],["No religioso",8]],"spanishFrom":[["Madrid",41],["Andalucía",22],["Galicia",20],["Comunidad Valenciana",19],["Cataluña",16],["Castilla León",15],["Pais Vasco",11],["Baleares",9],["Murcia",7],["Castilla la Mancha",6],["Aragón",5],["Asturias",3],["Canarias",3],["Otra",2],["Melilla",1],["Cantabria",1],["La Rioja",1]],"byCountry":[["España",182],["Alemania",33],["Estados Unidos",26],["Italia",18],["Argentina",12],["Francia",11],["Portugal",9],["Brasil",8],["Japón",6],["Corea",6],["Holanda",5],["Canadá",5],["Belgica",4],["Suiza",4],["Irlanda",3],["Dinamarca",3],["Hungría",3],["Reino Unido",3],["Austria",3],["Australia",2],["Nueva Zelanda",1],["Finlandia",1],["Polonia",1],["Rusia",1]],"professions":[["Liberales",58],["Tecnicos",52],["Empleados",51],["Estudiantes",45],["Profesores",33],["Obreros",30],["Parados",22],["Funcionarios",18],["Jubilados",17],["Artistas",9],["Directivos",5],["Amas de Casa",3],["Agricultores",3],["Marinos",2],["Sacerdotes",1],["Deportistas",1]],"startingCities":[["Sarria",62],["S. Jean P. Port",40],["Roncesvalles",35],["Ponferrada",28],["León",26],["Cebreiro",25],["Astorga",19],["Pamplona",14],["Tui",8],["Oviedo - C.P.",8],["Burgos",6],["Oporto",6],["Somport",6],["Logroño",4],["Rabanal del Camino",4],["Francia",3],["Hendaya",3],["Zamora",3],["Le Puy",3],["Resto Asturias",3],["Lugo - C.P.",3],["Vilalba",3],["Samos",3],["Resto C. León",3],["Mérida",2],["Jaca",2],["Tineo - C.P.",2],["Madrid - C.F.",2],["Alemania",2],["Sevilla",2],["Resto Portugal",2],["Verín",2],["Vilafranca",1],["Francia",1],["Arles",1],["Puebla de Sanabria",1],["Carrión de los Condes",1],["Canfranc",1],["Bilbao",1],["Roma",1],["Cataluña",1],["Valença do Minho",1],["Mondoñedo",1],["Ourense",1],["Sahagún",1],["Ribadeo",1],["Gijón",1],["Irún",1]],"startingRegions":[["Lugo",98],["León",82],["France",57],["Navarra",49],["Asturias",14],["Portugal",9],["Pontevedra",8],["Burgos",6],["La Rioja",4],["Zamora",4],["Huesca",3],["Ourense",3],["Madrid",2],["Germany",2],["Sevilla",2],["Badajoz",2],["Barcelona",1],["Palencia",1],["Vizcaya",1],["Italy",1],["Gipuzkoa",1]],"caminos":[["Frances-Camino de",294],["Portugues-Camino",17],["Norte-Camino de",15],["Primitivo-Camino",13],["Via de la Plata",11]]},"2":{"year":"2007","month":"2","pilgrims":666,"gender":[["Hombre",419],["Mujer",247]],"transport":[["Pie",639],["Bicicleta",27]],"age":[["< 30",322],["30 - 60",320],["> 60",24]],"motivation":[["Religioso y otros",338],["Religioso",284],["No religioso",44]],"spanishFrom":[["Madrid",113],["Comunidad Valenciana",42],["Cataluña",26],["Canarias",26],["Galicia",23],["Andalucía",18],["Castilla León",15],["Castilla la Mancha",11],["Baleares",11],["Pais Vasco",10],["Ceuta",8],["Murcia",4],["Cantabria",2],["Navarra",2],["Aragón",2],["Asturias",2],["La Rioja",1]],"byCountry":[["España",316],["Portugal",167],["Alemania",32],["Irlanda",19],["Italia",15],["México",12],["Estados Unidos",12],["Francia",9],["Canadá",9],["República Checa",8],["Corea",7],["Belgica",6],["Brasil",5],["Chile",5],["Suiza",5],["Polonia",4],["Reino Unido",4],["Australia",4],["Argentina",3],["Bolivia",3],["Dinamarca",3],["Holanda",3],["Colombia",2],["Ecuador",2],["Suecia",2],["Japón",2],["Austria",1],["Filipinas",1],["Noruega",1],["Rep. Dominicana",1],["Hungría",1],["Finlandia",1]],"professions":[["Estudiantes",272],["Empleados",70],["Liberales",66],["Profesores",57],["Obreros",54],["Tecnicos",51],["Jubilados",23],["Funcionarios",20],["Amas de Casa",15],["Parados",12],["Sacerdotes",8],["Directivos",7],["Religiosas",4],["Artistas",4],["Agricultores",2],["Marinos",1]],"startingCities":[["Sarria",142],["Cebreiro",117],["León",44],["Triacastela",41],["Tui",30],["Ponferrada",29],["Roncesvalles",29],["Vilalba",28],["Valença do Minho",27],["S. Jean P. Port",26],["Ponte de Lima",16],["Vilafranca",15],["Astorga",14],["Oporto",14],["Hendaya",9],["Pamplona",8],["Sevilla",7],["Laza",6],["Burgos",6],["Le Puy",4],["Francia",4],["Neda",3],["Resto C. León",3],["Resto Asturias",3],["Lugo - C.P.",3],["Alemania",2],["Resto Cantabria",2],["Somport",2],["Braga",2],["Irún",2],["Cast. la Mancha",2],["Ourense",2],["Vega de Valcarce",2],["Arles",2],["Ferrol",2],["Mérida",2],["Jaca",2],["Oviedo - C.P.",1],["Cataluña",1],["Huelva",1],["Salamanca",1],["Com. Valenciana",1],["Bélgica",1],["Roma",1],["Sto. Domingo de la Calzada",1],["Resto Portugal",1],["Fonsagrada - C.P.",1],["Sahagún",1],["Finisterra",1],["Zamora",1],["Vegadeo",1]],"startingRegions":[["Lugo",332],["León",108],["Portugal",60],["France",47],["Navarra",37],["Pontevedra",30],["Ourense",8],["Sevilla",7],["Burgos",6],["A Coruña",6],["Asturias",5],["Germany",2],["Cantabria",2],["Gipuzkoa",2],["Albacete",2],["Badajoz",2],["Huesca",2],["Barcelona",1],["La Rioja",1],["Huelva",1],["Salamanca",1],["Valencia",1],["Belgium",1],["Italy",1],["Zamora",1]],"caminos":[["Frances-Camino de",499],["Portugues-Camino",90],["Norte-Camino de",45],["Via de la Plata",20],["Ingles-Camino",5],["Primitivo-Camino",5],["Otros caminos",1],["Muxia-Finisterre",1]]},"3":{"year":"2007","month":"3","pilgrims":1680,"gender":[["Hombre",1057],["Mujer",623]],"transport":[["Pie",1530],["Bicicleta",138],["Caballo",12]],"age":[["< 30",812],["30 - 60",735],["> 60",133]],"motivation":[["Religioso y otros",998],["Religioso",532],["No religioso",150]],"spanishFrom":[["Madrid",345],["Andalucía",160],["Cataluña",120],["Galicia",86],["Canarias",53],["Comunidad Valenciana",51],["Castilla la Mancha",48],["Castilla León",37],["Baleares",22],["Pais Vasco",20],["Extremadura",15],["Navarra",13],["Asturias",13],["Aragón",7],["Murcia",6],["La Rioja",5],["Otra",2],["Cantabria",2]],"byCountry":[["España",1005],["Alemania",223],["Portugal",59],["Estados Unidos",50],["Italia",47],["Irlanda",32],["Francia",29],["Reino Unido",24],["Brasil",22],["Suiza",21],["Austria",20],["Holanda",19],["Argentina",14],["Canadá",13],["Japón",11],["Dinamarca",9],["Finlandia",8],["Belgica",7],["Suecia",6],["Noruega",6],["México",5],["Polonia",5],["Colombia",5],["Rumania",4],["Hungría",4],["Nueva Zelanda",3],["Venezuela",3],["Bolivia",3],["Uruguay",2],["Corea",2],["Cuba",2],["Perú",2],["Costa Rica",2],["Australia",2],["Ucrania",2],["Bulgaria",1],["El Salvador",1],["Jamaica",1],["Grecia",1],["Sudáfrica",1],["Chile",1],["India",1],["Ecuador",1],["Estonia",1]],"professions":[["Estudiantes",669],["Empleados",204],["Liberales",143],["Tecnicos",123],["Jubilados",122],["Obreros",119],["Profesores",94],["Funcionarios",76],["Parados",39],["Amas de Casa",34],["Directivos",21],["Sacerdotes",13],["Artistas",11],["Agricultores",10],["Marinos",2]],"startingCities":[["Sarria",360],["Cebreiro",206],["León",129],["S. Jean P. Port",100],["Roncesvalles",90],["Triacastela",88],["Ponferrada",71],["Pamplona",50],["Burgos",46],["Samos",45],["Oporto",44],["Astorga",41],["Rabanal del Camino",39],["Tui",36],["Lourenzá",34],["Vilafranca",33],["Resto C. León",26],["Valença do Minho",25],["Sevilla",21],["Neda",17],["Le Puy",14],["Resto Portugal",11],["Jaca",10],["Oviedo - C.P.",9],["Valencia",9],["Somport",8],["Irún",8],["Logroño",7],["Francia",7],["Ourense",6],["Puente la Reina",6],["Ferrol",5],["Murcia",5],["Lugo - C.P.",4],["Lisboa",4],["Vilalba",4],["Hospital de Orbigo",4],["Hendaya",3],["Madrid - C.F.",3],["Braga",3],["Ribadeo",3],["Verín",3],["Ponte de Lima",3],["Arles",3],["Sto. Domingo de la Calzada",2],["Resto Andalucia",2],["Santander",2],["Mérida",2],["Puebla de Sanabria",2],["Alemania",2],["Bilbao",2],["Sahagún",2],["R.Pais Vasco",2],["Barcelona",2],["Vezelay",2],["Resto de Extremadura",1],["Tineo - C.P.",1],["Suiza",1],["Zamora",1],["Vega de Valcarce",1],["París",1],["Mondoñedo",1],["Resto Cantabria",1],["Salamanca",1],["Lourdes",1],["Muxia",1],["Holanda",1],["Canfranc",1],["Nájera",1],["Gudiña",1]],"startingRegions":[["Lugo",745],["León",346],["Navarra",146],["France",139],["Portugal",90],["Burgos",46],["Pontevedra",36],["Sevilla",23],["A Coruña",23],["Huesca",11],["Asturias",10],["Ourense",10],["Gipuzkoa",10],["La Rioja",10],["Valencia",9],["Murcia",5],["Madrid",3],["Cantabria",3],["Badajoz",3],["Zamora",3],["Germany",2],["Vizcaya",2],["Barcelona",2],["Switzerland",1],["Salamanca",1],["Holland",1]],"caminos":[["Frances-Camino de",1405],["Portugues-Camino",126],["Norte-Camino de",58],["Via de la Plata",40],["Ingles-Camino",22],["Primitivo-Camino",14],["Otros caminos",14],["Muxia-Finisterre",1]]},"4":{"year":"2007","month":"4","pilgrims":8112,"gender":[["Hombre",4687],["Mujer",3425]],"transport":[["Pie",6793],["Bicicleta",1282],["Caballo",36],["Silla de ruedas",1]],"age":[["30 - 60",4482],["< 30",2657],["> 60",973]],"motivation":[["Religioso y otros",4602],["Religioso",2725],["No religioso",785]],"spanishFrom":[["Madrid",672],["Andalucía",652],["Cataluña",531],["Comunidad Valenciana",449],["Galicia",439],["Pais Vasco",253],["Castilla León",229],["Baleares",127],["Extremadura",119],["Canarias",104],["Castilla la Mancha",104],["Asturias",92],["Aragón",91],["Murcia",66],["Navarra",63],["Cantabria",36],["Otra",24],["La Rioja",21],["Melilla",4]],"byCountry":[["España",4076],["Alemania",991],["Portugal",617],["Francia",571],["Italia",322],["Reino Unido",178],["Estados Unidos",161],["Canadá",115],["Austria",107],["Irlanda",101],["Brasil",71],["Suecia",67],["Suiza",64],["Noruega",63],["Belgica",59],["Holanda",58],["Dinamarca",58],["México",48],["Finlandia",43],["Australia",42],["Argentina",27],["Venezuela",26],["Corea",25],["Sudáfrica",25],["Colombia",23],["Hungría",19],["Estonia",19],["Polonia",18],["República Checa",15],["Perú",12],["Nueva Zelanda",9],["Japón",8],["Rumania",6],["Uruguay",5],["Rusia",5],["Malta",5],["Lituania",4],["Bulgaria",4],["Eslovenia",3],["Islandia",3],["Eslovaquia",3],["Ecuador",3],["Puerto Rico",2],["Bosnia",2],["Andorra",2],["Irán",2],["Grecia",2],["Liechtensein",2],["Chile",2],["Luxemburgo",2],["Rep. Dominicana",2],["Croacia",2],["Malawi",2],["Pakistán",1],["Cuba",1],["Etiopía",1],["Filipinas",1],["Singapur",1],["Cabo Verde",1],["China",1],["El Salvador",1],["Israel",1],["Líbano",1]],"professions":[["Estudiantes",1757],["Empleados",1243],["Tecnicos",1025],["Liberales",992],["Jubilados",876],["Profesores",723],["Obreros",539],["Funcionarios",362],["Amas de Casa",228],["Parados",122],["Directivos",100],["Artistas",48],["Sacerdotes",34],["Agricultores",29],["Marinos",17],["Religiosas",12],["Deportistas",5]],"startingCities":[["Sarria",1844],["S. Jean P. Port",588],["Cebreiro",548],["León",512],["Roncesvalles",459],["Ponferrada",392],["Tui",322],["Astorga",257],["Le Puy",236],["Pamplona",229],["Burgos",225],["Valença do Minho",209],["Oporto",186],["Ourense",183],["Resto Portugal",166],["Sevilla",150],["Vilafranca",145],["Triacastela",131],["Francia",104],["Oviedo - C.P.",81],["Resto C. León",73],["Samos",68],["Ferrol",61],["Logroño",52],["Ponte de Lima",51],["Lugo - C.P.",46],["Irún",38],["Braga",37],["Somport",37],["Alemania",37],["Rabanal del Camino",30],["Neda",29],["Mérida",28],["Fonsagrada - C.P.",28],["Santander",26],["Vilalba",23],["Salamanca",22],["Jaca",22],["Bilbao",21],["Sahagún",21],["Ribadeo",19],["Resto Asturias",18],["Muxia",16],["Vigo",15],["Verín",13],["Arles",13],["Lisboa",13],["Frómista",12],["Puente la Reina",12],["Resto País Vasco",12],["París",12],["Madrid - C.F.",12],["Cáceres",12],["Zamora",10],["R.Pais Vasco",10],["Vega de Valcarce",9],["Sto. Domingo de la Calzada",9],["Francia",9],["Bélgica",9],["Zaragoza",9],["Holanda",9],["Suiza",8],["Avilés",8],["Estella",7],["Grandas de Salime - C.P.",7],["Hospital de Orbigo",6],["Chaves-Portugal",5],["Valencia",5],["Carrión de los Condes",5],["Resto de Extremadura",4],["Resto Andalucia",4],["Murcia",4],["Madrid",4],["Cataluña",4],["Tineo - C.P.",4],["Porriño",4],["Puebla de Sanabria",3],["Nájera",3],["Barcelona",3],["Canfranc",3],["Lourenzá",3],["Vezelay",3],["Finisterra",3],["Italia",3],["Resto Asturias - C.P.",3],["Austria",3],["Resto Cantabria",3],["Gijón",2],["Lourdes",2],["Dinamarca",2],["Valcarlos",2],["Grandas de Salime",2],["Córdoba",2],["Malaga",2],["Gudiña",2],["A Guarda",2],["Hendaya",2],["Cadavo",2],["Com. Valenciana",1],["",1],["La Mesa",1],["La Bañeza",1],["Benavente",1],["Huelva",1],["Tineo",1],["Granada",1]],"startingRegions":[["Lugo",2712],["León",1446],["France",1006],["Navarra",709],["Portugal",662],["Pontevedra",343],["Burgos",225],["Ourense",198],["Sevilla",154],["Asturias",127],["A Coruña",109],["La Rioja",64],["Gipuzkoa",60],["Germany",37],["Badajoz",32],["Cantabria",29],["Huesca",25],["Salamanca",22],["Vizcaya",21],["Palencia",17],["Madrid",16],["Zamora",14],["Cáceres",12],["Holland",9],["Belgium",9],["Zaragoza",9],["Switzerland",8],["Barcelona",7],["Valencia",6],["Porgugal",5],["Murcia",4],["Italy",3],["Austria",3],["Denmark",2],["Córdoba",2],["Málaga",2],["City&nbsp;Was Blank",1],["Huelva",1],["Granada",1]],"caminos":[["Frances-Camino de",6180],["Portugues-Camino",1005],["Via de la Plata",448],["Norte-Camino de",187],["Primitivo-Camino",172],["Ingles-Camino",90],["Muxia-Finisterre",19],["Otros caminos",10],["Otros caminos",1]]},"5":{"year":"2007","month":"5","pilgrims":12898,"gender":[["Hombre",7708],["Mujer",5190]],"transport":[["Pie",10685],["Bicicleta",2187],["Caballo",25],["Silla de ruedas",1]],"age":[["30 - 60",7994],["> 60",3214],["< 30",1690]],"motivation":[["Religioso y otros",6819],["Religioso",5240],["No religioso",839]],"spanishFrom":[["Madrid",819],["Cataluña",729],["Galicia",432],["Castilla León",413],["Comunidad Valenciana",380],["Andalucía",364],["Pais Vasco",296],["Castilla la Mancha",174],["Aragón",131],["Canarias",128],["Baleares",86],["Navarra",83],["Murcia",79],["Asturias",66],["Extremadura",36],["Cantabria",31],["Otra",25],["La Rioja",22],["Melilla",1],["Ceuta",1]],"byCountry":[["España",4296],["Alemania",2667],["Francia",1246],["Italia",798],["Austria",352],["Holanda",328],["Portugal",323],["Estados Unidos",307],["Canadá",300],["Reino Unido",296],["Brasil",243],["Irlanda",179],["Belgica",173],["Australia",160],["Suiza",153],["Dinamarca",145],["Noruega",142],["Finlandia",110],["Suecia",100],["Polonia",77],["México",50],["Corea",46],["Hungría",44],["Argentina",42],["Eslovenia",36],["República Checa",35],["Japón",31],["Nueva Zelanda",30],["Sudáfrica",26],["Venezuela",21],["Colombia",17],["Puerto Rico",13],["Andorra",11],["Costa Rica",9],["Ucrania",7],["Uruguay",7],["Islandia",6],["Eslovaquia",6],["Rusia",5],["Chile",5],["Estonia",4],["Luxemburgo",4],["Israel",4],["El Salvador",3],["Rumania",3],["Bulgaria",3],["Ecuador",3],["Bolivia",2],["Croacia",2],["China",2],["Marruecos",2],["Filipinas",2],["Perú",2],["Arabia Saudita",1],["Guatemala",1],["Rep. Dominicana",1],["India",1],["Grecia",1],["San Marino",1],["Paraguay",1],["Sri Lanka",1],["Letonia",1],["Turquía",1],["Liechtensein",1],["Cuba",1],["Angola",1],["Irán",1],["Taiwán",1]],"professions":[["Jubilados",3068],["Empleados",2305],["Tecnicos",1828],["Liberales",1662],["Obreros",874],["Estudiantes",779],["Funcionarios",734],["Amas de Casa",551],["Profesores",454],["Parados",210],["Directivos",202],["Artistas",96],["Sacerdotes",57],["Agricultores",25],["Religiosas",23],["Marinos",19],["Deportistas",11]],"startingCities":[["S. Jean P. Port",2057],["Sarria",1694],["Roncesvalles",1008],["León",925],["Pamplona",686],["Cebreiro",685],["Le Puy",574],["Astorga",489],["Ponferrada",439],["Burgos",399],["Sevilla",379],["Oporto",322],["Francia",234],["Vilafranca",229],["Tui",186],["Alemania",139],["Resto Portugal",134],["Resto C. León",123],["Somport",120],["Oviedo - C.P.",112],["Ferrol",102],["Irún",100],["Samos",97],["Triacastela",95],["Holanda",93],["Valença do Minho",86],["Logroño",73],["Ourense",72],["Fonsagrada - C.P.",69],["Salamanca",54],["Santander",49],["Ribadeo",47],["Vigo",45],["Resto Asturias",43],["Lisboa",43],["Jaca",41],["Lugo - C.P.",40],["Bilbao",39],["Sahagún",38],["Mérida",36],["Madrid - C.F.",34],["Zamora",32],["Resto País Vasco",30],["Frómista",29],["Bélgica",28],["Ponte de Lima",26],["Suiza",25],["Carrión de los Condes",24],["Vega de Valcarce",22],["Rabanal del Camino",21],["Puebla de Sanabria",21],["Vezelay",20],["Hospital de Orbigo",20],["Puente la Reina",19],["Francia",18],["Hendaya",18],["Lourdes",15],["Sto. Domingo de la Calzada",15],["Braga",14],["Valencia",13],["Vilalba",13],["Oviedo",13],["Canfranc",13],["Verín",13],["Zaragoza",10],["Avilés",10],["Resto Asturias - C.P.",9],["París",8],["Estella",8],["Austria",8],["Cáceres",8],["Italia",7],["Resto C. León - V.P.",7],["",7],["Arles",7],["Granada",6],["Barcelona",6],["La Mesa",6],["Gijón",6],["Resto Cantabria",6],["Gudiña",6],["Córdoba",6],["Chaves-Portugal",5],["Castrojeriz",5],["R.Pais Vasco",5],["Cataluña",5],["Madrid",4],["Cataluña",4],["Grandas de Salime - C.P.",4],["Malaga",4],["Muxia",4],["Resto Andalucia",3],["Neda",3],["Tineo - C.P.",3],["Murcia",3],["Fonsagrada",2],["Huelva",2],["Castilla La Mancha",2],["Tineo",2],["Cadavo",2],["Mondoñedo",2],["Nájera",2],["Reino Unido",1],["Valladolid",1],["La Bañeza",1],["Xunqueira de Ambia",1],["Inglaterra",1],["Com. Valenciana",1],["Salas",1],["Resto de Extremadura",1],["Roma",1]],"startingRegions":[["France",3071],["Lugo",2746],["León",2314],["Navarra",1721],["Portugal",625],["Burgos",404],["Sevilla",382],["Pontevedra",231],["Asturias",209],["Germany",139],["Gipuzkoa",135],["A Coruña",109],["Holland",93],["Ourense",92],["La Rioja",90],["Cantabria",55],["Salamanca",54],["Huesca",54],["Palencia",53],["Zamora",53],["Vizcaya",39],["Madrid",38],["Badajoz",37],["Belgium",28],["Switzerland",25],["Barcelona",15],["Valencia",14],["Zaragoza",10],["Austria",8],["Italy",8],["Cáceres",8],["City&nbsp;Was Blank",7],["Granada",6],["Córdoba",6],["Porgugal",5],["Málaga",4],["Murcia",3],["Huelva",2],["Albacete",2],["UK",2],["Valladolid",1]],"caminos":[["Frances-Camino de",10597],["Portugues-Camino",856],["Via de la Plata",664],["Norte-Camino de",398],["Primitivo-Camino",246],["Ingles-Camino",105],["Otros caminos",21],["Otros caminos",7],["Muxia-Finisterre",4]]},"6":{"year":"2007","month":"6","pilgrims":15157,"gender":[["Hombre",9094],["Mujer",6063]],"transport":[["Pie",11978],["Bicicleta",3132],["Caballo",46],["Silla de ruedas",1]],"age":[["30 - 60",9380],["> 60",3291],["< 30",2486]],"motivation":[["Religioso y otros",8248],["Religioso",5831],["No religioso",1078]],"spanishFrom":[["Madrid",976],["Cataluña",848],["Andalucía",626],["Comunidad Valenciana",536],["Pais Vasco",485],["Castilla León",398],["Galicia",287],["Castilla la Mancha",204],["Extremadura",181],["Canarias",151],["Aragón",148],["Navarra",107],["Murcia",105],["Asturias",85],["Baleares",60],["Cantabria",56],["La Rioja",56],["Otra",39],["Ceuta",15],["Melilla",2]],"byCountry":[["España",5365],["Alemania",2726],["Italia",1379],["Francia",1188],["Estados Unidos",467],["Holanda",450],["Portugal",446],["Canadá",347],["Austria",313],["Reino Unido",299],["Brasil",282],["Belgica",212],["Suiza",182],["Irlanda",172],["Australia",157],["Dinamarca",113],["Suecia",88],["México",85],["Sudáfrica",83],["Hungría",82],["Noruega",70],["Finlandia",68],["Japón",62],["Corea",59],["Nueva Zelanda",58],["Polonia",55],["Eslovenia",35],["Argentina",34],["República Checa",24],["Venezuela",23],["Estonia",18],["Uruguay",18],["Colombia",17],["Eslovaquia",14],["Luxemburgo",12],["Chile",11],["Guatemala",11],["Rumania",9],["Puerto Rico",9],["Islandia",8],["Rusia",8],["Israel",8],["Ecuador",7],["Ucrania",7],["Andorra",6],["Bulgaria",6],["Perú",5],["Croacia",5],["China",5],["Costa Rica",5],["Malta",4],["Bolivia",4],["Grecia",3],["Marruecos",3],["Argelia",2],["Lituania",2],["Tailandia",2],["Macedonia",1],["El Salvador",1],["Nigeria",1],["Nicaragua",1],["India",1],["Bermudas",1],["Indonesia",1],["Kenya",1],["Bosnia",1],["Trinidad y Tobago",1],["Zimbabwe",1],["Turquía",1],["Paraguay",1],["Singapur",1],["Dominica",1],["Rep. Dominicana",1],["Cuba",1],["Fiji",1],["Letonia",1]],"professions":[["Jubilados",3372],["Empleados",2868],["Tecnicos",2048],["Liberales",1866],["Estudiantes",1410],["Funcionarios",791],["Obreros",783],["Profesores",726],["Amas de Casa",558],["Parados",266],["Directivos",203],["Artistas",106],["Sacerdotes",84],["Agricultores",44],["Deportistas",16],["Marinos",12],["Religiosas",4]],"startingCities":[["S. Jean P. Port",2739],["Sarria",1855],["Roncesvalles",1332],["León",998],["Cebreiro",776],["Pamplona",704],["Ponferrada",593],["Le Puy",558],["Astorga",510],["Burgos",444],["Francia",408],["Sevilla",248],["Vilafranca",226],["Holanda",223],["Alemania",207],["Resto Portugal",190],["Oporto",187],["Valença do Minho",174],["Logroño",173],["Tui",165],["Irún",163],["Somport",162],["Oviedo - C.P.",151],["Triacastela",105],["Ferrol",104],["Samos",85],["Resto C. León",84],["Bélgica",72],["Bilbao",63],["Resto País Vasco",60],["Ourense",60],["Santander",56],["Jaca",56],["Suiza",50],["Frómista",49],["Ribadeo",47],["Chaves-Portugal",44],["Resto Asturias",42],["Lourdes",41],["Lugo - C.P.",40],["Vezelay",39],["Ponte de Lima",38],["Lisboa",37],["Mérida",37],["Salamanca",35],["Sahagún",33],["Francia",33],["Puente la Reina",33],["Madrid - C.F.",32],["Hendaya",27],["Zamora",27],["Braga",26],["Oviedo",25],["Arles",24],["Sto. Domingo de la Calzada",23],["Vilalba",23],["Cataluña",22],["R.Pais Vasco",22],["Fonsagrada - C.P.",19],["Resto Cantabria",19],["Vega de Valcarce",18],["Resto Asturias - C.P.",18],["Gijón",17],["Gudiña",17],["Rabanal del Camino",15],["Canfranc",14],["Carrión de los Condes",14],["Italia",13],["Avilés",13],["Estella",12],["Neda",12],["Porriño",12],["Barcelona",11],["Resto C. León - V.P.",11],["Vigo",10],["Austria",9],["Nájera",8],["Muxia",8],["Valencia",8],["París",8],["Hospital de Orbigo",7],["Com. Valenciana",6],["Cáceres",6],["Resto Andalucia",6],["Resto de Extremadura",5],["Benavente",4],["",4],["Castrojeriz",4],["Castilla la Mancha",3],["Badajoz",3],["Verín",3],["Granada",3],["Petín",2],["Reino Unido",2],["Republica Checa",2],["Puebla de Sanabria",2],["Zaragoza",2],["Luxemburgo",2],["Grandas de Salime - C.P.",2],["Dinamarca",2],["Grandas de Salime",2],["La Mesa",2],["Córdoba",2],["Valladolid",1],["Finisterra",1],["San Juan de Ortega",1],["Resto Europa",1],["Hungría",1],["Cataluña",1],["Castilla La Mancha",1],["Huelva",1],["Cadavo",1],["Malaga",1],["Granja de Moreruela",1],["Irlanda",1],["Andorra",1],["Cast. la Mancha",1],["Fonsagrada",1]],"startingRegions":[["France",4039],["Lugo",2952],["León",2495],["Navarra",2081],["Portugal",652],["Burgos",449],["Asturias",272],["Sevilla",254],["Gipuzkoa",245],["Holland",223],["Germany",207],["La Rioja",204],["Pontevedra",187],["A Coruña",125],["Ourense",82],["Cantabria",75],["Belgium",72],["Huesca",70],["Vizcaya",63],["Palencia",63],["Switzerland",50],["Badajoz",45],["Porgugal",44],["Salamanca",35],["Barcelona",34],["Zamora",34],["Madrid",32],["Valencia",14],["Italy",13],["Austria",9],["Cáceres",6],["Albacete",5],["City&nbsp;Was Blank",4],["Granada",3],["UK",2],["Córdoba",2],["Luxembourg",2],["Czech Republic",2],["Zaragoza",2],["Denmark",2],["Valladolid",1],["Europe Other",1],["Hungary",1],["Huelva",1],["Málaga",1],["Ireland",1],["Andorra",1]],"caminos":[["Frances-Camino de",12827],["Portugues-Camino",839],["Norte-Camino de",591],["Via de la Plata",520],["Primitivo-Camino",233],["Ingles-Camino",116],["Otros caminos",18],["Muxia-Finisterre",9],["Otros caminos",4]]},"7":{"year":"2007","month":"7","pilgrims":20108,"gender":[["Hombre",11269],["Mujer",8839]],"transport":[["Pie",16917],["Bicicleta",3144],["Caballo",46],["Silla de ruedas",1]],"age":[["30 - 60",9607],["< 30",9047],["> 60",1454]],"motivation":[["Religioso y otros",10286],["Religioso",8314],["No religioso",1508]],"spanishFrom":[["Madrid",2189],["Andalucía",1952],["Comunidad Valenciana",1341],["Cataluña",1244],["Castilla León",1134],["Pais Vasco",931],["Extremadura",661],["Galicia",511],["Castilla la Mancha",484],["Aragón",329],["Asturias",300],["Canarias",272],["Murcia",243],["Navarra",213],["Baleares",140],["Cantabria",83],["La Rioja",59],["Otra",47],["Melilla",7],["Ceuta",5]],"byCountry":[["España",12145],["Italia",1496],["Alemania",1477],["Francia",869],["Portugal",438],["Estados Unidos",438],["Belgica",303],["Polonia",277],["República Checa",226],["Holanda",197],["Canadá",194],["Reino Unido",192],["Austria",190],["Irlanda",182],["Hungría",164],["Brasil",157],["Suiza",147],["Dinamarca",120],["Noruega",113],["Suecia",90],["México",85],["Australia",58],["Corea",50],["Argentina",50],["Eslovenia",39],["Finlandia",34],["Japón",34],["Colombia",27],["Sudáfrica",25],["Rumania",22],["Eslovaquia",22],["Nueva Zelanda",19],["Andorra",15],["Chile",15],["Estonia",13],["Perú",13],["Marruecos",12],["Croacia",12],["Luxemburgo",11],["Rusia",10],["Puerto Rico",9],["Venezuela",9],["Ecuador",9],["Uruguay",8],["Ucrania",8],["El Salvador",6],["Rep. Dominicana",6],["Líbano",5],["Costa Rica",4],["Cuba",4],["Taiwán",4],["Guatemala",4],["Grecia",4],["Bulgaria",3],["Islandia",3],["Malasia",3],["Nicaragua",3],["Filipinas",3],["Paraguay",3],["Islas Feroe",3],["Bolivia",2],["Panamá",1],["Mauricio",1],["Singapur",1],["Zimbabwe",1],["Vietnam",1],["Serbia",1],["Moldavia",1],["Guinea",1],["Sierra Leona",1],["China",1],["Honduras",1],["Martinica",1],["Bielorrusia",1],["Irán",1],["India",1],["Israel",1],["Tailandia",1],["Egipto",1],["Mauritania",1],["Liechtensein",1],["Costa de Marfil",1],["Lituania",1]],"professions":[["Estudiantes",6989],["Profesores",2590],["Empleados",2552],["Tecnicos",1916],["Liberales",1732],["Jubilados",1263],["Funcionarios",878],["Obreros",876],["Amas de Casa",467],["Sacerdotes",232],["Parados",195],["Artistas",149],["Directivos",143],["Agricultores",46],["Religiosas",41],["Marinos",20],["Deportistas",19]],"startingCities":[["Sarria",3197],["S. Jean P. Port",1820],["Roncesvalles",1411],["Cebreiro",1345],["Ponferrada",1251],["León",1235],["Astorga",1094],["Tui",671],["Burgos",539],["Pamplona",493],["Vilafranca",474],["Le Puy",362],["Vilalba",338],["Oviedo - C.P.",308],["Ourense",296],["Triacastela",288],["Valença do Minho",268],["Francia",232],["Resto Portugal",218],["Samos",217],["Oporto",180],["Ferrol",177],["Ribadeo",177],["Irún",176],["Resto C. León",166],["Resto Asturias",163],["Logroño",143],["Sevilla",131],["Somport",129],["Ponte de Lima",99],["Rabanal del Camino",96],["Holanda",95],["Alemania",91],["Laza",84],["Bilbao",81],["Neda",75],["Frómista",73],["Avilés",70],["Vega de Valcarce",69],["Resto C. León - V.P.",68],["Lugo - C.P.",66],["Santander",65],["Finisterra",64],["Resto País Vasco",62],["Lourdes",62],["Grandas de Salime - C.P.",60],["Bélgica",59],["Suiza",57],["Mondoñedo",57],["Gijón",54],["Puente la Reina",51],["Sahagún",51],["Grandas de Salime",47],["Jaca",46],["Arles",44],["Gudiña",43],["Mérida",42],["Braga",41],["Madrid - C.F.",39],["Carrión de los Condes",33],["Rábade",33],["Puebla de Sanabria",33],["Resto Cantabria",32],["Zamora",31],["Sto. Domingo de la Calzada",27],["Lourenzá",27],["Hendaya",26],["Vezelay",24],["Resto Asturias - C.P.",23],["Oviedo",23],["Salamanca",23],["Resto Andalucia",21],["Fonsagrada - C.P.",20],["Estella",19],["Hospital de Orbigo",18],["Cataluña",17],["R.Pais Vasco",16],["Canfranc",16],["Lisboa",16],["Francia",13],["Muxia",12],["Tineo - C.P.",10],["Valencia",10],["Tineo",10],["Castrojeriz",10],["Zaragoza",9],["Austria",9],["Chaves-Portugal",8],["Italia",8],["Allariz",7],["",6],["Salas",6],["Barcelona",6],["Cáceres",6],["Nájera",6],["San Juan de Ortega",5],["Madrid",5],["Resto de Extremadura",5],["Republica Checa",4],["Vigo",4],["Xunqueira de Ambia",4],["Huelva",4],["Cadavo",4],["París",3],["Fonsagrada",3],["Valladolid",3],["Com. Valenciana",3],["La Mesa",3],["Murcia",3],["Verín",3],["Fonfría",3],["Dinamarca",3],["Grado",2],["Granada",2],["Cataluña",2],["Porriño",2],["Castilla la Mancha",2],["Roma",2],["Granja de Moreruela",2],["Malaga",2],["Castilla La Mancha",2],["Ortigueira",1],["Córdoba",1],["Luxemburgo",1],["Resto Europa",1]],"startingRegions":[["Lugo",5742],["León",4522],["France",2715],["Navarra",1974],["Portugal",822],["Asturias",779],["Pontevedra",677],["Burgos",554],["Ourense",437],["A Coruña",329],["Gipuzkoa",254],["La Rioja",176],["Sevilla",152],["Palencia",106],["Cantabria",97],["Holland",95],["Germany",91],["Vizcaya",81],["Zamora",66],["Huesca",62],["Belgium",59],["Switzerland",57],["Badajoz",47],["Madrid",44],["Huelva",37],["Barcelona",25],["Salamanca",23],["Valencia",13],["Italy",10],["Austria",9],["Zaragoza",9],["Porgugal",8],["City&nbsp;Was Blank",6],["Cáceres",6],["Czech Republic",4],["Albacete",4],["Murcia",3],["Denmark",3],["Valladolid",3],["Granada",2],["Málaga",2],["Córdoba",1],["Luxembourg",1],["Europe Other",1]],"caminos":[["Frances-Camino de",15466],["Portugues-Camino",1499],["Norte-Camino de",1460],["Via de la Plata",826],["Primitivo-Camino",502],["Ingles-Camino",253],["Muxia-Finisterre",76],["Otros caminos",20],["Otros caminos",6]]},"8":{"year":"2007","month":"8","pilgrims":27140,"gender":[["Hombre",15816],["Mujer",11324]],"transport":[["Pie",21779],["Bicicleta",5268],["Caballo",91],["Silla de ruedas",2]],"age":[["30 - 60",15420],["< 30",10612],["> 60",1108]],"motivation":[["Religioso y otros",13955],["Religioso",10638],["No religioso",2547]],"spanishFrom":[["Cataluña",2780],["Comunidad Valenciana",2732],["Madrid",2675],["Andalucía",2163],["Pais Vasco",1225],["Castilla León",827],["Castilla la Mancha",691],["Galicia",678],["Murcia",604],["Aragón",381],["Extremadura",355],["Navarra",229],["Baleares",213],["Asturias",200],["Canarias",185],["La Rioja",101],["Otra",88],["Cantabria",71],["Ceuta",20],["Melilla",17]],"byCountry":[["España",16235],["Italia",4598],["Alemania",1590],["Francia",942],["Portugal",848],["Polonia",232],["Austria",222],["Holanda",211],["Estados Unidos",204],["Belgica",197],["Reino Unido",190],["Eslovaquia",164],["Hungría",148],["Brasil",116],["República Checa",114],["Irlanda",98],["Corea",86],["Dinamarca",86],["Suiza",84],["Canadá",80],["México",62],["Argentina",60],["Suecia",53],["Colombia",43],["Japón",40],["Venezuela",39],["Eslovenia",36],["Australia",35],["Noruega",28],["Chile",22],["Ecuador",20],["Uruguay",19],["Finlandia",17],["Estonia",17],["Andorra",13],["Rusia",12],["Nueva Zelanda",11],["Rumania",11],["Perú",10],["Sudáfrica",10],["Bolivia",10],["China",9],["Cuba",8],["Luxemburgo",8],["Costa Rica",7],["Ucrania",7],["Rep. Dominicana",7],["Bulgaria",6],["Israel",6],["Lituania",6],["Malta",5],["Croacia",3],["Puerto Rico",3],["Irán",3],["India",3],["Honduras",3],["Filipinas",3],["Panamá",3],["El Salvador",2],["Serbia",2],["Líbano",2],["Kenya",2],["Marruecos",1],["Albania",1],["Grecia",1],["Nicaragua",1],["Egipto",1],["Macedonia",1],["Irak",1],["Omán",1],["Botswana",1],["Laos",1],["Guatemala",1],["Etiopía",1],["Indonesia",1],["I. Reunión",1],["Jordania",1],["Vanuatu",1],["Tailandia",1],["Senegal",1],["Bosnia",1],["Letonia",1],["Zimbabwe",1],["Moldavia",1],["Fiji",1],["Taiwán",1]],"professions":[["Estudiantes",6066],["Empleados",4810],["Liberales",3477],["Tecnicos",3455],["Profesores",3392],["Obreros",2401],["Funcionarios",959],["Jubilados",879],["Amas de Casa",596],["Parados",257],["Sacerdotes",250],["Artistas",245],["Directivos",228],["Agricultores",63],["Deportistas",29],["Religiosas",21],["Marinos",12]],"startingCities":[["Sarria",5297],["S. Jean P. Port",2472],["Roncesvalles",2440],["León",1994],["Cebreiro",1984],["Ponferrada",1860],["Astorga",961],["Tui",823],["Pamplona",731],["Burgos",628],["Oviedo - C.P.",581],["Vilafranca",549],["Valença do Minho",363],["Irún",336],["Triacastela",326],["Oporto",323],["Le Puy",285],["Ferrol",255],["Ribadeo",241],["Ourense",225],["Logroño",218],["Resto Portugal",193],["Francia",193],["Resto C. León",192],["Resto Asturias",190],["Vilalba",185],["Samos",175],["Mondoñedo",149],["Sevilla",148],["Bilbao",147],["Somport",145],["Santander",137],["Lugo - C.P.",127],["Resto País Vasco",113],["Sahagún",105],["Alemania",98],["Ponte de Lima",92],["Holanda",82],["Frómista",75],["Oviedo",72],["Avilés",69],["Vega de Valcarce",62],["R.Pais Vasco",54],["Madrid - C.F.",53],["Jaca",52],["Salamanca",49],["Mérida",49],["Gijón",47],["Resto Cantabria",45],["Sto. Domingo de la Calzada",44],["Gudiña",40],["Hospital de Orbigo",39],["Bélgica",39],["Lisboa",37],["Resto Asturias - C.P.",37],["Braga",37],["Hendaya",35],["Puente la Reina",35],["Carrión de los Condes",34],["Fonsagrada - C.P.",34],["Chaves-Portugal",33],["Zamora",33],["Suiza",31],["Cataluña",30],["",28],["Rabanal del Camino",28],["Muxia",26],["Francia",26],["Estella",24],["Allariz",24],["Tineo",24],["Zaragoza",22],["Lourdes",21],["Barcelona",20],["Puebla de Sanabria",20],["Vezelay",20],["Cadavo",18],["Grandas de Salime - C.P.",18],["Canfranc",18],["Tineo - C.P.",17],["Valencia",15],["Xunqueira de Ambia",15],["Neda",13],["Arles",12],["Vigo",12],["Italia",11],["París",11],["Resto C. León - V.P.",11],["Grandas de Salime",11],["Cáceres",9],["Austria",8],["Com. Valenciana",8],["Madrid",7],["Castrojeriz",7],["Fonsagrada",7],["Laza",7],["Verín",7],["Com. Valenciana",7],["Nájera",7],["Resto Andalucia",6],["Córdoba",6],["Resto de Extremadura",6],["Lourenzá",6],["Porriño",5],["Valladolid",4],["Huelva",4],["Finisterra",4],["Fonfría",4],["Cataluña",3],["Murcia",3],["Reino Unido",3],["Castilla La Mancha",3],["Grado",2],["Granada",2],["San Juan de Ortega",2],["La Mesa",2],["Cast. la Mancha",2],["Republica Checa",1],["Polonia",1],["Valcarlos",1],["Badajoz",1],["Leyre",1],["Betanzos",1]],"startingRegions":[["Lugo",8553],["León",5801],["Navarra",3232],["France",3220],["Asturias",1070],["Portugal",1045],["Pontevedra",840],["Burgos",637],["Gipuzkoa",503],["Ourense",318],["A Coruña",299],["La Rioja",269],["Cantabria",182],["Sevilla",154],["Vizcaya",147],["Palencia",109],["Germany",98],["Holland",82],["Huesca",70],["Madrid",60],["Badajoz",56],["Zamora",53],["Barcelona",53],["Salamanca",49],["Belgium",39],["Porgugal",33],["Switzerland",31],["Valencia",30],["City&nbsp;Was Blank",28],["Zaragoza",22],["Italy",11],["Cáceres",9],["Austria",8],["Córdoba",6],["Albacete",5],["Valladolid",4],["Huelva",4],["Murcia",3],["UK",3],["Granada",2],["Poland",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",21511],["Portugues-Camino",1885],["Norte-Camino de",1844],["Primitivo-Camino",836],["Via de la Plata",709],["Ingles-Camino",269],["Muxia-Finisterre",30],["Otros caminos",28],["Otros caminos",28]]},"9":{"year":"2007","month":"9","pilgrims":15189,"gender":[["Hombre",8753],["Mujer",6436]],"transport":[["Pie",12227],["Bicicleta",2911],["Caballo",51]],"age":[["30 - 60",8777],["< 30",3893],["> 60",2519]],"motivation":[["Religioso y otros",8309],["Religioso",5484],["No religioso",1396]],"spanishFrom":[["Madrid",1168],["Cataluña",901],["Andalucía",893],["Comunidad Valenciana",719],["Galicia",693],["Castilla León",551],["Pais Vasco",438],["Castilla la Mancha",274],["Aragón",205],["Extremadura",145],["Murcia",135],["Navarra",127],["Baleares",126],["Canarias",125],["Asturias",120],["Cantabria",53],["La Rioja",53],["Otra",35],["Melilla",4],["Ceuta",2]],"byCountry":[["España",6767],["Alemania",2285],["Francia",1080],["Italia",1052],["Portugal",512],["Canadá",310],["Estados Unidos",251],["Austria",248],["Holanda",231],["Reino Unido",229],["Brasil",205],["Belgica",198],["Irlanda",182],["Suiza",181],["Dinamarca",158],["Polonia",132],["Australia",112],["República Checa",110],["Hungría",101],["Suecia",99],["Noruega",80],["México",80],["Finlandia",66],["Argentina",65],["Sudáfrica",53],["Japón",44],["Eslovaquia",34],["Corea",32],["Colombia",31],["Nueva Zelanda",22],["Estonia",20],["Andorra",19],["Israel",19],["Uruguay",17],["Chile",17],["Venezuela",17],["Eslovenia",11],["Lituania",10],["Puerto Rico",10],["Rumania",8],["Perú",7],["Luxemburgo",7],["Letonia",7],["Rusia",4],["Ecuador",4],["El Salvador",4],["Santo Tomé y Príncipe",3],["Bulgaria",3],["Islas Feroe",3],["Costa Rica",3],["Singapur",3],["Cuba",3],["Guatemala",3],["Croacia",3],["Cabo Verde",3],["Filipinas",3],["Namibia",2],["Liechtensein",2],["Ucrania",2],["Panamá",1],["Armenia",1],["Marruecos",1],["Nigeria",1],["Jordania",1],["Granada",1],["Taiwán",1],["Líbano",1],["Bolivia",1],["Kirguistán",1],["Serbia",1],["Macedonia",1],["India",1],["Sri Lanka",1],["Bosnia",1],["Tailandia",1],["Irán",1],["Kenya",1]],"professions":[["Empleados",2805],["Tecnicos",2274],["Jubilados",2235],["Estudiantes",2212],["Liberales",1834],["Obreros",1033],["Funcionarios",966],["Profesores",618],["Amas de Casa",502],["Parados",222],["Directivos",175],["Artistas",126],["Sacerdotes",90],["Agricultores",50],["Marinos",21],["Deportistas",18],["Religiosas",8]],"startingCities":[["Sarria",2570],["S. Jean P. Port",1926],["Roncesvalles",1148],["León",1119],["Cebreiro",961],["Ponferrada",881],["Astorga",700],["Pamplona",528],["Le Puy",434],["Burgos",411],["Tui",311],["Francia",251],["Oporto",230],["Vilafranca",227],["Valença do Minho",221],["Oviedo - C.P.",219],["Triacastela",155],["Resto Portugal",143],["Somport",140],["Sevilla",139],["Logroño",138],["Irún",138],["Resto C. León",125],["Ourense",118],["Ferrol",103],["Santander",103],["Holanda",102],["Bilbao",87],["Alemania",80],["Ribadeo",70],["Samos",61],["Sahagún",57],["Resto Asturias",53],["Resto País Vasco",49],["Suiza",48],["Bélgica",44],["Lugo - C.P.",43],["Salamanca",41],["Vilalba",37],["Ponte de Lima",36],["Oviedo",32],["Lisboa",31],["Rabanal del Camino",31],["Jaca",30],["Gijón",29],["Madrid - C.F.",28],["Mérida",28],["Muxia",27],["Vega de Valcarce",27],["Frómista",27],["Vezelay",27],["Avilés",26],["Puente la Reina",26],["Canfranc",26],["Fonsagrada - C.P.",25],["Arles",24],["Zamora",23],["Lourdes",22],["Hendaya",21],["Sto. Domingo de la Calzada",21],["Puebla de Sanabria",20],["Austria",20],["Estella",19],["Resto Asturias - C.P.",18],["Chaves-Portugal",18],["Resto Cantabria",18],["Francia",16],["Hospital de Orbigo",16],["",16],["R.Pais Vasco",15],["Cáceres",13],["Carrión de los Condes",12],["Gudiña",11],["Castilla la Mancha",10],["Porriño",9],["Vigo",9],["Resto C. León - V.P.",9],["La Mesa",8],["Zaragoza",8],["Dinamarca",8],["Fonsagrada",7],["Italia",7],["Resto Andalucia",7],["Grandas de Salime - C.P.",7],["París",6],["Cataluña",6],["Tineo - C.P.",6],["Laza",5],["Neda",5],["Valcarlos",5],["Nájera",5],["Grado",5],["Mondoñedo",4],["Barcelona",4],["Valencia",4],["Madrid",4],["Resto de Extremadura",4],["Verín",4],["Braga",3],["Valladolid",3],["Castilla La Mancha",3],["Granja de Moreruela",3],["Finisterra",3],["Badajoz",3],["Reino Unido",3],["Resto Europa",2],["Cataluña",2],["Luxemburgo",2],["Guntín",2],["Roma",2],["Polonia",2],["Granada",2],["Com. Valenciana",1],["Inglaterra",1],["Lourenzá",1],["Tineo",1],["Murcia",1],["Republica Checa",1],["Castrojeriz",1],["Córdoba",1]],"startingRegions":[["Lugo",3934],["León",3192],["France",2867],["Navarra",1726],["Portugal",664],["Burgos",412],["Asturias",404],["Pontevedra",329],["Gipuzkoa",202],["La Rioja",164],["Sevilla",146],["A Coruña",140],["Ourense",138],["Cantabria",121],["Holland",102],["Vizcaya",87],["Germany",80],["Huesca",56],["Switzerland",48],["Zamora",46],["Belgium",44],["Salamanca",41],["Palencia",39],["Badajoz",35],["Madrid",32],["Austria",20],["Porgugal",18],["City&nbsp;Was Blank",16],["Cáceres",13],["Albacete",13],["Barcelona",12],["Italy",9],["Denmark",8],["Zaragoza",8],["Valencia",5],["UK",4],["Valladolid",3],["Europe Other",2],["Luxembourg",2],["Poland",2],["Granada",2],["Murcia",1],["Czech Republic",1],["Córdoba",1]],"caminos":[["Frances-Camino de",12540],["Portugues-Camino",993],["Norte-Camino de",694],["Via de la Plata",459],["Primitivo-Camino",331],["Ingles-Camino",108],["Muxia-Finisterre",30],["Otros caminos",18],["Otros caminos",16]]},"10":{"year":"2007","month":"10","pilgrims":9434,"gender":[["Hombre",5629],["Mujer",3805]],"transport":[["Pie",8109],["Bicicleta",1274],["Caballo",50],["Silla de ruedas",1]],"age":[["30 - 60",5586],["< 30",1989],["> 60",1859]],"motivation":[["Religioso y otros",5230],["Religioso",3353],["No religioso",851]],"spanishFrom":[["Madrid",564],["Cataluña",461],["Andalucía",426],["Galicia",416],["Comunidad Valenciana",334],["Pais Vasco",215],["Castilla León",195],["Castilla la Mancha",104],["Asturias",91],["Aragón",83],["Murcia",81],["Canarias",77],["Baleares",73],["Navarra",72],["Extremadura",42],["Cantabria",36],["Ceuta",27],["La Rioja",19],["Otra",9],["Melilla",5]],"byCountry":[["España",3330],["Alemania",1566],["Francia",837],["Italia",434],["Canadá",382],["Portugal",319],["Suiza",247],["Reino Unido",239],["Brasil",207],["Estados Unidos",202],["Austria",186],["Australia",151],["Belgica",143],["Holanda",127],["Dinamarca",122],["Noruega",116],["Irlanda",89],["Corea",77],["México",69],["Finlandia",69],["Suecia",68],["Japón",58],["Hungría",54],["Polonia",49],["Argentina",37],["Sudáfrica",31],["Nueva Zelanda",27],["Israel",22],["Eslovaquia",21],["República Checa",17],["Venezuela",16],["Estonia",13],["Colombia",11],["Chile",11],["Rumania",8],["Costa Rica",6],["Ecuador",6],["Luxemburgo",6],["Lituania",6],["Perú",5],["Uruguay",5],["Eslovenia",5],["Andorra",4],["Rusia",4],["Islandia",4],["Filipinas",3],["Croacia",3],["India",2],["Grecia",2],["Letonia",2],["Bolivia",2],["Rep. Dominicana",2],["Panamá",2],["Liechtensein",1],["Indonesia",1],["Malta",1],["Bulgaria",1],["Taiwán",1],["Singapur",1],["Líbano",1],["Irán",1]],"professions":[["Jubilados",1729],["Empleados",1672],["Tecnicos",1433],["Liberales",1173],["Estudiantes",1060],["Obreros",575],["Funcionarios",489],["Profesores",484],["Amas de Casa",254],["Parados",205],["Directivos",141],["Artistas",95],["Sacerdotes",51],["Agricultores",31],["Marinos",17],["Deportistas",14],["Religiosas",11]],"startingCities":[["S. Jean P. Port",1805],["Sarria",1357],["Roncesvalles",772],["León",588],["Cebreiro",513],["Ponferrada",393],["Le Puy",387],["Astorga",361],["Pamplona",342],["Francia",229],["Burgos",217],["Oporto",171],["Vilafranca",151],["Sevilla",141],["Tui",127],["Resto Portugal",111],["Somport",107],["Oviedo - C.P.",93],["Irún",88],["Alemania",87],["Resto C. León",78],["Suiza",76],["Triacastela",64],["Samos",60],["Ourense",57],["Logroño",55],["Valença do Minho",46],["Sahagún",36],["Bilbao",36],["Santander",34],["Lisboa",34],["Ferrol",33],["Hendaya",31],["Mérida",30],["Resto Asturias",29],["Salamanca",29],["Lourdes",27],["Holanda",26],["Mondoñedo",25],["Frómista",24],["Braga",24],["Vilalba",22],["Chaves-Portugal",21],["Ribadeo",21],["Resto País Vasco",21],["Porriño",21],["Bélgica",20],["Puente la Reina",18],["Arles",18],["Vezelay",18],["Vega de Valcarce",17],["Francia",17],["Zamora",17],["Jaca",16],["Carrión de los Condes",14],["Verín",14],["Rabanal del Camino",13],["Gijón",13],["Oviedo",13],["Avilés",12],["Sto. Domingo de la Calzada",12],["Hospital de Orbigo",11],["Austria",11],["Lugo - C.P.",11],["Puebla de Sanabria",11],["Resto Cantabria",10],["París",10],["Canfranc",9],["Estella",8],["Madrid - C.F.",7],["Nájera",7],["Gudiña",6],["Xunqueira de Ambia",6],["Muxia",6],["Ponte de Lima",6],["Resto C. León - V.P.",6],["Cáceres",5],["R.Pais Vasco",4],["Resto Asturias - C.P.",4],["Grandas de Salime - C.P.",4],["Cataluña",4],["Zaragoza",4],["Resto Andalucia",4],["Neda",4],["Cadavo",3],["Com. Valenciana",3],["Barcelona",3],["Castrojeriz",2],["Tineo - C.P.",2],["Grado",2],["Polonia",2],["Malaga",2],["Granada",2],["Luxemburgo",2],["Laza",2],["Cataluña",1],["Castilla La Mancha",1],["Italia",1],["Valencia",1],["Resto de Extremadura",1],["Badajoz",1],["Granja de Moreruela",1],["Roma",1],["Inglaterra",1],["Jerusalem",1],["",1],["Grecia",1],["Resto Europa",1],["Reino Unido",1],["Madrid",1],["Murcia",1],["Egipto",1],["Fonsagrada",1],["Irlanda",1]],"startingRegions":[["France",2649],["Lugo",2077],["León",1654],["Navarra",1140],["Portugal",392],["Burgos",219],["Asturias",172],["Pontevedra",148],["Sevilla",145],["Gipuzkoa",113],["Germany",87],["Ourense",85],["Switzerland",76],["La Rioja",74],["Cantabria",44],["A Coruña",43],["Palencia",38],["Vizcaya",36],["Badajoz",32],["Salamanca",29],["Zamora",29],["Holland",26],["Huesca",25],["Porgugal",21],["Belgium",20],["Austria",11],["Barcelona",8],["Madrid",8],["Cáceres",5],["Zaragoza",4],["Valencia",4],["UK",2],["Granada",2],["Luxembourg",2],["Poland",2],["Italy",2],["Málaga",2],["Ireland",1],["Egypt",1],["Israel",1],["City&nbsp;Was Blank",1],["Greece",1],["Europe Other",1],["Murcia",1],["Albacete",1]],"caminos":[["Frances-Camino de",7994],["Portugues-Camino",540],["Norte-Camino de",373],["Via de la Plata",358],["Primitivo-Camino",119],["Ingles-Camino",37],["Otros caminos",6],["Muxia-Finisterre",6],["Otros caminos",1]]},"11":{"year":"2007","month":"11","pilgrims":2496,"gender":[["Hombre",1537],["Mujer",959]],"transport":[["Pie",2230],["Bicicleta",259],["Caballo",7]],"age":[["30 - 60",1514],["< 30",712],["> 60",270]],"motivation":[["Religioso y otros",1403],["Religioso",875],["No religioso",218]],"spanishFrom":[["Galicia",203],["Madrid",188],["Cataluña",133],["Andalucía",113],["Pais Vasco",94],["Asturias",82],["Baleares",77],["Castilla León",52],["Comunidad Valenciana",42],["Aragón",41],["Canarias",29],["Castilla la Mancha",26],["Murcia",15],["Extremadura",13],["Navarra",10],["Cantabria",9],["Otra",3],["La Rioja",1]],"byCountry":[["España",1131],["Portugal",236],["Alemania",185],["Francia",159],["Estados Unidos",99],["Italia",91],["Canadá",81],["Brasil",65],["Australia",58],["Austria",36],["Reino Unido",32],["Suiza",32],["Corea",27],["Irlanda",26],["Belgica",24],["Argentina",23],["Japón",23],["Holanda",20],["México",16],["Suecia",13],["Dinamarca",13],["Polonia",12],["Nueva Zelanda",12],["Finlandia",10],["Andorra",8],["Noruega",8],["República Checa",7],["Sudáfrica",6],["Venezuela",5],["Colombia",5],["Eslovaquia",4],["Hungría",4],["Rumania",3],["Israel",3],["El Salvador",2],["Mónaco",2],["Estonia",2],["Luxemburgo",2],["Letonia",1],["Puerto Rico",1],["Eslovenia",1],["Bulgaria",1],["Irán",1],["Rusia",1],["Malasia",1],["Croacia",1],["Marruecos",1],["Ecuador",1],["Cuba",1]],"professions":[["Estudiantes",410],["Tecnicos",339],["Empleados",336],["Liberales",328],["Jubilados",268],["Obreros",247],["Profesores",153],["Funcionarios",131],["Parados",90],["Amas de Casa",85],["Directivos",37],["Artistas",34],["Sacerdotes",12],["Agricultores",12],["Marinos",8],["Deportistas",5],["Religiosas",1]],"startingCities":[["Sarria",458],["S. Jean P. Port",390],["Roncesvalles",215],["Cebreiro",115],["Oporto",95],["Le Puy",92],["Ponferrada",89],["León",87],["Pamplona",77],["Oviedo - C.P.",73],["Tui",61],["Astorga",56],["Sevilla",51],["Ferrol",51],["Francia",48],["Burgos",43],["Irún",43],["Somport",35],["Vilafranca",33],["Resto Portugal",26],["Valença do Minho",19],["Suiza",18],["Triacastela",17],["Alemania",16],["Ourense",16],["Vilalba",16],["Jaca",15],["Resto C. León",14],["Arles",14],["Logroño",13],["Madrid - C.F.",10],["Bélgica",9],["Austria",9],["Lugo - C.P.",9],["Francia",8],["Avilés",8],["Sahagún",8],["Gudiña",7],["Carrión de los Condes",7],["Resto País Vasco",6],["Braga",6],["Ponte de Lima",6],["Cataluña",6],["Salamanca",5],["Holanda",5],["Ribadeo",5],["Vezelay",5],["Valcarlos",5],["Zaragoza",5],["Lourdes",5],["Neda",4],["Frómista",4],["Lisboa",4],["Resto Asturias",4],["Reino Unido",3],["Santander",3],["Bilbao",3],["Benavente",3],["Laza",3],["Gijón",3],["Puente la Reina",2],["Estella",2],["Valencia",2],["Zamora",2],["Resto C. León - V.P.",2],["R.Pais Vasco",2],["Samos",2],["Puebla de Sanabria",2],["Hendaya",2],["Mérida",2],["Sto. Domingo de la Calzada",2],["París",1],["Italia",1],["Resto Andalucia",1],["Roma",1],["Resto Cantabria",1],["Rabanal del Camino",1],["Canfranc",1],["Castilla La Mancha",1],["Irlanda",1],["Granada",1]],"startingRegions":[["Lugo",622],["France",600],["Navarra",301],["León",290],["Portugal",156],["Asturias",88],["Pontevedra",61],["A Coruña",55],["Sevilla",52],["Gipuzkoa",51],["Burgos",43],["Ourense",26],["Switzerland",18],["Germany",16],["Huesca",16],["La Rioja",15],["Palencia",11],["Madrid",10],["Austria",9],["Belgium",9],["Zamora",7],["Barcelona",6],["Holland",5],["Salamanca",5],["Zaragoza",5],["Cantabria",4],["UK",3],["Vizcaya",3],["Valencia",2],["Badajoz",2],["Italy",2],["Albacete",1],["Ireland",1],["Granada",1]],"caminos":[["Frances-Camino de",1942],["Portugues-Camino",217],["Norte-Camino de",102],["Via de la Plata",96],["Primitivo-Camino",82],["Ingles-Camino",55],["Otros caminos",2]]},"12":{"year":"2007","month":"12","pilgrims":796,"gender":[["Hombre",559],["Mujer",237]],"transport":[["Pie",745],["Bicicleta",51]],"age":[["30 - 60",523],["< 30",242],["> 60",31]],"motivation":[["Religioso y otros",482],["Religioso",237],["No religioso",77]],"spanishFrom":[["Galicia",145],["Madrid",88],["Cataluña",46],["Castilla León",38],["Andalucía",31],["Comunidad Valenciana",23],["Baleares",18],["Pais Vasco",15],["Murcia",14],["Aragón",12],["Castilla la Mancha",12],["Extremadura",8],["Navarra",8],["Canarias",6],["Cantabria",5],["Asturias",5],["La Rioja",3],["Otra",1]],"byCountry":[["España",478],["Alemania",62],["Francia",41],["Portugal",27],["Italia",25],["Suiza",16],["Brasil",14],["Canadá",14],["Estados Unidos",12],["Reino Unido",10],["Argentina",10],["Japón",8],["Austria",8],["Irlanda",7],["Belgica",6],["Corea",6],["Holanda",6],["Polonia",5],["Dinamarca",5],["República Checa",4],["Australia",4],["Colombia",3],["Nueva Zelanda",3],["Venezuela",3],["México",2],["Suecia",2],["Sudáfrica",2],["Bulgaria",2],["Eslovaquia",1],["Congo",1],["Hungría",1],["Eslovenia",1],["Lituania",1],["Rumania",1],["Noruega",1],["China",1],["Andorra",1],["Luxemburgo",1]],"professions":[["Empleados",140],["Estudiantes",128],["Liberales",111],["Tecnicos",104],["Obreros",95],["Profesores",57],["Funcionarios",43],["Parados",35],["Jubilados",28],["Amas de Casa",21],["Artistas",13],["Directivos",7],["Agricultores",6],["Sacerdotes",5],["Deportistas",3]],"startingCities":[["Sarria",133],["Cebreiro",92],["S. Jean P. Port",77],["Roncesvalles",62],["León",34],["Ribadeo",30],["Astorga",29],["Vilafranca",27],["Ponferrada",24],["Tui",20],["Burgos",19],["Ourense",17],["Ferrol",17],["Valença do Minho",15],["Sevilla",15],["Le Puy",15],["Pamplona",14],["Francia",14],["Oviedo - C.P.",11],["Suiza",9],["Logroño",9],["Alemania",8],["Somport",7],["Ortigueira",6],["Resto C. León",6],["Oporto",5],["Lugo - C.P.",5],["Arles",5],["Puebla de Sanabria",4],["Muxia",3],["Bélgica",3],["Gudiña",3],["Resto Asturias",3],["Vega de Valcarce",3],["Cataluña",3],["Bilbao",3],["París",3],["Resto Cantabria",3],["Oviedo",3],["Irún",3],["Francia",2],["Neda",2],["Vezelay",2],["Triacastela",2],["Frómista",2],["Ponte de Lima",2],["Madrid - C.F.",2],["Lourdes",2],["Austria",2],["Sto. Domingo de la Calzada",1],["Vilalba",1],["Nájera",1],["Malaga",1],["Jerusalem",1],["Avilés",1],["Sahagún",1],["Puente la Reina",1],["Salamanca",1],["Cast. la Mancha",1],["Republica Checa",1],["Resto Portugal",1],["Mérida",1],["Holanda",1],["Jaca",1],["Fonsagrada",1]],"startingRegions":[["Lugo",264],["France",127],["León",124],["Navarra",77],["A Coruña",28],["Portugal",23],["Ourense",20],["Pontevedra",20],["Burgos",19],["Asturias",18],["Sevilla",15],["La Rioja",11],["Switzerland",9],["Germany",8],["Zamora",4],["Belgium",3],["Barcelona",3],["Vizcaya",3],["Cantabria",3],["Gipuzkoa",3],["Austria",2],["Madrid",2],["Palencia",2],["Israel",1],["Salamanca",1],["Málaga",1],["Czech Republic",1],["Badajoz",1],["Holland",1],["Huesca",1],["Albacete",1]],"caminos":[["Frances-Camino de",617],["Norte-Camino de",50],["Portugues-Camino",43],["Via de la Plata",42],["Ingles-Camino",25],["Primitivo-Camino",16],["Muxia-Finisterre",3]]},"all":{"year":"2007","month":"","pilgrims":114026,"gender":[["Hombre",66780],["Mujer",47246]],"transport":[["Pie",93954],["Bicicleta",19701],["Caballo",364],["Silla de ruedas",7]],"age":[["30 - 60",64569],["< 30",34561],["> 60",14896]],"motivation":[["Religioso y otros",60944],["Religioso",43581],["No religioso",9501]],"spanishFrom":[["Madrid",9838],["Cataluña",7835],["Andalucía",7420],["Comunidad Valenciana",6668],["Pais Vasco",3993],["Galicia",3933],["Castilla León",3904],["Castilla la Mancha",2138],["Extremadura",1575],["Aragón",1435],["Murcia",1359],["Canarias",1159],["Asturias",1059],["Baleares",962],["Navarra",927],["Cantabria",385],["La Rioja",342],["Otra",275],["Ceuta",78],["Melilla",41]],"byCountry":[["España",55326],["Alemania",13837],["Italia",10275],["Francia",6982],["Portugal",4001],["Estados Unidos",2229],["Canadá",1850],["Reino Unido",1696],["Austria",1686],["Holanda",1655],["Brasil",1395],["Belgica",1332],["Suiza",1136],["Irlanda",1090],["Polonia",867],["Dinamarca",835],["Australia",785],["Noruega",628],["Hungría",625],["Suecia",588],["República Checa",560],["México",514],["Finlandia",427],["Corea",423],["Argentina",377],["Japón",327],["Eslovaquia",269],["Sudáfrica",262],["Nueva Zelanda",195],["Colombia",184],["Eslovenia",167],["Venezuela",162],["Estonia",107],["Chile",89],["Uruguay",81],["Andorra",79],["Rumania",75],["Israel",64],["Perú",56],["Ecuador",56],["Luxemburgo",53],["Rusia",50],["Puerto Rico",47],["Costa Rica",36],["Ucrania",33],["Croacia",31],["Bulgaria",30],["Lituania",30],["Bolivia",27],["Islandia",24],["Cuba",21],["Marruecos",20],["Guatemala",20],["El Salvador",20],["Rep. Dominicana",20],["China",19],["Filipinas",16],["Malta",15],["Grecia",14],["Letonia",13],["Irán",10],["Líbano",10],["India",10],["Taiwán",8],["Singapur",7],["Liechtensein",7],["Panamá",7],["Islas Feroe",6],["Bosnia",5],["Tailandia",5],["Nicaragua",5],["Paraguay",5],["Honduras",4],["Cabo Verde",4],["Malasia",4],["Kenya",4],["Serbia",4],["Zimbabwe",3],["Indonesia",3],["Macedonia",3],["Santo Tomé y Príncipe",3],["Nigeria",2],["Mónaco",2],["Sri Lanka",2],["Malawi",2],["Turquía",2],["Moldavia",2],["Egipto",2],["Namibia",2],["Fiji",2],["Argelia",2],["Etiopía",2],["Jordania",2],["Omán",1],["Mauricio",1],["Dominica",1],["Trinidad y Tobago",1],["Guinea",1],["Sierra Leona",1],["Bermudas",1],["Martinica",1],["Bielorrusia",1],["Angola",1],["Mauritania",1],["Costa de Marfil",1],["Albania",1],["Irak",1],["Vietnam",1],["Botswana",1],["Laos",1],["I. Reunión",1],["San Marino",1],["Vanuatu",1],["Senegal",1],["Arabia Saudita",1],["Pakistán",1],["Armenia",1],["Granada",1],["Kirguistán",1],["Jamaica",1],["Congo",1]],"professions":[["Estudiantes",21797],["Empleados",19056],["Tecnicos",14648],["Jubilados",13880],["Liberales",13442],["Profesores",9381],["Obreros",7626],["Funcionarios",5467],["Amas de Casa",3314],["Parados",1675],["Directivos",1269],["Artistas",936],["Sacerdotes",837],["Agricultores",321],["Marinos",131],["Religiosas",125],["Deportistas",121]],"startingCities":[["Sarria",18969],["S. Jean P. Port",14040],["Roncesvalles",9001],["León",7691],["Cebreiro",7367],["Ponferrada",6050],["Astorga",4531],["Pamplona",3876],["Burgos",2983],["Le Puy",2964],["Tui",2760],["Vilafranca",2110],["Francia",1870],["Oporto",1763],["Oviedo - C.P.",1647],["Valença do Minho",1454],["Sevilla",1432],["Triacastela",1312],["Resto Portugal",1196],["Irún",1096],["Ourense",1053],["Ferrol",910],["Somport",898],["Resto C. León",893],["Logroño",885],["Samos",813],["Alemania",769],["Vilalba",693],["Ribadeo",661],["Holanda",637],["Resto Asturias",551],["Bilbao",483],["Santander",475],["Lugo - C.P.",397],["Ponte de Lima",375],["Sahagún",354],["Resto País Vasco",353],["Suiza",323],["Frómista",295],["Jaca",293],["Bélgica",284],["Rabanal del Camino",278],["Salamanca",261],["Mérida",259],["Mondoñedo",239],["Vega de Valcarce",230],["Madrid - C.F.",222],["Lisboa",219],["Avilés",217],["Puente la Reina",203],["Lourdes",198],["Fonsagrada - C.P.",196],["Braga",193],["Oviedo",181],["Zamora",180],["Hendaya",177],["Gijón",172],["Arles",167],["Neda",167],["Vezelay",160],["Sto. Domingo de la Calzada",157],["Carrión de los Condes",144],["Resto Cantabria",140],["Gudiña",136],["Chaves-Portugal",134],["R.Pais Vasco",130],["Hospital de Orbigo",121],["Puebla de Sanabria",119],["Resto C. León - V.P.",114],["Cataluña",112],["Resto Asturias - C.P.",112],["Laza",107],["Muxia",103],["Canfranc",102],["Grandas de Salime - C.P.",102],["Estella",99],["Vigo",95],["Austria",79],["Finisterra",76],["Lourenzá",71],["Zaragoza",69],["Valencia",67],["París",63],["",63],["Grandas de Salime",62],["Verín",62],["Cáceres",59],["Barcelona",55],["Resto Andalucia",54],["Porriño",53],["Italia",51],["Tineo - C.P.",45],["Nájera",40],["Tineo",38],["Rábade",33],["Com. Valenciana",31],["Allariz",31],["Cadavo",30],["Castrojeriz",29],["Resto de Extremadura",27],["Xunqueira de Ambia",26],["Madrid",25],["Fonsagrada",22],["La Mesa",22],["Murcia",20],["Granada",19],["Córdoba",18],["Dinamarca",15],["Castilla la Mancha",15],["Reino Unido",13],["Valcarlos",13],["Huelva",13],["Castilla La Mancha",13],["Malaga",12],["Valladolid",12],["Grado",11],["Roma",9],["Republica Checa",9],["Benavente",8],["Badajoz",8],["San Juan de Ortega",8],["Luxemburgo",7],["Fonfría",7],["Salas",7],["Granja de Moreruela",7],["Ortigueira",7],["Cast. la Mancha",6],["Resto Europa",5],["Polonia",5],["Irlanda",3],["Inglaterra",3],["La Bañeza",2],["Petín",2],["A Guarda",2],["Guntín",2],["Jerusalem",2],["Leyre",1],["Vegadeo",1],["Betanzos",1],["Andorra",1],["Hungría",1],["Grecia",1],["Egipto",1]],"startingRegions":[["Lugo",30777],["León",22374],["France",20537],["Navarra",13193],["Portugal",5200],["Asturias",3168],["Burgos",3020],["Pontevedra",2910],["Gipuzkoa",1579],["Sevilla",1486],["Ourense",1417],["A Coruña",1266],["La Rioja",1082],["Germany",769],["Holland",637],["Cantabria",615],["Vizcaya",483],["Palencia",439],["Huesca",395],["Switzerland",323],["Zamora",314],["Badajoz",294],["Belgium",284],["Salamanca",261],["Madrid",247],["Barcelona",167],["Porgugal",134],["Valencia",98],["Austria",79],["Zaragoza",69],["City&nbsp;Was Blank",63],["Italy",60],["Cáceres",59],["Huelva",46],["Albacete",34],["Murcia",20],["Granada",19],["Córdoba",18],["UK",16],["Denmark",15],["Málaga",12],["Valladolid",12],["Czech Republic",9],["Luxembourg",7],["Europe Other",5],["Poland",5],["Ireland",3],["Israel",2],["Greece",1],["Egypt",1],["Andorra",1],["Hungary",1]],"caminos":[["Frances-Camino de",91872],["Portugues-Camino",8110],["Norte-Camino de",5817],["Via de la Plata",4193],["Primitivo-Camino",2569],["Ingles-Camino",1085],["Otros caminos",201],["Muxia-Finisterre",179]]}},"2008":{"1":{"year":"2008","month":"1","pilgrims":306,"gender":[["Hombre",211],["Mujer",95]],"transport":[["Pie",288],["Bicicleta",18]],"age":[["30 - 60",188],["< 30",99],["> 60",19]],"motivation":[["Religioso y otros",173],["Religioso",94],["No religioso",39]],"spanishFrom":[["Madrid",44],["Galicia",19],["Cataluña",19],["Comunidad Valenciana",15],["Castilla León",13],["Pais Vasco",11],["La Rioja",7],["Andalucía",7],["Aragón",5],["Castilla la Mancha",4],["Canarias",4],["Cantabria",3],["Baleares",3],["Asturias",2],["Murcia",2],["Otra",1]],"byCountry":[["España",159],["Alemania",34],["Italia",15],["Brasil",13],["Corea",11],["Portugal",8],["Estados Unidos",8],["Austria",7],["Holanda",6],["Francia",6],["Suiza",5],["Hungría",5],["Finlandia",3],["Reino Unido",3],["Australia",3],["Belgica",3],["Japón",3],["México",2],["Irlanda",2],["Costa Rica",2],["Eslovaquia",1],["Canadá",1],["Rusia",1],["Indonesia",1],["Eslovenia",1],["Argentina",1],["República Checa",1],["Perú",1]],"professions":[["Estudiantes",62],["Liberales",43],["Empleados",38],["Tecnicos",32],["Profesores",28],["Funcionarios",27],["Obreros",24],["Parados",17],["Jubilados",16],["Amas de Casa",6],["Artistas",6],["Sacerdotes",3],["Agricultores",2],["Deportistas",1],["Directivos",1]],"startingCities":[["Sarria",56],["Cebreiro",26],["Ponferrada",25],["S. Jean P. Port",20],["Astorga",18],["León",18],["Roncesvalles",18],["Burgos",12],["Oporto",11],["Pamplona",10],["Tui",7],["Sevilla",6],["Francia",4],["Resto Portugal",4],["Ribadeo",4],["Vilafranca",4],["Oviedo - C.P.",4],["Le Puy",3],["Alemania",3],["Salamanca",3],["Vega de Valcarce",3],["Carrión de los Condes",2],["Braga",2],["Muxia",2],["Ponte de Lima",2],["Somport",2],["Triacastela",2],["Valença do Minho",2],["Avilés",2],["Cáceres",2],["Vezelay",2],["Mérida",2],["Com. Valenciana",2],["Xunqueira de Ambia",2],["Sahagún",2],["Ourense",2],["Santander",2],["Austria",2],["Grandas de Salime",1],["Resto Cantabria",1],["Irún",1],["Madrid - C.F.",1],["Zaragoza",1],["Cataluña",1],["Ferrol",1],["Suiza",1],["Barcelona",1],["París",1],["Gudiña",1],["Lourdes",1],["Logroño",1]],"startingRegions":[["Lugo",88],["León",70],["France",33],["Navarra",28],["Portugal",21],["Burgos",12],["Pontevedra",7],["Asturias",7],["Sevilla",6],["Ourense",5],["Salamanca",3],["Cantabria",3],["A Coruña",3],["Germany",3],["Badajoz",2],["Cáceres",2],["Palencia",2],["Austria",2],["Valencia",2],["Barcelona",2],["Madrid",1],["Zaragoza",1],["La Rioja",1],["Switzerland",1],["Gipuzkoa",1]],"caminos":[["Frances-Camino de",240],["Portugues-Camino",28],["Via de la Plata",18],["Norte-Camino de",11],["Primitivo-Camino",4],["Otros caminos",2],["Muxia-Finisterre",2],["Ingles-Camino",1]]},"2":{"year":"2008","month":"2","pilgrims":703,"gender":[["Hombre",486],["Mujer",217]],"transport":[["Pie",657],["Bicicleta",46]],"age":[["< 30",350],["30 - 60",331],["> 60",22]],"motivation":[["Religioso y otros",441],["Religioso",218],["No religioso",44]],"spanishFrom":[["Madrid",85],["Andalucía",70],["Cataluña",38],["Extremadura",30],["Canarias",29],["Baleares",22],["Galicia",19],["Comunidad Valenciana",14],["Castilla León",10],["Pais Vasco",8],["Asturias",6],["Castilla la Mancha",5],["La Rioja",4],["Cantabria",2],["Murcia",1],["Navarra",1],["Ceuta",1]],"byCountry":[["España",345],["Portugal",137],["Alemania",40],["Francia",37],["Italia",20],["Brasil",14],["Austria",11],["Belgica",10],["Corea",9],["Reino Unido",8],["Ecuador",7],["Canadá",6],["Japón",6],["Holanda",5],["Eslovaquia",5],["México",5],["Estados Unidos",5],["Suiza",4],["Australia",4],["Bolivia",3],["Colombia",2],["Irlanda",2],["China",2],["Venezuela",2],["Argentina",2],["Chile",2],["Hungría",2],["Rumania",1],["Lituania",1],["Uruguay",1],["Perú",1],["Guinea",1],["Puerto Rico",1],["Paraguay",1],["Rep. Dominicana",1]],"professions":[["Estudiantes",267],["Liberales",82],["Empleados",79],["Obreros",65],["Profesores",56],["Tecnicos",51],["Funcionarios",36],["Jubilados",29],["Parados",12],["Amas de Casa",9],["Artistas",6],["Agricultores",5],["Directivos",3],["Sacerdotes",3]],"startingCities":[["Cebreiro",146],["Sarria",125],["Tui",62],["S. Jean P. Port",50],["Roncesvalles",37],["Triacastela",34],["León",28],["Ponferrada",25],["Valença do Minho",18],["Vilafranca",15],["Astorga",15],["Burgos",14],["Sevilla",13],["Pamplona",13],["Francia",8],["Oviedo - C.P.",8],["Oporto",7],["Logroño",6],["Mérida",5],["Somport",5],["Resto Portugal",5],["Rabanal del Camino",4],["Jaca",4],["Barcelona",4],["Xunqueira de Ambia",4],["Resto Asturias",4],["Zamora",3],["Lourdes",3],["Lisboa",3],["Vilalba",3],["Ourense",2],["Braga",2],["Bilbao",2],["Ferrol",2],["Neda",2],["Sto. Domingo de la Calzada",2],["Irún",2],["Lugo - C.P.",2],["Le Puy",2],["R.Pais Vasco",1],["Frómista",1],["Resto C. León",1],["Cataluña",1],["Madrid - C.F.",1],["Roma",1],["Carrión de los Condes",1],["Alemania",1],["Granja de Moreruela",1],["Hendaya",1],["Sahagún",1],["Puente la Reina",1],["Samos",1],["Holanda",1]],"startingRegions":[["Lugo",311],["León",89],["France",69],["Pontevedra",62],["Navarra",51],["Portugal",35],["Burgos",14],["Sevilla",13],["Asturias",12],["La Rioja",8],["Ourense",6],["Badajoz",5],["Barcelona",5],["Huesca",4],["Zamora",4],["A Coruña",4],["Gipuzkoa",3],["Vizcaya",2],["Palencia",2],["Holland",1],["Madrid",1],["Italy",1],["Germany",1]],"caminos":[["Frances-Camino de",552],["Portugues-Camino",97],["Via de la Plata",28],["Norte-Camino de",12],["Primitivo-Camino",10],["Ingles-Camino",4]]},"3":{"year":"2008","month":"3","pilgrims":5328,"gender":[["Hombre",3024],["Mujer",2304]],"transport":[["Pie",4666],["Bicicleta",628],["Caballo",34]],"age":[["30 - 60",2732],["< 30",2313],["> 60",283]],"motivation":[["Religioso y otros",2999],["Religioso",1750],["No religioso",579]],"spanishFrom":[["Madrid",723],["Comunidad Valenciana",467],["Galicia",455],["Cataluña",410],["Andalucía",335],["Pais Vasco",326],["Castilla León",185],["Castilla la Mancha",156],["Baleares",123],["Canarias",97],["Asturias",96],["Extremadura",69],["Aragón",67],["Murcia",42],["Navarra",38],["La Rioja",21],["Cantabria",14],["Otra",7],["Ceuta",4]],"byCountry":[["España",3635],["Portugal",485],["Alemania",426],["Estados Unidos",125],["Austria",66],["Irlanda",61],["Italia",61],["Brasil",48],["Francia",40],["Reino Unido",38],["Canadá",32],["Suiza",22],["Venezuela",21],["México",19],["Suecia",18],["Argentina",17],["Belgica",16],["Corea",15],["Noruega",14],["Holanda",14],["Japón",14],["Colombia",12],["Dinamarca",12],["Australia",11],["Hungría",11],["Polonia",11],["Perú",11],["Letonia",10],["Ecuador",10],["Sudáfrica",8],["Uruguay",5],["Finlandia",4],["Andorra",4],["República Checa",3],["Irán",3],["Eslovaquia",3],["Chile",2],["Cuba",2],["Rep. Dominicana",2],["Croacia",2],["China",2],["El Salvador",2],["Argelia",1],["Ucrania",1],["Estonia",1],["Lituania",1],["Bolivia",1],["Filipinas",1],["Ghana",1],["Camerún",1],["Puerto Rico",1],["Rusia",1]],"professions":[["Estudiantes",1607],["Empleados",909],["Tecnicos",643],["Liberales",534],["Profesores",483],["Obreros",449],["Jubilados",206],["Funcionarios",164],["Amas de Casa",147],["Parados",82],["Directivos",36],["Artistas",23],["Sacerdotes",18],["Agricultores",17],["Marinos",6],["Religiosas",3],["Deportistas",1]],"startingCities":[["Sarria",1566],["Cebreiro",460],["Roncesvalles",307],["Ponferrada",254],["Tui",227],["León",194],["S. Jean P. Port",173],["Astorga",168],["Valença do Minho",154],["Ourense",137],["Lugo - C.P.",131],["Vilafranca",126],["Pamplona",103],["Burgos",91],["Irún",89],["Samos",85],["Resto Portugal",83],["Oporto",72],["Vilalba",70],["Ferrol",62],["Sevilla",52],["Ponte de Lima",44],["Resto C. León",42],["Triacastela",40],["Castilla la Mancha",38],["Finisterra",35],["Oviedo - C.P.",32],["Logroño",28],["Grandas de Salime - C.P.",25],["Somport",22],["Braga",22],["Salamanca",21],["Sto. Domingo de la Calzada",21],["Chaves-Portugal",17],["Neda",16],["Le Puy",15],["Ribadeo",15],["Resto Asturias",14],["Castilla La Mancha",14],["Lourenzá",14],["Resto País Vasco",13],["Francia",13],["Mérida",13],["Cataluña",12],["Gijón",11],["Vigo",11],["Sahagún",9],["Santander",9],["Puebla de Sanabria",8],["Oviedo",8],["Zamora",8],["Avilés",7],["Frómista",7],["Jaca",6],["Puente la Reina",6],["Mondoñedo",6],["Xunqueira de Ambia",5],["Bilbao",5],["Hospital de Orbigo",5],["Alemania",5],["Lisboa",5],["Madrid - C.F.",5],["Gudiña",5],["Rabanal del Camino",4],["Zaragoza",4],["Resto Cantabria",3],["Resto C. León - V.P.",3],["Vezelay",3],["Porriño",3],["Estella",3],["Cáceres",3],["Salas",3],["Nájera",2],["Cadavo",2],["Lourdes",2],["Vega de Valcarce",2],["Muxia",2],["Holanda",2],["Castrojeriz",2],["Grandas de Salime",2],["Fonsagrada - C.P.",2],["Tineo - C.P.",2],["Valencia",2],["R.Pais Vasco",2],["Cataluña",1],["Carrión de los Condes",1],["Allariz",1],["Resto de Extremadura",1],["Francia",1],["Huelva",1],["Polonia",1],["Barcelona",1],["Hendaya",1],["Madrid",1],["Valladolid",1],["Malaga",1],["Laza",1],["Com. Valenciana",1]],"startingRegions":[["Lugo",2391],["León",807],["Navarra",419],["Portugal",380],["Pontevedra",241],["France",230],["Ourense",149],["A Coruña",115],["Gipuzkoa",104],["Asturias",104],["Burgos",93],["Sevilla",52],["Albacete",52],["La Rioja",51],["Salamanca",21],["Porgugal",17],["Zamora",16],["Barcelona",14],["Badajoz",14],["Cantabria",12],["Palencia",8],["Huesca",6],["Madrid",6],["Vizcaya",5],["Germany",5],["Zaragoza",4],["Cáceres",3],["Valencia",3],["Holland",2],["Huelva",1],["Poland",1],["Valladolid",1],["Málaga",1]],"caminos":[["Frances-Camino de",3793],["Portugues-Camino",621],["Via de la Plata",293],["Norte-Camino de",268],["Primitivo-Camino",197],["Ingles-Camino",78],["Otros caminos",41],["Muxia-Finisterre",37]]},"4":{"year":"2008","month":"4","pilgrims":5655,"gender":[["Hombre",3394],["Mujer",2261]],"transport":[["Pie",4822],["Bicicleta",826],["Caballo",6],["Silla de ruedas",1]],"age":[["30 - 60",3097],["< 30",1463],["> 60",1095]],"motivation":[["Religioso y otros",3036],["Religioso",2182],["No religioso",437]],"spanishFrom":[["Madrid",415],["Andalucía",288],["Cataluña",250],["Castilla León",218],["Comunidad Valenciana",178],["Pais Vasco",129],["Galicia",122],["Castilla la Mancha",90],["Canarias",76],["Baleares",59],["Extremadura",51],["Asturias",47],["Ceuta",29],["Murcia",29],["Navarra",26],["Aragón",19],["Otra",13],["Cantabria",9],["La Rioja",4]],"byCountry":[["España",2052],["Alemania",985],["Portugal",434],["Francia",414],["Italia",246],["Austria",188],["Reino Unido",139],["Irlanda",113],["Holanda",101],["Estados Unidos",93],["Canadá",92],["Australia",75],["Finlandia",71],["Suiza",62],["Corea",60],["Belgica",59],["Noruega",56],["Suecia",50],["Brasil",49],["Dinamarca",47],["México",30],["Polonia",23],["Venezuela",21],["República Checa",19],["Hungría",19],["Argentina",16],["Japón",15],["Sudáfrica",14],["Estonia",14],["Luxemburgo",10],["Rusia",10],["Chile",9],["Eslovaquia",8],["Nueva Zelanda",8],["Colombia",5],["Filipinas",4],["Ecuador",4],["Rep. Dominicana",3],["Lituania",3],["España",3],["Uruguay",3],["Perú",3],["Guatemala",3],["Chipre",2],["Andorra",2],["Cuba",1],["Argelia",1],["Ucrania",1],["Bolivia",1],["Bulgaria",1],["Grecia",1],["Singapur",1],["Turquía",1],["Eslovenia",1],["Jordania",1],["Rumania",1]],"professions":[["Empleados",992],["Estudiantes",991],["Jubilados",982],["Liberales",708],["Tecnicos",630],["Obreros",376],["Profesores",320],["Funcionarios",224],["Amas de Casa",166],["Parados",103],["Directivos",53],["Sacerdotes",39],["Artistas",32],["Agricultores",16],["Marinos",15],["Religiosas",5],["Deportistas",3]],"startingCities":[["Sarria",1339],["S. Jean P. Port",563],["León",425],["Roncesvalles",342],["Oporto",283],["Cebreiro",222],["Pamplona",218],["Ponferrada",212],["Astorga",182],["Sevilla",161],["Resto Portugal",143],["Le Puy",142],["Burgos",130],["Tui",123],["Valença do Minho",99],["Francia",95],["Vilafranca",73],["Triacastela",64],["Neda",47],["Chaves-Portugal",42],["Samos",41],["Resto C. León",40],["Oviedo - C.P.",39],["Somport",31],["Ferrol",30],["Madrid - C.F.",26],["Braga",26],["Logroño",24],["Irún",23],["Sahagún",22],["Ourense",21],["Salamanca",21],["Alemania",21],["Ribadeo",20],["Bilbao",16],["Lisboa",16],["Jaca",16],["Avilés",15],["Arles",13],["Xunqueira de Ambia",13],["Holanda",12],["Mérida",11],["Carrión de los Condes",11],["Resto Cantabria",11],["Castrojeriz",10],["Suiza",10],["Puente la Reina",10],["Lugo - C.P.",10],["Resto Asturias",9],["Hospital de Orbigo",9],["Lourdes",9],["Santander",9],["Frómista",8],["Cataluña",7],["Sto. Domingo de la Calzada",7],["R.Pais Vasco",7],["Ponte de Lima",7],["Francia",7],["Gijón",6],["Resto Andalucia",6],["Hendaya",5],["Bélgica",5],["Resto País Vasco",5],["Vilalba",5],["Barcelona",5],["Tineo - C.P.",4],["Muxia",4],["París",4],["Fonsagrada - C.P.",4],["Vezelay",4],["Zamora",4],["Malaga",4],["Granja de Moreruela",4],["Puebla de Sanabria",3],["Valcarlos",3],["Roma",3],["Gudiña",3],["Valencia",2],["Cáceres",2],["Resto C. León - V.P.",2],["Vigo",2],["Valladolid",2],["Grandas de Salime - C.P.",2],["Zaragoza",2],["Cataluña",2],["Finisterra",2],["Cadavo",2],["Resto de Extremadura",1],["Verín",1],["Austria",1],["Oviedo",1],["Castilla la Mancha",1],["Canfranc",1],["Estella",1],["Irlanda",1],["Porriño",1],["Inglaterra",1],["Resto Asturias - C.P.",1]],"startingRegions":[["Lugo",1707],["León",965],["France",873],["Navarra",574],["Portugal",574],["Sevilla",167],["Burgos",140],["Pontevedra",126],["A Coruña",83],["Asturias",77],["Porgugal",42],["Ourense",38],["Gipuzkoa",35],["La Rioja",31],["Madrid",26],["Germany",21],["Salamanca",21],["Cantabria",20],["Palencia",19],["Huesca",17],["Vizcaya",16],["Barcelona",14],["Badajoz",12],["Holland",12],["Zamora",11],["Switzerland",10],["Belgium",5],["Málaga",4],["Italy",3],["Valencia",2],["Cáceres",2],["Valladolid",2],["Zaragoza",2],["Austria",1],["Albacete",1],["Ireland",1],["UK",1]],"caminos":[["Frances-Camino de",4372],["Portugues-Camino",700],["Via de la Plata",301],["Norte-Camino de",132],["Ingles-Camino",77],["Primitivo-Camino",62],["Muxia-Finisterre",6],["Otros caminos",5]]},"5":{"year":"2008","month":"5","pilgrims":15988,"gender":[["Hombre",9498],["Mujer",6490]],"transport":[["Pie",12792],["Bicicleta",3144],["Caballo",51],["Silla de ruedas",1]],"age":[["30 - 60",10090],["> 60",3817],["< 30",2081]],"motivation":[["Religioso y otros",7917],["Religioso",6904],["No religioso",1167]],"spanishFrom":[["Madrid",815],["Andalucía",749],["Cataluña",745],["Comunidad Valenciana",411],["Pais Vasco",359],["Galicia",352],["Castilla León",345],["Canarias",174],["Castilla la Mancha",166],["Aragón",148],["Asturias",104],["Navarra",86],["Baleares",86],["Extremadura",82],["Cantabria",70],["Murcia",63],["Otra",28],["La Rioja",24],["Ceuta",6],["Melilla",3]],"byCountry":[["España",4816],["Alemania",3655],["Francia",1165],["Italia",1018],["Portugal",765],["Holanda",454],["Austria",405],["Canadá",384],["Estados Unidos",344],["Reino Unido",301],["Irlanda",277],["Brasil",261],["Suiza",246],["Finlandia",227],["Australia",198],["Suecia",189],["Belgica",159],["Dinamarca",147],["Corea",139],["Noruega",119],["Polonia",89],["México",70],["Hungría",68],["República Checa",68],["Eslovenia",64],["Sudáfrica",42],["Argentina",34],["Japón",32],["Luxemburgo",19],["Andorra",18],["Eslovaquia",18],["Nueva Zelanda",17],["Rusia",16],["Venezuela",15],["Estonia",14],["Lituania",13],["España",13],["Croacia",11],["Colombia",9],["Ucrania",6],["Rumania",6],["Chile",6],["Perú",6],["Islandia",5],["Turquía",4],["Letonia",4],["Uruguay",4],["Bulgaria",3],["Islas Feroe",3],["Costa Rica",3],["Puerto Rico",3],["Israel",3],["Irán",2],["Líbano",2],["San Marino",2],["Ecuador",2],["Malta",2],["Guatemala",2],["Serbia",1],["Cuba",1],["El Salvador",1],["India",1],["Nepal",1],["Bolivia",1],["Bosnia",1],["Filipinas",1],["Singapur",1],["Angola",1],["Grecia",1],["Islas Vírgenes",1],["Tailandia",1],["Bielorrusia",1]],"professions":[["Jubilados",3351],["Empleados",3133],["Liberales",2368],["Tecnicos",2301],["Obreros",1022],["Estudiantes",934],["Funcionarios",811],["Profesores",697],["Amas de Casa",565],["Parados",266],["Directivos",263],["Artistas",98],["Sacerdotes",84],["Agricultores",54],["Marinos",22],["Religiosas",12],["Deportistas",7]],"startingCities":[["S. Jean P. Port",2643],["Sarria",2154],["León",1157],["Roncesvalles",1077],["Pamplona",744],["Ponferrada",692],["Cebreiro",669],["Astorga",623],["Oporto",557],["Le Puy",503],["Burgos",477],["Sevilla",474],["Francia",307],["Resto Portugal",277],["Tui",248],["Triacastela",206],["Oviedo - C.P.",192],["Vilafranca",182],["Somport",170],["Holanda",168],["Alemania",145],["Irún",126],["Logroño",112],["Ferrol",111],["Resto C. León",98],["Samos",89],["Bilbao",85],["Ourense",79],["Salamanca",70],["Valença do Minho",66],["Ponte de Lima",59],["Sahagún",58],["Lisboa",54],["Chaves-Portugal",51],["Resto Asturias",51],["Resto País Vasco",49],["Suiza",48],["Mérida",48],["Jaca",46],["Bélgica",42],["Santander",42],["Braga",42],["Zamora",38],["Madrid - C.F.",36],["Puente la Reina",36],["Gijón",36],["Vilalba",36],["Ribadeo",31],["Rabanal del Camino",29],["Hospital de Orbigo",28],["Vegadeo",27],["Lourdes",27],["Lugo - C.P.",27],["Vezelay",26],["Frómista",25],["Arles",23],["Vega de Valcarce",22],["Hendaya",21],["Carrión de los Condes",19],["Estella",18],["Zaragoza",17],["Resto C. León - V.P.",17],["Francia",16],["Puebla de Sanabria",15],["Sto. Domingo de la Calzada",15],["Castrojeriz",15],["Irlanda",14],["Resto Andalucia",14],["Com. Valenciana",13],["Valencia",13],["Avilés",13],["París",12],["Resto Asturias - C.P.",12],["R.Pais Vasco",12],["Austria",11],["Malaga",11],["Gudiña",10],["La Mesa",10],["Cataluña",9],["Cáceres",9],["Resto Cantabria",9],["Canfranc",9],["Tineo - C.P.",7],["Nájera",7],["Granja de Moreruela",6],["Resto de Extremadura",6],["Oviedo",6],["Italia",6],["Muxia",6],["Granada",5],["Barcelona",5],["Laza",5],["Valladolid",4],["Madrid",4],["Mondoñedo",4],["Salas",3],["Grandas de Salime - C.P.",3],["",3],["Huelva",3],["Roma",3],["Cadavo",3],["Irlanda",2],["Neda",2],["Luxemburgo",2],["Lourenzá",2],["Finisterra",2],["Tineo",2],["Xunqueira de Ambia",2],["Castilla la Mancha",1],["Dinamarca",1],["Resto Europa",1],["Castilla La Mancha",1],["Allariz",1],["Pontedeume",1],["Verín",1],["Republica Checa",1],["Grado",1],["Paradela",1],["Valcarlos",1],["Cataluña",1],["Badajoz",1]],"startingRegions":[["France",3748],["Lugo",3222],["León",2906],["Navarra",1876],["Portugal",1055],["Burgos",492],["Sevilla",488],["Asturias",363],["Pontevedra",248],["Gipuzkoa",187],["Holland",168],["Germany",145],["La Rioja",134],["A Coruña",122],["Ourense",98],["Vizcaya",85],["Salamanca",70],["Zamora",59],["Badajoz",55],["Huesca",55],["Porgugal",51],["Cantabria",51],["Switzerland",48],["Palencia",44],["Belgium",42],["Madrid",40],["Valencia",26],["Zaragoza",17],["Ireland",16],["Barcelona",15],["Austria",11],["Málaga",11],["Cáceres",9],["Italy",9],["Granada",5],["Valladolid",4],["City&nbsp;Was Blank",3],["Huelva",3],["Luxembourg",2],["Albacete",2],["Denmark",1],["Europe Other",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",12829],["Portugues-Camino",1303],["Via de la Plata",875],["Norte-Camino de",556],["Primitivo-Camino",258],["Ingles-Camino",128],["Otros caminos",28],["Muxia-Finisterre",8],["Otros caminos",3]]},"6":{"year":"2008","month":"6","pilgrims":15860,"gender":[["Hombre",9340],["Mujer",6520]],"transport":[["Pie",12541],["Bicicleta",3285],["Caballo",31],["Silla de ruedas",3]],"age":[["30 - 60",9668],["> 60",3720],["< 30",2472]],"motivation":[["Religioso y otros",7846],["Religioso",6720],["No religioso",1294]],"spanishFrom":[["Cataluña",960],["Madrid",953],["Comunidad Valenciana",609],["Andalucía",539],["Pais Vasco",490],["Galicia",416],["Castilla León",403],["Castilla la Mancha",215],["Asturias",173],["Murcia",172],["Aragón",143],["Extremadura",122],["Canarias",121],["Navarra",97],["La Rioja",54],["Baleares",53],["Cantabria",33],["Otra",15],["Ceuta",7],["Melilla",6]],"byCountry":[["España",5581],["Alemania",2879],["Italia",1464],["Francia",1175],["Portugal",456],["Estados Unidos",442],["Holanda",424],["Canadá",335],["Austria",325],["Brasil",251],["Reino Unido",233],["Irlanda",226],["Belgica",207],["Suecia",194],["Australia",182],["Suiza",171],["Noruega",128],["Dinamarca",127],["Finlandia",111],["Corea",109],["Hungría",79],["Polonia",74],["República Checa",74],["Sudáfrica",72],["México",68],["Japón",62],["Argentina",57],["Eslovenia",34],["Colombia",32],["Nueva Zelanda",30],["España",24],["Guatemala",21],["Islandia",17],["Eslovaquia",17],["Venezuela",14],["Chile",13],["Puerto Rico",11],["Costa Rica",11],["Rumania",10],["Israel",9],["Andorra",9],["Rusia",9],["Lituania",8],["Croacia",8],["Uruguay",8],["Perú",7],["Ecuador",5],["Ucrania",5],["Estonia",4],["India",4],["Paraguay",3],["Grecia",3],["Bolivia",3],["Singapur",3],["Letonia",2],["Turquía",2],["Vietnam",2],["Bulgaria",2],["Marruecos",2],["Luxemburgo",2],["Cuba",1],["Armenia",1],["Kazajistán",1],["El Salvador",1],["Sri Lanka",1],["Taiwán",1],["Irán",1],["Filipinas",1],["China",1],["Líbano",1],["Tailandia",1]],"professions":[["Jubilados",3498],["Empleados",2890],["Liberales",2125],["Tecnicos",1886],["Estudiantes",1387],["Obreros",1035],["Funcionarios",971],["Profesores",691],["Amas de Casa",620],["Parados",299],["Directivos",182],["Artistas",111],["Sacerdotes",79],["Agricultores",46],["Religiosas",14],["Deportistas",13],["Marinos",13]],"startingCities":[["S. Jean P. Port",3078],["Sarria",1835],["Roncesvalles",1447],["León",1112],["Cebreiro",811],["Pamplona",789],["Ponferrada",587],["Le Puy",544],["Astorga",470],["Burgos",435],["Francia",380],["Sevilla",321],["Oporto",281],["Tui",265],["Holanda",211],["Vilafranca",203],["Irún",201],["Somport",182],["Oviedo - C.P.",152],["Alemania",132],["Resto Portugal",129],["Valença do Minho",112],["Samos",105],["Logroño",98],["Resto C. León",97],["Triacastela",95],["Ribadeo",85],["Ferrol",75],["Avilés",65],["Santander",63],["Jaca",57],["Suiza",56],["Ourense",56],["Bilbao",56],["Salamanca",55],["Lisboa",52],["Bélgica",49],["Resto País Vasco",47],["Resto Asturias",44],["Ponte de Lima",42],["Madrid - C.F.",39],["Oviedo",39],["Puente la Reina",35],["Sahagún",34],["Lourdes",32],["Zamora",32],["Arles",31],["Lugo - C.P.",31],["Vezelay",31],["Barcelona",29],["Mérida",29],["Frómista",29],["Grandas de Salime - C.P.",28],["Vega de Valcarce",28],["Gijón",28],["Francia",26],["Resto Asturias - C.P.",25],["Carrión de los Condes",22],["Cáceres",22],["Sto. Domingo de la Calzada",19],["Fonsagrada - C.P.",18],["Resto Cantabria",18],["Vilalba",18],["R.Pais Vasco",18],["Braga",18],["Chaves-Portugal",17],["Hendaya",17],["Rabanal del Camino",16],["Austria",15],["Estella",13],["Puebla de Sanabria",12],["Italia",11],["Grandas de Salime",10],["París",9],["Resto C. León - V.P.",9],["Nájera",9],["Cataluña",9],["Roma",9],["Canfranc",8],["Valencia",8],["Resto Andalucia",8],["Granada",8],["",8],["Gudiña",8],["Castilla la Mancha",7],["Castrojeriz",7],["Allariz",7],["Hospital de Orbigo",7],["Com. Valenciana",6],["Zaragoza",6],["Muxia",5],["Malaga",4],["Vigo",4],["Xunqueira de Ambia",4],["Reino Unido",4],["Resto de Extremadura",4],["Lourenzá",3],["Granja de Moreruela",3],["Cataluña",3],["Mondoñedo",3],["Inglaterra",2],["Finisterra",2],["Cast. la Mancha",2],["Huelva",2],["Neda",2],["Verín",2],["Irlanda",2],["Polonia",2],["Grecia",1],["Pontedeume",1],["Hungría",1],["Fonsagrada",1],["Tineo - C.P.",1],["Andorra",1],["Vegadeo",1],["Jerusalem",1],["Porriño",1],["Republica Checa",1]],"startingRegions":[["France",4330],["Lugo",3005],["León",2563],["Navarra",2284],["Portugal",634],["Burgos",442],["Asturias",393],["Sevilla",329],["Pontevedra",270],["Gipuzkoa",266],["Holland",211],["Germany",132],["La Rioja",126],["A Coruña",85],["Cantabria",81],["Ourense",77],["Huesca",65],["Switzerland",56],["Vizcaya",56],["Salamanca",55],["Palencia",51],["Belgium",49],["Zamora",47],["Barcelona",41],["Madrid",39],["Badajoz",33],["Cáceres",22],["Italy",20],["Porgugal",17],["Austria",15],["Valencia",14],["Albacete",9],["City&nbsp;Was Blank",8],["Granada",8],["Zaragoza",6],["UK",6],["Málaga",4],["Huelva",2],["Ireland",2],["Poland",2],["Greece",1],["Hungary",1],["Andorra",1],["Israel",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",13256],["Portugues-Camino",904],["Norte-Camino de",725],["Via de la Plata",603],["Primitivo-Camino",255],["Ingles-Camino",78],["Otros caminos",24],["Otros caminos",8],["Muxia-Finisterre",7]]},"7":{"year":"2008","month":"7","pilgrims":20989,"gender":[["Hombre",11546],["Mujer",9443]],"transport":[["Pie",18017],["Bicicleta",2928],["Caballo",38],["Silla de ruedas",6]],"age":[["30 - 60",10556],["< 30",8912],["> 60",1521]],"motivation":[["Religioso y otros",10626],["Religioso",8580],["No religioso",1783]],"spanishFrom":[["Madrid",2457],["Andalucía",2356],["Cataluña",1435],["Comunidad Valenciana",1420],["Pais Vasco",902],["Castilla León",840],["Castilla la Mancha",660],["Galicia",534],["Extremadura",426],["Murcia",400],["Canarias",321],["Aragón",294],["Asturias",211],["Navarra",179],["Baleares",114],["La Rioja",73],["Cantabria",67],["Otra",27],["Ceuta",8],["Melilla",5]],"byCountry":[["España",12729],["Alemania",1749],["Italia",1464],["Francia",838],["Estados Unidos",415],["Portugal",395],["México",259],["Holanda",222],["Polonia",215],["Irlanda",204],["Belgica",199],["Dinamarca",185],["Canadá",179],["Reino Unido",170],["Austria",168],["Brasil",163],["Hungría",161],["Suiza",151],["Suecia",115],["República Checa",113],["Noruega",110],["Corea",108],["Australia",75],["Eslovaquia",55],["Japón",55],["Eslovenia",48],["Sudáfrica",37],["Argentina",34],["Estonia",34],["Nueva Zelanda",33],["Colombia",27],["Finlandia",27],["España",24],["Chile",14],["Venezuela",13],["Rumania",13],["Ecuador",12],["Uruguay",12],["Lituania",11],["Israel",10],["Perú",9],["Andorra",8],["Rusia",8],["Malta",8],["Ucrania",8],["Croacia",7],["Puerto Rico",7],["Rep. Dominicana",7],["Marruecos",6],["Taiwán",5],["Bolivia",4],["Guatemala",4],["Luxemburgo",4],["Bulgaria",4],["Grecia",4],["India",3],["Moldavia",2],["Paraguay",2],["Indonesia",2],["Cuba",2],["Turquía",2],["Letonia",2],["Panamá",2],["Costa Rica",2],["Chipre",1],["Camerún",1],["Honduras",1],["Angola",1],["Islas Feroe",1],["El Salvador",1],["Bangladesh",1],["Guinea",1],["China",1],["Egipto",1],["Nigeria",1],["Togo",1],["Liechtensein",1],["Serbia",1],["Yugoslavia",1],["Nicaragua",1]],"professions":[["Estudiantes",6751],["Profesores",2848],["Empleados",2625],["Tecnicos",2101],["Liberales",2096],["Jubilados",1308],["Funcionarios",1013],["Obreros",877],["Amas de Casa",522],["Parados",268],["Sacerdotes",180],["Artistas",154],["Directivos",119],["Agricultores",56],["Religiosas",45],["Deportistas",16],["Marinos",10]],"startingCities":[["Sarria",3660],["S. Jean P. Port",2001],["Ponferrada",1383],["Cebreiro",1290],["León",1288],["Roncesvalles",1259],["Astorga",1181],["Tui",710],["Pamplona",574],["Vilafranca",466],["Ourense",454],["Burgos",429],["Triacastela",407],["Oviedo - C.P.",398],["Le Puy",317],["Resto Portugal",298],["Oporto",261],["Ferrol",254],["Francia",249],["Vilalba",240],["Ribadeo",234],["Irún",232],["Mondoñedo",224],["Valença do Minho",185],["Resto C. León",178],["Resto Asturias",150],["Somport",123],["Sevilla",121],["Logroño",109],["Holanda",104],["Alemania",102],["Rabanal del Camino",101],["Lugo - C.P.",97],["Bilbao",91],["Neda",83],["Santander",79],["Oviedo",71],["Resto C. León - V.P.",69],["Sahagún",66],["Avilés",65],["Resto País Vasco",63],["Resto Cantabria",58],["Gijón",56],["Suiza",53],["Samos",53],["Abadin",52],["Zamora",52],["Lisboa",47],["Madrid - C.F.",45],["Ponte de Lima",44],["Lourdes",40],["Salamanca",40],["Rábade",38],["Jaca",37],["Bélgica",33],["Cataluña",32],["Vega de Valcarce",32],["Sto. Domingo de la Calzada",31],["Gudiña",30],["Frómista",29],["Puebla de Sanabria",28],["Puente la Reina",26],["Francia",25],["Vezelay",25],["Arles",24],["Mérida",24],["Hospital de Orbigo",22],["Resto Andalucia",19],["Barcelona",18],["Carrión de los Condes",17],["Fonsagrada - C.P.",16],["Resto Asturias - C.P.",16],["Porriño",15],["R.Pais Vasco",15],["Hendaya",14],["",14],["Estella",13],["Braga",12],["Grandas de Salime - C.P.",9],["Italia",9],["Madrid",9],["Zaragoza",8],["Austria",7],["Salas",7],["París",7],["Roma",7],["Resto de Extremadura",6],["Tineo - C.P.",6],["Valladolid",6],["Vegadeo",5],["Vigo",5],["Xunqueira de Ambia",5],["Grado",5],["Granada",5],["Canfranc",5],["Malaga",4],["Com. Valenciana",4],["Cataluña",4],["Cáceres",4],["Lourenzá",3],["Chaves-Portugal",3],["Tineo",3],["Fonsagrada",3],["Valcarlos",3],["Verín",3],["Valencia",3],["Murcia",2],["Republica Checa",2],["San Juan de Ortega",2],["Castrojeriz",2],["Castilla La Mancha",2],["Grandas de Salime",2],["Huelva",2],["Cadavo",2],["Resto Europa",2],["Reino Unido",1],["Laza",1],["Reino Unido",1],["Paradela",1],["Ortigueira",1],["Cast. la Mancha",1],["Castilla la Mancha",1],["Muxia",1],["Nájera",1],["Inglaterra",1],["Allariz",1],["Polonia",1]],"startingRegions":[["Lugo",6282],["León",4786],["France",2825],["Navarra",1875],["Portugal",847],["Asturias",793],["Pontevedra",730],["Ourense",494],["Burgos",433],["A Coruña",339],["Gipuzkoa",310],["La Rioja",141],["Sevilla",140],["Cantabria",137],["Holland",104],["Germany",102],["Vizcaya",91],["Zamora",80],["Madrid",54],["Barcelona",54],["Switzerland",53],["Palencia",46],["Huesca",42],["Huelva",40],["Salamanca",40],["Belgium",33],["Badajoz",30],["Italy",16],["City&nbsp;Was Blank",14],["Zaragoza",8],["Austria",7],["Valencia",7],["Valladolid",6],["Granada",5],["Cáceres",4],["Málaga",4],["Albacete",4],["Porgugal",3],["UK",3],["Murcia",2],["Europe Other",2],["Czech Republic",2],["Poland",1]],"caminos":[["Frances-Camino de",15892],["Norte-Camino de",1708],["Portugues-Camino",1577],["Via de la Plata",888],["Primitivo-Camino",556],["Ingles-Camino",339],["Otros caminos",14],["Otros caminos",14],["Muxia-Finisterre",1]]},"8":{"year":"2008","month":"8","pilgrims":29747,"gender":[["Hombre",17391],["Mujer",12356]],"transport":[["Pie",24004],["Bicicleta",5680],["Caballo",47],["Silla de ruedas",16]],"age":[["30 - 60",16881],["< 30",11675],["> 60",1191]],"motivation":[["Religioso y otros",14462],["Religioso",12498],["No religioso",2787]],"spanishFrom":[["Comunidad Valenciana",3256],["Cataluña",3043],["Madrid",2782],["Andalucía",2520],["Pais Vasco",1346],["Castilla la Mancha",988],["Castilla León",948],["Galicia",887],["Murcia",769],["Aragón",425],["Extremadura",350],["Navarra",242],["Asturias",198],["Baleares",192],["Canarias",169],["Cantabria",119],["La Rioja",108],["Otra",36],["Ceuta",8],["Melilla",7]],"byCountry":[["España",18393],["Italia",4800],["Alemania",1586],["Portugal",894],["Francia",884],["Polonia",341],["Holanda",212],["Belgica",198],["Reino Unido",192],["Hungría",191],["Estados Unidos",189],["Austria",185],["Irlanda",135],["Canadá",133],["Corea",131],["Suiza",116],["República Checa",115],["Dinamarca",108],["Brasil",100],["Eslovaquia",81],["Argentina",73],["Japón",62],["México",59],["Suecia",51],["Australia",48],["Colombia",46],["Venezuela",42],["España",33],["Rumania",30],["Eslovenia",22],["Finlandia",16],["Estonia",16],["Noruega",16],["Chile",14],["Lituania",13],["Perú",13],["Sudáfrica",12],["Croacia",12],["Luxemburgo",11],["Israel",11],["Uruguay",9],["Rusia",9],["Filipinas",9],["Ecuador",9],["Grecia",8],["Andorra",8],["Bulgaria",7],["Bolivia",5],["China",5],["Islandia",5],["Ucrania",5],["Costa Rica",5],["Malta",5],["Nueva Zelanda",5],["Rep. Dominicana",4],["Puerto Rico",4],["Marruecos",4],["Argelia",3],["El Salvador",3],["Paraguay",3],["Líbano",2],["Turquía",2],["Letonia",2],["Pakistán",2],["India",2],["Zimbabwe",2],["Nicaragua",2],["Cuba",2],["Serbia",2],["Kazajistán",1],["Honduras",1],["Panamá",1],["Islas Feroe",1],["Malasia",1],["Albania",1],["Sri Lanka",1],["Moldavia",1],["Irán",1],["Liechtensein",1]],"professions":[["Estudiantes",6831],["Empleados",5376],["Liberales",3839],["Tecnicos",3825],["Profesores",3475],["Obreros",2540],["Funcionarios",1050],["Jubilados",929],["Amas de Casa",624],["Parados",412],["Sacerdotes",244],["Artistas",227],["Directivos",209],["Agricultores",73],["Deportistas",40],["Religiosas",35],["Marinos",18]],"startingCities":[["Sarria",5457],["S. Jean P. Port",2741],["Cebreiro",2477],["Roncesvalles",2402],["León",2009],["Ponferrada",1905],["Astorga",1144],["Tui",1141],["Pamplona",705],["Burgos",701],["Vilafranca",670],["Oviedo - C.P.",445],["Oporto",383],["Irún",374],["Ourense",365],["Valença do Minho",352],["Triacastela",327],["Ferrol",318],["Le Puy",306],["Resto C. León",284],["Resto Asturias",264],["Ribadeo",254],["Resto Portugal",247],["Francia",223],["Vilalba",215],["Sevilla",201],["Samos",199],["Logroño",196],["Bilbao",164],["Santander",156],["Resto País Vasco",149],["Oviedo",147],["Somport",143],["Mondoñedo",135],["Gijón",135],["Lugo - C.P.",131],["Allariz",83],["Lisboa",81],["Holanda",81],["Sahagún",78],["Ponte de Lima",76],["Alemania",75],["Avilés",74],["R.Pais Vasco",67],["Rabanal del Camino",64],["Zamora",61],["Jaca",59],["Frómista",58],["Puebla de Sanabria",57],["Salamanca",54],["Resto Cantabria",53],["Resto Asturias - C.P.",53],["Sto. Domingo de la Calzada",51],["Puente la Reina",47],["Carrión de los Condes",46],["Cadavo",44],["Mérida",40],["Vega de Valcarce",40],["Madrid - C.F.",39],["Verín",34],["Hospital de Orbigo",33],["Bélgica",33],["Gudiña",32],["Murcia",31],["Braga",31],["",29],["Italia",26],["Estella",24],["Cataluña",24],["Castrojeriz",23],["Xunqueira de Ambia",22],["Suiza",22],["Resto C. León - V.P.",22],["Canfranc",21],["Lourdes",21],["Muxia",21],["Neda",21],["Grandas de Salime - C.P.",21],["Porriño",21],["Hendaya",20],["Valencia",19],["Fonsagrada - C.P.",18],["Cáceres",18],["Vigo",18],["Barcelona",17],["Com. Valenciana",17],["Austria",15],["París",15],["Zaragoza",14],["Nájera",14],["Vezelay",14],["Granja de Moreruela",13],["Arles",13],["Lourenzá",13],["Francia",13],["Tineo - C.P.",11],["Fonsagrada",10],["Chaves-Portugal",10],["Grandas de Salime",10],["Resto de Extremadura",8],["Resto Andalucia",8],["Cataluña",8],["Roma",7],["Madrid",7],["Abadin",6],["Granada",5],["Laza",5],["Salas",4],["Benavente",4],["Castilla la Mancha",4],["Grado",3],["Tineo",3],["Com. Valenciana",3],["Córdoba",3],["La Mesa",3],["Castilla La Mancha",2],["Pardellas",1],["Reino Unido",1],["San Juan de Ortega",1],["Badajoz",1],["A Guarda",1],["Inglaterra",1],["Huelva",1],["Leyre",1],["Valcarlos",1],["Finlandia",1],["Valladolid",1],["Andorra",1],["Malaga",1],["Polonia",1]],"startingRegions":[["Lugo",9286],["León",6249],["France",3509],["Navarra",3180],["Pontevedra",1182],["Asturias",1173],["Portugal",1170],["Burgos",725],["Gipuzkoa",590],["Ourense",541],["A Coruña",360],["La Rioja",261],["Sevilla",209],["Cantabria",209],["Vizcaya",164],["Zamora",135],["Palencia",104],["Holland",81],["Huesca",80],["Germany",75],["Salamanca",54],["Badajoz",49],["Barcelona",49],["Madrid",46],["Valencia",39],["Belgium",33],["Italy",33],["Murcia",31],["City&nbsp;Was Blank",29],["Switzerland",22],["Cáceres",18],["Austria",15],["Zaragoza",14],["Porgugal",10],["Albacete",6],["Granada",5],["Córdoba",3],["UK",2],["Huelva",1],["Poland",1],["Finland",1],["Valladolid",1],["Andorra",1],["Málaga",1]],"caminos":[["Frances-Camino de",22941],["Portugues-Camino",2351],["Norte-Camino de",2195],["Via de la Plata",1058],["Primitivo-Camino",734],["Ingles-Camino",339],["Otros caminos",79],["Otros caminos",29],["Muxia-Finisterre",21]]},"9":{"year":"2008","month":"9","pilgrims":17298,"gender":[["Hombre",10080],["Mujer",7218]],"transport":[["Pie",14030],["Bicicleta",3204],["Caballo",56],["Silla de ruedas",8]],"age":[["30 - 60",10012],["< 30",4324],["> 60",2962]],"motivation":[["Religioso y otros",8821],["Religioso",6879],["No religioso",1598]],"spanishFrom":[["Madrid",1527],["Cataluña",1201],["Andalucía",1139],["Comunidad Valenciana",808],["Castilla León",631],["Galicia",630],["Pais Vasco",436],["Castilla la Mancha",292],["Asturias",238],["Aragón",217],["Murcia",178],["Canarias",159],["Navarra",152],["Extremadura",148],["Baleares",116],["Cantabria",103],["La Rioja",56],["Otra",19],["Ceuta",9],["Melilla",3]],"byCountry":[["España",8062],["Alemania",2533],["Italia",1081],["Francia",989],["Portugal",480],["Irlanda",317],["Canadá",296],["Reino Unido",268],["Austria",268],["Polonia",257],["Belgica",241],["Holanda",230],["Brasil",225],["Estados Unidos",214],["Suecia",189],["Dinamarca",188],["Suiza",169],["Noruega",166],["Australia",140],["Hungría",120],["República Checa",119],["Japón",80],["México",76],["Finlandia",67],["Sudáfrica",52],["Eslovaquia",48],["Corea",48],["Argentina",39],["Eslovenia",37],["Venezuela",34],["Nueva Zelanda",34],["Estonia",30],["Colombia",24],["Chile",11],["Puerto Rico",11],["España",11],["Luxemburgo",11],["Israel",10],["Rumania",10],["Rusia",8],["Perú",8],["Uruguay",8],["Andorra",8],["Letonia",6],["China",5],["Ecuador",5],["Ucrania",5],["Malasia",5],["Bulgaria",4],["Honduras",4],["Islas Feroe",3],["Rep. Dominicana",3],["Irán",3],["Lituania",3],["Guatemala",3],["Croacia",2],["Taiwán",2],["Cuba",2],["Angola",2],["Grecia",2],["Vietnam",1],["Bolivia",1],["Costa Rica",1],["Liechtensein",1],["Marruecos",1],["Serbia",1],["India",1],["Malta",1],["Mozambique",1],["Moldavia",1],["El Salvador",1],["Laos",1],["Cabo Verde",1],["Turquía",1],["Nicaragua",1],["Kazajistán",1],["Timor Oriental",1],["Siria",1]],"professions":[["Empleados",3460],["Estudiantes",2510],["Tecnicos",2448],["Jubilados",2444],["Liberales",2390],["Funcionarios",1044],["Obreros",1021],["Profesores",681],["Amas de Casa",494],["Parados",313],["Directivos",178],["Artistas",125],["Sacerdotes",81],["Agricultores",55],["Deportistas",20],["Religiosas",20],["Marinos",14]],"startingCities":[["Sarria",2714],["S. Jean P. Port",2149],["León",1353],["Roncesvalles",1295],["Cebreiro",1109],["Ponferrada",993],["Astorga",796],["Pamplona",683],["Burgos",515],["Le Puy",470],["Tui",371],["Oporto",360],["Oviedo - C.P.",302],["Vilafranca",276],["Francia",223],["Irún",173],["Ferrol",162],["Resto Portugal",157],["Samos",151],["Sevilla",150],["Resto C. León",146],["Ourense",134],["Valença do Minho",125],["Somport",123],["Santander",122],["Triacastela",122],["Logroño",121],["Alemania",119],["Bilbao",104],["Ponte de Lima",95],["Ribadeo",91],["Holanda",89],["Resto Asturias",86],["Sahagún",80],["Salamanca",61],["Madrid - C.F.",58],["Gijón",51],["Oviedo",50],["Resto País Vasco",46],["Avilés",45],["Puebla de Sanabria",43],["Suiza",41],["Lugo - C.P.",40],["Frómista",39],["Vilalba",38],["Mérida",35],["Rabanal del Camino",35],["Bélgica",35],["Hospital de Orbigo",35],["Sto. Domingo de la Calzada",32],["Resto Cantabria",31],["Jaca",30],["Lisboa",30],["Puente la Reina",28],["Zamora",26],["Francia",24],["Barcelona",21],["Resto Asturias - C.P.",20],["Gudiña",20],["Vega de Valcarce",19],["Lourdes",19],["R.Pais Vasco",18],["Arles",16],["Vezelay",15],["Hendaya",15],["Estella",15],["Cataluña",14],["Carrión de los Condes",14],["Braga",13],["Tineo - C.P.",12],["Muxia",12],["París",12],["Zaragoza",12],["Neda",11],["",11],["Verín",10],["Chaves-Portugal",10],["Irlanda",9],["Grandas de Salime - C.P.",9],["Austria",9],["Resto de Extremadura",9],["Resto C. León - V.P.",7],["Castilla La Mancha",7],["Cadavo",7],["Canfranc",7],["Porriño",7],["Xunqueira de Ambia",7],["Cáceres",6],["Abadin",6],["Resto Andalucia",6],["Castrojeriz",5],["Allariz",5],["Com. Valenciana",5],["Granja de Moreruela",5],["Valencia",5],["Mondoñedo",5],["Italia",4],["Finisterra",4],["Madrid",4],["Tineo",4],["Murcia",4],["Granada",4],["Nájera",4],["Grado",3],["Fonsagrada - C.P.",3],["Grandas de Salime",2],["Badajoz",2],["Valcarlos",2],["Polonia",2],["Cataluña",1],["Reino Unido",1],["Benavente",1],["Córdoba",1],["Castilla la Mancha",1],["Grecia",1],["Roma",1],["Malaga",1],["Vigo",1]],"startingRegions":[["Lugo",4286],["León",3740],["France",3066],["Navarra",2023],["Portugal",780],["Asturias",584],["Burgos",520],["Pontevedra",379],["Gipuzkoa",237],["A Coruña",189],["Ourense",176],["La Rioja",157],["Sevilla",156],["Cantabria",153],["Germany",119],["Vizcaya",104],["Holland",89],["Zamora",75],["Madrid",62],["Salamanca",61],["Palencia",53],["Badajoz",46],["Switzerland",41],["Huesca",37],["Barcelona",36],["Belgium",35],["Zaragoza",12],["City&nbsp;Was Blank",11],["Porgugal",10],["Valencia",10],["Ireland",9],["Austria",9],["Albacete",8],["Cáceres",6],["Italy",5],["Murcia",4],["Granada",4],["Poland",2],["UK",1],["Córdoba",1],["Greece",1],["Málaga",1]],"caminos":[["Frances-Camino de",14071],["Portugues-Camino",1159],["Norte-Camino de",893],["Via de la Plata",554],["Primitivo-Camino",396],["Ingles-Camino",182],["Otros caminos",16],["Muxia-Finisterre",16],["Otros caminos",11]]},"10":{"year":"2008","month":"10","pilgrims":9881,"gender":[["Hombre",5772],["Mujer",4109]],"transport":[["Pie",8758],["Bicicleta",1096],["Caballo",25],["Silla de ruedas",2]],"age":[["30 - 60",5878],["> 60",2070],["< 30",1933]],"motivation":[["Religioso y otros",5414],["Religioso",3684],["No religioso",783]],"spanishFrom":[["Madrid",590],["Cataluña",483],["Galicia",464],["Comunidad Valenciana",399],["Andalucía",374],["Pais Vasco",218],["Castilla León",197],["Castilla la Mancha",119],["Murcia",97],["Aragón",95],["Canarias",94],["Baleares",91],["Asturias",76],["Navarra",51],["Extremadura",41],["La Rioja",29],["Cantabria",19],["Otra",14],["Melilla",4],["Ceuta",2]],"byCountry":[["España",3457],["Alemania",1619],["Francia",846],["Italia",431],["Canadá",371],["Estados Unidos",285],["Suiza",232],["Australia",219],["Austria",189],["Brasil",183],["Irlanda",177],["Belgica",158],["Dinamarca",158],["Reino Unido",157],["Holanda",155],["Portugal",150],["Corea",123],["Suecia",111],["Noruega",102],["Finlandia",86],["Polonia",73],["Japón",65],["Hungría",63],["Argentina",54],["México",51],["República Checa",44],["Venezuela",40],["Sudáfrica",32],["Nueva Zelanda",29],["Colombia",28],["Eslovenia",18],["Uruguay",16],["Estonia",15],["Israel",13],["Chile",9],["Puerto Rico",8],["España",8],["Luxemburgo",8],["Rumania",7],["Rusia",6],["Andorra",5],["Eslovaquia",5],["Grecia",5],["Filipinas",5],["Bolivia",4],["China",4],["Ecuador",4],["Marruecos",3],["Taiwán",3],["Bulgaria",3],["Costa Rica",2],["Singapur",2],["Guatemala",2],["Perú",2],["Chipre",2],["Togo",1],["Sri Lanka",1],["Islandia",1],["Letonia",1],["Indonesia",1],["Honduras",1],["Líbano",1],["Macedonia",1],["India",1],["Rep. Dominicana",1],["Nicaragua",1],["Etiopía",1],["Croacia",1],["Nigeria",1],["Panamá",1],["Irán",1],["Guinea",1],["Mónaco",1],["Liechtensein",1]],"professions":[["Empleados",1910],["Jubilados",1787],["Liberales",1490],["Tecnicos",1378],["Estudiantes",944],["Funcionarios",523],["Profesores",490],["Obreros",471],["Amas de Casa",292],["Parados",253],["Directivos",142],["Artistas",94],["Agricultores",45],["Sacerdotes",38],["Marinos",9],["Deportistas",8],["Religiosas",7]],"startingCities":[["S. Jean P. Port",1836],["Sarria",1454],["Roncesvalles",764],["León",516],["Ponferrada",440],["Cebreiro",435],["Pamplona",400],["Astorga",387],["Le Puy",379],["Burgos",300],["Francia",264],["Oporto",199],["Ferrol",179],["Vilafranca",163],["Sevilla",151],["Somport",127],["Oviedo - C.P.",124],["Tui",122],["Irún",106],["Alemania",90],["Triacastela",78],["Resto C. León",70],["Samos",70],["Suiza",65],["Ourense",62],["Lisboa",57],["Logroño",54],["Holanda",50],["Resto Portugal",47],["Valença do Minho",42],["Ponte de Lima",36],["Salamanca",34],["Lugo - C.P.",34],["Vilalba",34],["Mondoñedo",33],["Bilbao",31],["Jaca",30],["Sahagún",28],["Vezelay",27],["Resto Asturias",27],["Resto País Vasco",27],["Oviedo",26],["Santander",25],["Puente la Reina",25],["Vega de Valcarce",20],["Bélgica",20],["Arles",18],["Frómista",17],["Lourdes",17],["Madrid - C.F.",16],["Cataluña",14],["Zamora",14],["Puebla de Sanabria",13],["Ribadeo",13],["Gijón",12],["Rabanal del Camino",12],["Mérida",11],["Neda",10],["Barcelona",10],["Gudiña",10],["Francia",9],["Estella",9],["Avilés",9],["Sto. Domingo de la Calzada",9],["Valencia",9],["Cáceres",8],["R.Pais Vasco",8],["Hospital de Orbigo",7],["Austria",7],["París",6],["",6],["Vigo",6],["Resto Cantabria",6],["Carrión de los Condes",6],["Hendaya",6],["Fonsagrada - C.P.",6],["Braga",5],["Zaragoza",5],["Valcarlos",5],["Nájera",4],["Resto C. León - V.P.",4],["Resto Asturias - C.P.",4],["Resto de Extremadura",4],["Xunqueira de Ambia",3],["Badajoz",3],["Italia",3],["Polonia",3],["Resto Andalucia",3],["Canfranc",3],["Cadavo",3],["Roma",3],["Reino Unido",2],["Malaga",2],["Granada",2],["Madrid",2],["Tineo - C.P.",2],["Huelva",2],["Verín",2],["Cea",1],["Lourenzá",1],["Valladolid",1],["Andorra",1],["Castilla La Mancha",1],["Muxia",1],["Granja de Moreruela",1],["Tineo",1],["Grandas de Salime - C.P.",1],["Pontedeume",1],["Laza",1],["Abadin",1],["Cataluña",1],["Finisterra",1],["Resto Europa",1],["Murcia",1],["Com. Valenciana",1],["Irlanda",1],["Salas",1],["Castilla la Mancha",1]],"startingRegions":[["France",2689],["Lugo",2162],["León",1648],["Navarra",1203],["Portugal",386],["Burgos",300],["Asturias",207],["A Coruña",192],["Sevilla",154],["Gipuzkoa",141],["Pontevedra",128],["Germany",90],["Ourense",78],["La Rioja",67],["Switzerland",65],["Holland",50],["Salamanca",34],["Huesca",33],["Vizcaya",31],["Cantabria",31],["Zamora",28],["Barcelona",25],["Palencia",23],["Belgium",20],["Madrid",18],["Badajoz",18],["Valencia",10],["Cáceres",8],["Austria",7],["City&nbsp;Was Blank",6],["Italy",6],["Zaragoza",5],["Poland",3],["UK",2],["Málaga",2],["Granada",2],["Huelva",2],["Albacete",2],["Andorra",1],["Valladolid",1],["Europe Other",1],["Murcia",1],["Ireland",1]],"caminos":[["Frances-Camino de",8279],["Portugues-Camino",514],["Norte-Camino de",367],["Via de la Plata",335],["Ingles-Camino",190],["Primitivo-Camino",175],["Otros caminos",13],["Otros caminos",6],["Muxia-Finisterre",2]]},"11":{"year":"2008","month":"11","pilgrims":2301,"gender":[["Hombre",1535],["Mujer",766]],"transport":[["Pie",2104],["Bicicleta",193],["Caballo",2],["Silla de ruedas",2]],"age":[["30 - 60",1382],["< 30",634],["> 60",285]],"motivation":[["Religioso y otros",1282],["Religioso",826],["No religioso",193]],"spanishFrom":[["Andalucía",145],["Cataluña",141],["Madrid",139],["Galicia",118],["Baleares",115],["Comunidad Valenciana",74],["Castilla León",55],["Pais Vasco",50],["Asturias",41],["Murcia",29],["Aragón",27],["Ceuta",26],["Castilla la Mancha",22],["Canarias",19],["La Rioja",9],["Extremadura",8],["Cantabria",7],["Navarra",7],["Otra",4]],"byCountry":[["España",1036],["Alemania",188],["Francia",178],["Canadá",91],["Italia",80],["Estados Unidos",78],["Portugal",71],["Corea",65],["Australia",62],["Suiza",57],["Brasil",53],["Reino Unido",40],["Belgica",31],["Holanda",30],["Austria",28],["Argentina",23],["Irlanda",18],["Polonia",16],["México",11],["Japón",11],["Suecia",10],["Colombia",10],["Hungría",10],["Dinamarca",9],["Eslovaquia",8],["República Checa",7],["Noruega",7],["Sudáfrica",5],["Nueva Zelanda",5],["Andorra",5],["Uruguay",5],["Eslovenia",4],["Venezuela",4],["Finlandia",4],["Ecuador",3],["Perú",3],["Rusia",3],["Chipre",3],["Grecia",2],["Israel",2],["Guatemala",2],["Singapur",2],["Chile",2],["Puerto Rico",2],["Irán",2],["España",2],["Líbano",2],["Croacia",2],["Jamaica",1],["Lituania",1],["Letonia",1],["Bulgaria",1],["Luxemburgo",1],["Filipinas",1],["San Marino",1],["Panamá",1],["Egipto",1]],"professions":[["Empleados",404],["Liberales",341],["Tecnicos",298],["Estudiantes",285],["Jubilados",266],["Obreros",215],["Parados",114],["Funcionarios",110],["Profesores",107],["Amas de Casa",50],["Artistas",44],["Directivos",23],["Agricultores",20],["Sacerdotes",10],["Marinos",8],["Religiosas",3],["Deportistas",3]],"startingCities":[["S. Jean P. Port",425],["Sarria",341],["Roncesvalles",169],["Cebreiro",129],["Le Puy",110],["Ponferrada",100],["León",86],["Oporto",62],["Pamplona",60],["Astorga",56],["Francia",53],["Burgos",52],["Tui",48],["Sevilla",47],["Somport",34],["Oviedo - C.P.",29],["Suiza",28],["Allariz",27],["Vilafranca",27],["Ferrol",24],["Irún",23],["Alemania",23],["Logroño",20],["Resto Portugal",17],["Jaca",16],["Valença do Minho",14],["Lugo - C.P.",14],["Santander",13],["Holanda",12],["Bilbao",11],["Carrión de los Condes",10],["Ourense",10],["Vezelay",10],["Lisboa",9],["Resto C. León",9],["Bélgica",8],["Samos",8],["Gijón",7],["Arles",6],["Vega de Valcarce",6],["Resto Asturias - C.P.",6],["Benavente",6],["Lourdes",6],["Puente la Reina",6],["Resto País Vasco",5],["Salamanca",5],["Madrid - C.F.",5],["Vilalba",5],["Hospital de Orbigo",5],["Granja de Moreruela",4],["Grandas de Salime - C.P.",4],["Austria",4],["Barcelona",4],["Frómista",4],["Cataluña",4],["Zamora",4],["Avilés",3],["Estella",3],["R.Pais Vasco",3],["Rabanal del Camino",3],["Xunqueira de Ambia",3],["Muxia",3],["Italia",3],["Sahagún",3],["Neda",3],["Sto. Domingo de la Calzada",3],["Madrid",2],["Ponte de Lima",2],["Valencia",2],["Triacastela",2],["París",2],["Resto Cantabria",2],["Republica Checa",2],["Resto Asturias",2],["Gudiña",2],["Zaragoza",2],["Malaga",2],["Fonsagrada - C.P.",2],["Resto Andalucia",2],["Lourenzá",2],["Ribadeo",2],["Cáceres",1],["",1],["Roma",1],["Puebla de Sanabria",1],["Com. Valenciana",1],["Cataluña",1],["Oviedo",1],["Reino Unido",1],["Grandas de Salime",1],["Cadavo",1],["Francia",1]],"startingRegions":[["France",647],["Lugo",506],["León",295],["Navarra",238],["Portugal",104],["Asturias",53],["Burgos",52],["Sevilla",49],["Pontevedra",48],["Ourense",42],["Gipuzkoa",31],["A Coruña",30],["Switzerland",28],["Germany",23],["La Rioja",23],["Huesca",16],["Cantabria",15],["Zamora",15],["Palencia",14],["Holland",12],["Vizcaya",11],["Barcelona",9],["Belgium",8],["Madrid",7],["Salamanca",5],["Austria",4],["Italy",4],["Valencia",3],["Czech Republic",2],["Zaragoza",2],["Málaga",2],["City&nbsp;Was Blank",1],["Cáceres",1],["UK",1]],"caminos":[["Frances-Camino de",1864],["Portugues-Camino",152],["Via de la Plata",116],["Norte-Camino de",78],["Primitivo-Camino",56],["Ingles-Camino",27],["Otros caminos",4],["Muxia-Finisterre",3],["Otros caminos",1]]},"12":{"year":"2008","month":"12","pilgrims":1085,"gender":[["Hombre",659],["Mujer",426]],"transport":[["Pie",991],["Bicicleta",94]],"age":[["30 - 60",636],["< 30",370],["> 60",79]],"motivation":[["Religioso y otros",581],["Religioso",397],["No religioso",107]],"spanishFrom":[["Galicia",376],["Madrid",141],["Andalucía",46],["Baleares",27],["Cataluña",25],["Castilla León",24],["Navarra",20],["Comunidad Valenciana",14],["Castilla la Mancha",12],["Asturias",11],["Pais Vasco",10],["Extremadura",8],["Canarias",5],["Aragón",3],["Cantabria",2],["Murcia",2],["La Rioja",1]],"byCountry":[["España",727],["Portugal",66],["Alemania",52],["Francia",46],["Italia",27],["Estados Unidos",16],["Canadá",13],["Corea",12],["Holanda",11],["Suiza",11],["Belgica",10],["Argentina",10],["Reino Unido",10],["Austria",7],["Japón",7],["Uruguay",6],["Dinamarca",5],["Brasil",5],["Australia",5],["Venezuela",4],["Finlandia",3],["México",3],["Polonia",3],["Irlanda",3],["Suecia",2],["España",2],["Hungría",1],["Rusia",1],["Honduras",1],["República Checa",1],["Nueva Zelanda",1],["Chile",1],["Israel",1],["Irán",1],["Colombia",1],["Letonia",1],["Turquía",1],["Estonia",1]],"professions":[["Estudiantes",220],["Empleados",208],["Obreros",123],["Liberales",119],["Tecnicos",111],["Jubilados",68],["Funcionarios",52],["Amas de Casa",52],["Parados",50],["Profesores",39],["Directivos",14],["Artistas",14],["Agricultores",7],["Marinos",4],["Sacerdotes",3],["Deportistas",1]],"startingCities":[["Vigo",193],["Sarria",152],["Cebreiro",100],["Tui",92],["S. Jean P. Port",84],["Roncesvalles",55],["León",30],["Resto Portugal",29],["Ponferrada",28],["Pamplona",28],["Le Puy",27],["Oporto",27],["Burgos",23],["Francia",20],["Valença do Minho",19],["Somport",16],["Vilafranca",11],["Ourense",11],["Astorga",10],["Oviedo - C.P.",10],["Logroño",8],["Suiza",7],["Sevilla",6],["Irún",6],["Lugo - C.P.",6],["Ferrol",5],["Chaves-Portugal",5],["Bélgica",5],["Salamanca",4],["Arles",4],["Ribadeo",4],["Alemania",4],["Nájera",3],["Lisboa",3],["Jaca",3],["Holanda",3],["Resto C. León",3],["Cataluña",3],["Lourdes",3],["Carrión de los Condes",2],["Malaga",2],["Avilés",2],["Mondoñedo",2],["Oviedo",2],["Puebla de Sanabria",2],["Ortigueira",2],["Finisterra",1],["Granada",1],["Resto Asturias",1],["Ponte de Lima",1],["París",1],["Gudiña",1],["Resto Andalucia",1],["Puente la Reina",1],["",1],["Neda",1],["Zamora",1],["Bilbao",1],["Cataluña",1],["Santander",1],["Frómista",1],["Rabanal del Camino",1],["Barcelona",1],["Triacastela",1],["Austria",1],["Cáceres",1],["Zaragoza",1]],"startingRegions":[["Pontevedra",285],["Lugo",265],["France",155],["Navarra",84],["León",83],["Portugal",79],["Burgos",23],["Asturias",15],["Ourense",12],["La Rioja",11],["A Coruña",9],["Switzerland",7],["Sevilla",7],["Gipuzkoa",6],["Belgium",5],["Porgugal",5],["Barcelona",5],["Germany",4],["Salamanca",4],["Holland",3],["Palencia",3],["Zamora",3],["Huesca",3],["Málaga",2],["Cáceres",1],["Zaragoza",1],["City&nbsp;Was Blank",1],["Vizcaya",1],["Cantabria",1],["Austria",1],["Granada",1]],"caminos":[["Frances-Camino de",640],["Portugues-Camino",364],["Via de la Plata",35],["Norte-Camino de",19],["Primitivo-Camino",16],["Ingles-Camino",8],["Otros caminos",1],["Muxia-Finisterre",1],["Otros caminos",1]]},"all":{"year":"2008","month":"","pilgrims":125141,"gender":[["Hombre",72936],["Mujer",52205]],"transport":[["Pie",103670],["Bicicleta",21142],["Caballo",290],["Silla de ruedas",39]],"age":[["30 - 60",71451],["< 30",36626],["> 60",17064]],"motivation":[["Religioso y otros",63598],["Religioso",50732],["No religioso",10811]],"spanishFrom":[["Madrid",10671],["Cataluña",8750],["Andalucía",8568],["Comunidad Valenciana",7665],["Galicia",4392],["Pais Vasco",4285],["Castilla León",3869],["Castilla la Mancha",2729],["Murcia",1784],["Aragón",1443],["Extremadura",1335],["Canarias",1268],["Asturias",1203],["Baleares",1001],["Navarra",899],["Cantabria",448],["La Rioja",390],["Otra",164],["Ceuta",100],["Melilla",28]],"byCountry":[["España",61112],["Alemania",15746],["Italia",10707],["Francia",6618],["Portugal",4341],["Estados Unidos",2214],["Canadá",1933],["Holanda",1864],["Austria",1847],["Reino Unido",1559],["Irlanda",1535],["Brasil",1365],["Belgica",1291],["Suiza",1246],["Polonia",1102],["Australia",1022],["Dinamarca",986],["Suecia",929],["Corea",830],["Hungría",730],["Noruega",718],["México",653],["Finlandia",619],["República Checa",564],["Japón",412],["Argentina",360],["Sudáfrica",274],["Eslovaquia",249],["Eslovenia",229],["Venezuela",210],["Colombia",196],["Nueva Zelanda",162],["Estonia",129],["Chile",83],["Rumania",78],["Uruguay",77],["Rusia",72],["Andorra",67],["Luxemburgo",66],["Perú",64],["Ecuador",61],["Israel",59],["Lituania",54],["Puerto Rico",48],["Croacia",45],["Guatemala",37],["Ucrania",31],["Letonia",29],["Islandia",28],["Grecia",26],["Costa Rica",26],["Bulgaria",25],["Bolivia",23],["Filipinas",22],["Rep. Dominicana",21],["China",20],["Marruecos",16],["Malta",16],["Irán",14],["Turquía",13],["India",12],["Taiwán",11],["Cuba",11],["Paraguay",9],["El Salvador",9],["Singapur",9],["Honduras",8],["Chipre",8],["Islas Feroe",8],["Líbano",8],["Malasia",6],["Nicaragua",5],["Panamá",5],["Serbia",5],["Argelia",5],["Moldavia",4],["Indonesia",4],["Angola",4],["Liechtensein",4],["Vietnam",3],["San Marino",3],["Kazajistán",3],["Sri Lanka",3],["Guinea",3],["Nigeria",2],["Egipto",2],["Togo",2],["Tailandia",2],["Camerún",2],["Pakistán",2],["Zimbabwe",2],["Islas Vírgenes",1],["Bosnia",1],["Nepal",1],["Armenia",1],["Yugoslavia",1],["Jordania",1],["Bielorrusia",1],["Bangladesh",1],["Ghana",1],["Albania",1],["Mozambique",1],["Laos",1],["Cabo Verde",1],["Timor Oriental",1],["Siria",1],["Macedonia",1],["Etiopía",1],["Mónaco",1],["Jamaica",1]],"professions":[["Estudiantes",22789],["Empleados",22024],["Liberales",16135],["Tecnicos",15704],["Jubilados",14884],["Profesores",9915],["Obreros",8218],["Funcionarios",6025],["Amas de Casa",3547],["Parados",2189],["Directivos",1223],["Artistas",934],["Sacerdotes",782],["Agricultores",396],["Religiosas",144],["Marinos",119],["Deportistas",113]],"startingCities":[["Sarria",20853],["S. Jean P. Port",15763],["Roncesvalles",9172],["León",8216],["Cebreiro",7874],["Ponferrada",6644],["Astorga",5050],["Pamplona",4327],["Tui",3416],["Burgos",3179],["Le Puy",2818],["Oporto",2503],["Vilafranca",2216],["Francia",1961],["Oviedo - C.P.",1735],["Sevilla",1703],["Resto Portugal",1436],["Triacastela",1378],["Irún",1356],["Ourense",1333],["Ferrol",1223],["Valença do Minho",1188],["Somport",978],["Resto C. León",968],["Samos",802],["Logroño",777],["Ribadeo",753],["Holanda",733],["Alemania",720],["Vilalba",664],["Resto Asturias",652],["Bilbao",566],["Lugo - C.P.",523],["Santander",521],["Mondoñedo",412],["Ponte de Lima",408],["Resto País Vasco",404],["Sahagún",381],["Salamanca",368],["Lisboa",357],["Oviedo",351],["Gijón",342],["Suiza",331],["Jaca",304],["Avilés",300],["Madrid - C.F.",271],["Rabanal del Camino",269],["Zamora",243],["Vigo",240],["Bélgica",230],["Puente la Reina",221],["Mérida",218],["Frómista",218],["Neda",198],["Resto Cantabria",192],["Sto. Domingo de la Calzada",190],["Puebla de Sanabria",182],["Lourdes",180],["Braga",173],["Vega de Valcarce",172],["Vezelay",157],["Chaves-Portugal",155],["Cataluña",153],["R.Pais Vasco",151],["Hospital de Orbigo",151],["Carrión de los Condes",151],["Arles",148],["Resto Asturias - C.P.",137],["Resto C. León - V.P.",133],["Allariz",125],["Gudiña",122],["Barcelona",116],["Grandas de Salime - C.P.",102],["Hendaya",100],["Estella",99],["Cáceres",76],["",73],["Austria",72],["Zaragoza",72],["Xunqueira de Ambia",70],["Fonsagrada - C.P.",69],["París",69],["Resto Andalucia",67],["Abadin",65],["Cadavo",64],["Castrojeriz",64],["Valencia",63],["Italia",62],["Muxia",57],["Castilla la Mancha",54],["Canfranc",54],["Verín",53],["Com. Valenciana",53],["Porriño",48],["Finisterra",47],["Tineo - C.P.",45],["Nájera",44],["Resto de Extremadura",39],["Lourenzá",38],["Murcia",38],["Rábade",38],["Granja de Moreruela",37],["Roma",35],["Vegadeo",33],["Malaga",32],["Granada",30],["Irlanda",29],["Madrid",29],["Grandas de Salime",28],["Castilla La Mancha",27],["Salas",18],["Valladolid",15],["Valcarlos",15],["Fonsagrada",14],["Tineo",13],["Laza",13],["La Mesa",13],["Grado",12],["Benavente",11],["Reino Unido",11],["Huelva",11],["Polonia",10],["Badajoz",7],["Republica Checa",6],["Inglaterra",5],["Resto Europa",4],["Córdoba",4],["Pontedeume",3],["Ortigueira",3],["Andorra",3],["Cast. la Mancha",3],["San Juan de Ortega",3],["Luxemburgo",2],["Grecia",2],["Paradela",2],["Jerusalem",1],["Dinamarca",1],["Hungría",1],["Pardellas",1],["A Guarda",1],["Leyre",1],["Finlandia",1],["Cea",1]],"startingRegions":[["Lugo",33511],["León",24201],["France",22174],["Navarra",13835],["Portugal",6065],["Asturias",3781],["Pontevedra",3706],["Burgos",3246],["Gipuzkoa",1911],["Sevilla",1770],["Ourense",1716],["A Coruña",1531],["La Rioja",1011],["Holland",733],["Germany",720],["Cantabria",713],["Vizcaya",566],["Zamora",473],["Palencia",369],["Salamanca",368],["Huesca",358],["Switzerland",331],["Madrid",300],["Barcelona",269],["Badajoz",264],["Belgium",230],["Porgugal",155],["Valencia",116],["Italy",97],["Albacete",84],["Cáceres",76],["City&nbsp;Was Blank",73],["Austria",72],["Zaragoza",72],["Huelva",49],["Murcia",38],["Málaga",32],["Granada",30],["Ireland",29],["UK",16],["Valladolid",15],["Poland",10],["Czech Republic",6],["Europe Other",4],["Córdoba",4],["Andorra",3],["Greece",2],["Luxembourg",2],["Denmark",1],["Hungary",1],["Israel",1],["Finland",1]],"caminos":[["Frances-Camino de",98729],["Portugues-Camino",9770],["Norte-Camino de",6964],["Via de la Plata",5104],["Primitivo-Camino",2719],["Ingles-Camino",1451],["Otros caminos",300],["Muxia-Finisterre",104]]}},"2009":{"1":{"year":"2009","month":"1","pilgrims":520,"gender":[["Hombre",343],["Mujer",177]],"transport":[["Pie",487],["Bicicleta",32],["Caballo",1]],"age":[["30 - 60",325],["< 30",171],["> 60",24]],"motivation":[["Religioso y otros",266],["Religioso",213],["No religioso",41]],"spanishFrom":[["Madrid",77],["Galicia",32],["Cataluña",29],["Comunidad Valenciana",28],["Pais Vasco",23],["Andalucía",19],["Castilla León",19],["Murcia",10],["Aragón",8],["Castilla la Mancha",6],["Asturias",5],["Baleares",5],["Navarra",4],["Cantabria",3],["Canarias",2],["La Rioja",2],["Extremadura",1]],"byCountry":[["España",273],["Corea",51],["Italia",39],["Alemania",35],["Brasil",21],["Portugal",18],["Francia",16],["Estados Unidos",9],["Japón",6],["Holanda",6],["Irlanda",4],["Canadá",4],["Suiza",4],["Argentina",3],["Ecuador",3],["Suecia",2],["Colombia",2],["México",2],["Australia",2],["Guatemala",2],["Reino Unido",2],["Belgica",2],["Bolivia",2],["Austria",2],["Rumania",1],["Uruguay",1],["República Checa",1],["Ucrania",1],["Perú",1],["Eslovaquia",1],["Noruega",1],["Hungría",1],["Letonia",1]],"professions":[["Estudiantes",109],["Empleados",103],["Liberales",64],["Obreros",49],["Tecnicos",49],["Profesores",43],["Parados",25],["Jubilados",20],["Funcionarios",15],["Amas de Casa",14],["Directivos",9],["Sacerdotes",9],["Artistas",7],["Agricultores",2],["Deportistas",1],["Marinos",1]],"startingCities":[["Sarria",111],["S. Jean P. Port",50],["León",48],["Cebreiro",38],["Ponferrada",27],["Estella",26],["Roncesvalles",23],["Pamplona",20],["Burgos",14],["Fonsagrada - C.P.",14],["Astorga",13],["Vilafranca",7],["Resto Portugal",7],["Oviedo",7],["Resto C. León",6],["Sevilla",6],["Oporto",6],["Ourense",6],["Lugo - C.P.",6],["Le Puy",5],["Ribadeo",5],["Irún",5],["Ponte de Lima",5],["Ferrol",5],["Somport",4],["Tui",4],["Triacastela",4],["Lisboa",4],["Jaca",3],["Resto País Vasco",3],["Oviedo - C.P.",3],["Francia",3],["Valença do Minho",2],["Laza",2],["Braga",2],["Mérida",2],["Córdoba",2],["Carrión de los Condes",2],["Resto Andalucia",1],["Vezelay",1],["Logroño",1],["Madrid - C.F.",1],["Resto Asturias",1],["Suiza",1],["Com. Valenciana",1],["Castrojeriz",1],["Zaragoza",1],["Vega de Valcarce",1],["",1],["Resto Europa",1],["Holanda",1],["Puebla de Sanabria",1],["Tineo - C.P.",1],["Benavente",1],["Frómista",1],["Sahagún",1],["Italia",1],["R.Pais Vasco",1]],"startingRegions":[["Lugo",178],["León",103],["Navarra",69],["France",63],["Portugal",26],["Burgos",15],["Asturias",12],["Gipuzkoa",9],["Ourense",8],["Sevilla",7],["A Coruña",5],["Pontevedra",4],["Huesca",3],["Palencia",3],["Badajoz",2],["Córdoba",2],["Zamora",2],["Madrid",1],["Switzerland",1],["Valencia",1],["Italy",1],["City&nbsp;Was Blank",1],["Europe Other",1],["Holland",1],["La Rioja",1],["Zaragoza",1]],"caminos":[["Frances-Camino de",417],["Portugues-Camino",30],["Primitivo-Camino",24],["Norte-Camino de",21],["Via de la Plata",21],["Ingles-Camino",5],["Otros caminos",1],["Otros caminos",1]]},"2":{"year":"2009","month":"2","pilgrims":681,"gender":[["Hombre",468],["Mujer",213]],"transport":[["Pie",619],["Bicicleta",62]],"age":[["30 - 60",338],["< 30",309],["> 60",34]],"motivation":[["Religioso y otros",408],["Religioso",226],["No religioso",47]],"spanishFrom":[["Galicia",62],["Comunidad Valenciana",40],["Madrid",34],["Cataluña",28],["Castilla León",26],["Andalucía",25],["Canarias",20],["Baleares",19],["Castilla la Mancha",19],["Extremadura",11],["Pais Vasco",8],["Asturias",8],["Aragón",3],["Murcia",2],["La Rioja",1],["Cantabria",1]],"byCountry":[["España",307],["Portugal",173],["Alemania",48],["Francia",27],["Italia",22],["Japón",10],["Corea",9],["Canadá",9],["Austria",8],["Estados Unidos",8],["Brasil",7],["Belgica",6],["Reino Unido",5],["Australia",5],["México",4],["Dinamarca",4],["Holanda",4],["Uruguay",3],["Irlanda",3],["Ecuador",3],["Suiza",2],["Chile",2],["Eslovenia",2],["Hungría",1],["Bulgaria",1],["Ucrania",1],["Perú",1],["Argentina",1],["Grecia",1],["República Checa",1],["Venezuela",1],["Colombia",1]],"professions":[["Estudiantes",225],["Empleados",115],["Liberales",66],["Tecnicos",65],["Obreros",60],["Profesores",38],["Jubilados",31],["Funcionarios",29],["Parados",20],["Directivos",10],["Amas de Casa",8],["Artistas",5],["Agricultores",3],["Deportistas",2],["Religiosas",2],["Marinos",1],["Sacerdotes",1]],"startingCities":[["Cebreiro",142],["Sarria",101],["Roncesvalles",39],["Tui",36],["León",34],["Astorga",26],["S. Jean P. Port",26],["Triacastela",21],["Valença do Minho",21],["Ponferrada",18],["Oporto",18],["Resto Portugal",15],["Samos",14],["Sevilla",14],["Vilafranca",14],["Pamplona",12],["Ferrol",11],["Ourense",11],["Francia",10],["Irún",9],["Lugo - C.P.",8],["Gudiña",7],["Burgos",7],["Braga",6],["Resto C. León",6],["Jaca",5],["Oviedo - C.P.",3],["Somport",3],["Zaragoza",3],["Gijón",3],["Logroño",3],["",3],["Ponte de Lima",2],["Hospital de Orbigo",2],["Salamanca",2],["Alemania",2],["Lisboa",2],["Le Puy",2],["Avilés",2],["Sahagún",2],["Valencia",2],["Tineo - C.P.",2],["Zamora",2],["Castrojeriz",1],["Cataluña",1],["Cataluña",1],["Oviedo",1],["Austria",1],["Suiza",1],["Santander",1],["Resto País Vasco",1],["Mérida",1],["Rabanal del Camino",1]],"startingRegions":[["Lugo",286],["León",103],["Portugal",64],["Navarra",51],["France",41],["Pontevedra",36],["Ourense",18],["Sevilla",14],["Asturias",11],["A Coruña",11],["Gipuzkoa",10],["Burgos",8],["Huesca",5],["Zaragoza",3],["La Rioja",3],["City&nbsp;Was Blank",3],["Zamora",2],["Salamanca",2],["Germany",2],["Valencia",2],["Barcelona",2],["Austria",1],["Switzerland",1],["Cantabria",1],["Badajoz",1]],"caminos":[["Frances-Camino de",497],["Portugues-Camino",100],["Via de la Plata",37],["Norte-Camino de",17],["Primitivo-Camino",13],["Ingles-Camino",11],["Otros caminos",3],["Otros caminos",3]]},"3":{"year":"2009","month":"3","pilgrims":1808,"gender":[["Hombre",1203],["Mujer",605]],"transport":[["Pie",1551],["Bicicleta",247],["Caballo",10]],"age":[["30 - 60",983],["< 30",656],["> 60",169]],"motivation":[["Religioso y otros",1062],["Religioso",537],["No religioso",209]],"spanishFrom":[["Madrid",221],["Cataluña",161],["Andalucía",154],["Galicia",120],["Castilla León",114],["Comunidad Valenciana",110],["Castilla la Mancha",53],["Pais Vasco",45],["Baleares",44],["Extremadura",18],["Aragón",15],["Asturias",13],["La Rioja",9],["Canarias",9],["Murcia",9],["Navarra",7],["Cantabria",6]],"byCountry":[["España",1108],["Alemania",230],["Italia",72],["Estados Unidos",45],["Portugal",43],["Francia",42],["Irlanda",36],["Austria",29],["Reino Unido",22],["Suiza",20],["Canadá",19],["Corea",18],["México",16],["Dinamarca",14],["Brasil",11],["Argentina",10],["Belgica",8],["Holanda",8],["Japón",8],["Australia",7],["República Checa",5],["Polonia",4],["Colombia",4],["Eslovenia",4],["Finlandia",3],["Chile",3],["Rumania",3],["Sudáfrica",3],["Noruega",2],["Lituania",2],["Estonia",1],["Hungría",1],["Islandia",1],["Suecia",1],["Bolivia",1],["Luxemburgo",1],["Serbia",1],["Eslovaquia",1],["Cuba",1]],"professions":[["Empleados",413],["Estudiantes",404],["Tecnicos",194],["Liberales",189],["Jubilados",144],["Obreros",143],["Profesores",80],["Funcionarios",78],["Parados",57],["Amas de Casa",38],["Directivos",21],["Artistas",21],["Agricultores",10],["Sacerdotes",9],["Marinos",4],["Deportistas",2],["Religiosas",1]],"startingCities":[["Sarria",382],["León",155],["Roncesvalles",137],["S. Jean P. Port",124],["Cebreiro",94],["Ponferrada",84],["Astorga",77],["Pamplona",64],["Sevilla",59],["Tui",55],["Samos",47],["Vilafranca",42],["Burgos",42],["Oporto",42],["Lugo - C.P.",37],["Resto C. León",25],["Oviedo - C.P.",23],["Valença do Minho",21],["Ourense",16],["Ferrol",16],["Logroño",15],["Resto Portugal",14],["Francia",14],["Salamanca",13],["Resto Asturias",13],["Madrid - C.F.",12],["Le Puy",12],["Vigo",10],["Sahagún",10],["Muxia",9],["Lisboa",9],["Somport",9],["Zamora",8],["Irún",7],["Cataluña",7],["Jaca",6],["",6],["Triacastela",5],["Ribadeo",4],["San Sebastián",4],["Puente la Reina",4],["Lourenzá",4],["Barcelona",4],["Alemania",3],["Cáceres",3],["Carrión de los Condes",3],["Zaragoza",3],["Com. Valenciana",3],["Puebla de Sanabria",3],["Santander",3],["Ponte de Lima",3],["Mérida",2],["Resto Andalucia",2],["Sto. Domingo de la Calzada",2],["Suiza",2],["Cataluña",2],["Bilbao",2],["R.Pais Vasco",2],["Vezelay",2],["Braga",2],["Mondoñedo",2],["Resto de Extremadura",2],["Oviedo",2],["Avilés",2],["Francia",2],["Estella",2],["Hospital de Orbigo",1],["Finisterra",1],["Resto Cantabria",1],["Nájera",1],["Gudiña",1],["Bélgica",1],["Gijón",1],["Huelva",1],["Malaga",1],["Porriño",1],["Vilalba",1],["Laza",1],["Hendaya",1]],"startingRegions":[["Lugo",576],["León",394],["Navarra",207],["France",164],["Portugal",91],["Pontevedra",66],["Sevilla",61],["Burgos",42],["Asturias",41],["A Coruña",26],["Ourense",18],["La Rioja",18],["Salamanca",13],["Barcelona",13],["Gipuzkoa",13],["Madrid",12],["Zamora",11],["Huesca",6],["City&nbsp;Was Blank",6],["Cantabria",4],["Badajoz",4],["Palencia",3],["Zaragoza",3],["Valencia",3],["Germany",3],["Cáceres",3],["Switzerland",2],["Vizcaya",2],["Belgium",1],["Huelva",1],["Málaga",1]],"caminos":[["Frances-Camino de",1393],["Portugues-Camino",157],["Via de la Plata",112],["Primitivo-Camino",60],["Norte-Camino de",49],["Ingles-Camino",16],["Muxia-Finisterre",10],["Otros caminos",6],["Otros caminos",5]]},"4":{"year":"2009","month":"4","pilgrims":10244,"gender":[["Hombre",5945],["Mujer",4299]],"transport":[["Pie",8814],["Bicicleta",1384],["Caballo",46]],"age":[["30 - 60",5333],["< 30",3905],["> 60",1006]],"motivation":[["Religioso y otros",5259],["Religioso",3901],["No religioso",1084]],"spanishFrom":[["Madrid",1291],["Comunidad Valenciana",823],["Galicia",717],["Cataluña",699],["Andalucía",660],["Castilla León",332],["Castilla la Mancha",274],["Pais Vasco",267],["Extremadura",197],["Murcia",149],["Canarias",117],["Baleares",97],["Navarra",95],["Asturias",91],["Cantabria",83],["Aragón",80],["La Rioja",29],["Ceuta",24],["Otra",18]],"byCountry":[["España",6043],["Alemania",1014],["Portugal",532],["Francia",385],["Italia",299],["Estados Unidos",189],["Austria",170],["Reino Unido",162],["Irlanda",160],["Finlandia",127],["Canadá",116],["Suiza",90],["Holanda",75],["Belgica",70],["México",69],["Australia",65],["Dinamarca",65],["Brasil",65],["Suecia",61],["Polonia",47],["Noruega",46],["Corea",46],["República Checa",32],["Colombia",27],["Hungría",23],["Japón",23],["Luxemburgo",23],["Venezuela",21],["Argentina",21],["Sudáfrica",14],["Eslovenia",12],["Bolivia",11],["Uruguay",11],["Perú",10],["Rumania",10],["Eslovaquia",9],["Nueva Zelanda",9],["Estonia",8],["Costa Rica",8],["España",7],["Tailandia",6],["Grecia",5],["Puerto Rico",5],["Ecuador",5],["Rep. Dominicana",4],["Bulgaria",4],["Chile",3],["Islandia",3],["Israel",3],["Rusia",3],["Turquía",3],["Taiwán",2],["Croacia",2],["Andorra",2],["China",2],["Paraguay",1],["Guinea - Bissau",1],["Ucrania",1],["Albania",1],["Egipto",1],["Islas Feroe",1],["Ghana",1],["Santa Lucía",1],["Lituania",1],["Dominica",1],["Letonia",1],["Nicaragua",1],["Tanzania",1],["Filipinas",1],["Singapur",1],["Trinidad y Tobago",1]],"professions":[["Estudiantes",2614],["Empleados",1961],["Tecnicos",1186],["Liberales",1033],["Profesores",878],["Jubilados",856],["Obreros",555],["Funcionarios",408],["Amas de Casa",237],["Parados",211],["Directivos",106],["Artistas",66],["Agricultores",41],["Sacerdotes",39],["Oikoten",16],["Marinos",14],["Religiosas",12],["Deportistas",11]],"startingCities":[["Sarria",2729],["Cebreiro",823],["S. Jean P. Port",642],["Roncesvalles",573],["León",545],["Ponferrada",481],["Tui",465],["Astorga",307],["Valença do Minho",255],["Burgos",220],["Ourense",213],["Pamplona",207],["Oporto",196],["Vilafranca",180],["Triacastela",177],["Sevilla",162],["Le Puy",126],["Ferrol",108],["Oviedo - C.P.",103],["Samos",97],["Francia",83],["Logroño",78],["Resto C. León",76],["Lugo - C.P.",70],["Braga",70],["Sahagún",62],["Vega de Valcarce",56],["Ribadeo",55],["Ponte de Lima",47],["Irún",46],["Resto Portugal",45],["Vilalba",43],["Lisboa",42],["Somport",41],["Santander",40],["Alemania",39],["Mérida",36],["Oviedo",33],["Cataluña",29],["Frómista",27],["Jaca",26],["Madrid - C.F.",25],["Bilbao",23],["Gudiña",23],["Xunqueira de Ambia",22],["R.Pais Vasco",21],["Avilés",20],["Zamora",20],["Resto Asturias",19],["Puebla de Sanabria",18],["Salamanca",16],["Gijón",16],["Barcelona",16],["Puente la Reina",15],["Fonsagrada - C.P.",14],["Sto. Domingo de la Calzada",13],["Chaves-Portugal",12],["Lourdes",11],["Holanda",11],["Finisterra",11],["Carrión de los Condes",11],["Bélgica",10],["Suiza",10],["Laza",10],["",10],["Resto Andalucia",9],["Vigo",9],["Resto Asturias - C.P.",9],["Porriño",9],["Abadin",8],["Canfranc",8],["Neda",7],["San Sebastián",7],["París",6],["Mondoñedo",6],["Grandas de Salime - C.P.",6],["Resto de Extremadura",6],["Resto C. León - V.P.",6],["Resto País Vasco",6],["Montserrat",5],["Castrojeriz",5],["Muxia",5],["Rabanal del Camino",5],["Hendaya",5],["Estella",5],["Tineo - C.P.",5],["Madrid",4],["Hospital de Orbigo",4],["Ortigueira",4],["Valencia",4],["Granja de Moreruela",4],["Tineo",3],["Arles",3],["Granada",3],["Cáceres",3],["Valcarlos",3],["Francia",3],["Castilla la Mancha",3],["Nájera",3],["Com. Valenciana",3],["Vincios",2],["Reino Unido",2],["Zaragoza",2],["Córdoba",2],["Cataluña",2],["Grandas de Salime",2],["Valladolid",2],["San Juan de Ortega",2],["Malaga",2],["Vegadeo",1],["Grado",1],["Benavente",1],["Huelva",1],["Italia",1],["Verín",1],["Austria",1],["Resto Cantabria",1],["Badajoz",1],["Fonsagrada",1],["Vezelay",1],["Sobrado",1]],"startingRegions":[["Lugo",4023],["León",1722],["France",921],["Navarra",803],["Portugal",655],["Pontevedra",485],["Ourense",269],["Burgos",227],["Asturias",218],["Sevilla",171],["A Coruña",136],["La Rioja",94],["Gipuzkoa",80],["Barcelona",52],["Badajoz",43],["Zamora",43],["Cantabria",41],["Germany",39],["Palencia",38],["Huesca",34],["Madrid",29],["Vizcaya",23],["Salamanca",16],["Porgugal",12],["Holland",11],["Belgium",10],["Switzerland",10],["City&nbsp;Was Blank",10],["Valencia",7],["Granada",3],["Cáceres",3],["Albacete",3],["Málaga",2],["UK",2],["Zaragoza",2],["Córdoba",2],["Valladolid",2],["Huelva",1],["Italy",1],["Austria",1]],"caminos":[["Frances-Camino de",7823],["Portugues-Camino",1140],["Via de la Plata",577],["Norte-Camino de",339],["Primitivo-Camino",208],["Ingles-Camino",119],["Muxia-Finisterre",16],["Otros caminos",12],["Otros caminos",10]]},"5":{"year":"2009","month":"5","pilgrims":16445,"gender":[["Hombre",10015],["Mujer",6430]],"transport":[["Pie",13349],["Bicicleta",3046],["Caballo",50]],"age":[["30 - 60",10109],["> 60",3942],["< 30",2394]],"motivation":[["Religioso y otros",7996],["Religioso",7176],["No religioso",1273]],"spanishFrom":[["Madrid",1045],["Cataluña",975],["Andalucía",622],["Galicia",598],["Castilla León",476],["Comunidad Valenciana",410],["Pais Vasco",406],["Castilla la Mancha",253],["Aragón",152],["Asturias",145],["Canarias",131],["Extremadura",110],["Baleares",108],["Navarra",82],["Murcia",77],["Cantabria",75],["La Rioja",38],["Otra",21],["Melilla",3],["Ceuta",1]],"byCountry":[["España",5728],["Alemania",2938],["Francia",1349],["Italia",999],["Portugal",867],["Holanda",402],["Austria",397],["Estados Unidos",356],["Canadá",355],["Irlanda",290],["Suecia",264],["Reino Unido",244],["Dinamarca",213],["Finlandia",209],["Suiza",208],["Australia",186],["Brasil",179],["Belgica",172],["Noruega",130],["Corea",125],["Polonia",84],["Hungría",71],["México",68],["República Checa",62],["Eslovenia",60],["Japón",58],["Argentina",56],["Venezuela",39],["Nueva Zelanda",34],["Eslovaquia",30],["Sudáfrica",27],["Colombia",27],["Rusia",18],["España",15],["Croacia",14],["Estonia",13],["Letonia",12],["Rumania",11],["Chile",10],["Uruguay",9],["Luxemburgo",8],["Puerto Rico",8],["Lituania",8],["Ecuador",7],["Perú",7],["Bolivia",6],["Ucrania",5],["Turquía",5],["Andorra",4],["India",4],["Cuba",4],["Grecia",3],["Rep. Dominicana",3],["China",3],["Guatemala",3],["Malta",3],["Taiwán",2],["Jordania",2],["Islas Feroe",2],["Cabo Verde",2],["Singapur",2],["Nigeria",2],["Israel",2],["Honduras",2],["El Salvador",2],["Macedonia",1],["Filipinas",1],["Tanzania",1],["Panamá",1],["Bielorrusia",1],["Chipre",1],["Jamaica",1],["Angola",1],["Marruecos",1],["Malasia",1],["Indonesia",1],["Argelia",1],["Bosnia",1],["Tailandia",1],["Emiratos Arabes Unidos",1],["Bulgaria",1],["Albania",1]],"professions":[["Empleados",4128],["Jubilados",3514],["Tecnicos",2030],["Liberales",1868],["Estudiantes",1044],["Obreros",880],["Funcionarios",863],["Profesores",605],["Parados",543],["Amas de Casa",518],["Directivos",181],["Artistas",106],["Sacerdotes",85],["Agricultores",40],["Marinos",17],["Religiosas",12],["Deportistas",9],["Oikoten",2]],"startingCities":[["Sarria",2306],["S. Jean P. Port",2301],["Roncesvalles",1163],["León",1082],["Cebreiro",762],["Pamplona",708],["Ponferrada",704],["Oporto",674],["Astorga",544],["Le Puy",508],["Sevilla",489],["Burgos",468],["Resto Portugal",379],["Tui",306],["Francia",299],["Vilafranca",252],["Oviedo - C.P.",205],["Somport",139],["Triacastela",139],["Samos",135],["Irún",133],["Resto C. León",132],["Salamanca",126],["Ourense",121],["Alemania",120],["Ferrol",118],["Holanda",113],["Logroño",103],["Valença do Minho",95],["Resto Asturias",82],["Santander",78],["Zamora",75],["Mérida",68],["Rabanal del Camino",65],["Lisboa",63],["Bilbao",56],["Vilalba",52],["Sahagún",50],["Ponte de Lima",46],["Oviedo",46],["Ribadeo",46],["Lugo - C.P.",45],["Jaca",43],["Vega de Valcarce",42],["Lourdes",41],["Madrid - C.F.",40],["Resto País Vasco",39],["Vezelay",37],["Braga",36],["Fonsagrada - C.P.",31],["Neda",31],["Frómista",31],["Avilés",30],["Arles",28],["Gudiña",28],["Suiza",27],["Bélgica",24],["Puente la Reina",24],["Puebla de Sanabria",22],["Sto. Domingo de la Calzada",22],["Francia",21],["Hospital de Orbigo",19],["Zaragoza",18],["Gijón",17],["Resto Cantabria",16],["Xunqueira de Ambia",16],["Resto Asturias - C.P.",16],["Hendaya",16],["Valencia",16],["Carrión de los Condes",16],["Verín",16],["Porriño",14],["Barcelona",13],["Castilla la Mancha",13],["Chaves-Portugal",13],["Resto C. León - V.P.",12],["París",12],["Resto Andalucia",12],["Fonsagrada",12],["R.Pais Vasco",10],["Cataluña",10],["",9],["Italia",9],["Austria",9],["Madrid",9],["Granja de Moreruela",8],["San Sebastián",8],["Malaga",7],["Grandas de Salime - C.P.",7],["Granada",6],["Nájera",6],["Com. Valenciana",6],["Cáceres",6],["Grandas de Salime",5],["Resto de Extremadura",5],["Cataluña",5],["Vigo",4],["Canfranc",4],["Huelva",4],["Muxia",4],["Badajoz",4],["Montserrat",4],["Mondoñedo",3],["Estella",3],["Tineo",3],["Laza",3],["Benavente",3],["Castrojeriz",2],["Resto Europa",2],["Cast. la Mancha",2],["Castilla La Mancha",1],["Murcia",1],["Tineo - C.P.",1],["La Mesa",1],["San Juan de Ortega",1],["Peñaseita",1],["Roma",1],["Abadin",1],["Gonzar",1],["Cadavo",1],["Córdoba",1],["Dinamarca",1],["Finisterra",1],["Egipto",1],["Reino Unido",1]],"startingRegions":[["Lugo",3534],["France",3402],["León",2902],["Navarra",1898],["Portugal",1293],["Sevilla",501],["Burgos",471],["Asturias",414],["Pontevedra",324],["Gipuzkoa",190],["Ourense",184],["A Coruña",154],["La Rioja",131],["Salamanca",126],["Germany",120],["Holland",113],["Zamora",108],["Cantabria",94],["Badajoz",77],["Vizcaya",56],["Madrid",49],["Huesca",47],["Palencia",47],["Barcelona",32],["Switzerland",27],["Belgium",24],["Valencia",22],["Zaragoza",18],["Albacete",16],["Porgugal",13],["Italy",10],["Austria",9],["City&nbsp;Was Blank",9],["Málaga",7],["Granada",6],["Cáceres",6],["Huelva",4],["Europe Other",2],["UK",1],["Murcia",1],["Córdoba",1],["Denmark",1],["Egypt",1]],"caminos":[["Frances-Camino de",12591],["Portugues-Camino",1617],["Via de la Plata",1055],["Norte-Camino de",664],["Primitivo-Camino",309],["Ingles-Camino",149],["Otros caminos",46],["Otros caminos",9],["Muxia-Finisterre",5]]},"6":{"year":"2009","month":"6","pilgrims":19316,"gender":[["Hombre",11565],["Mujer",7751]],"transport":[["Pie",15399],["Bicicleta",3869],["Caballo",45],["Silla de ruedas",3]],"age":[["30 - 60",11568],["> 60",4086],["< 30",3662]],"motivation":[["Religioso y otros",9729],["Religioso",8029],["No religioso",1558]],"spanishFrom":[["Madrid",1581],["Cataluña",1266],["Andalucía",1031],["Comunidad Valenciana",868],["Castilla León",596],["Pais Vasco",569],["Galicia",526],["Castilla la Mancha",342],["Asturias",245],["Canarias",219],["Murcia",217],["Aragón",192],["Extremadura",185],["Cantabria",108],["Navarra",101],["Baleares",98],["La Rioja",75],["Otra",17],["Ceuta",6],["Melilla",4]],"byCountry":[["España",8246],["Alemania",2793],["Francia",1358],["Italia",1249],["Portugal",840],["Estados Unidos",491],["Holanda",439],["Canadá",373],["Austria",354],["Irlanda",306],["Reino Unido",221],["Brasil",221],["Suiza",217],["Belgica",217],["Australia",191],["Suecia",168],["República Checa",167],["Finlandia",148],["Corea",143],["Dinamarca",134],["Polonia",111],["Hungría",101],["Noruega",100],["Sudáfrica",80],["Japón",79],["Eslovenia",74],["México",72],["Argentina",56],["Venezuela",44],["Nueva Zelanda",36],["Colombia",32],["Chile",23],["Eslovaquia",23],["Lituania",16],["Rumania",15],["Puerto Rico",14],["Rusia",12],["Estonia",10],["España",10],["Uruguay",9],["Ecuador",8],["Perú",7],["Ucrania",7],["Croacia",7],["Grecia",6],["Israel",6],["Bulgaria",6],["Andorra",5],["China",5],["Singapur",5],["Costa Rica",4],["Panamá",3],["Marruecos",3],["Cuba",3],["Luxemburgo",3],["Turquía",3],["Bolivia",2],["Serbia",2],["Letonia",2],["Islandia",2],["Malta",2],["Filipinas",2],["Nicaragua",2],["Honduras",2],["Paraguay",2],["El Salvador",2],["India",2],["Zimbabwe",2],["Mónaco",1],["Jamaica",1],["Chipre",1],["Sri Lanka",1],["Guinea Ecuatorial",1],["Líbano",1],["Argelia",1],["Guayana Francesa",1],["Islas Feroe",1],["Taiwán",1],["Kenya",1],["Qatar",1],["Guatemala",1],["Bosnia",1],["Moldavia",1],["Namibia",1],["Irán",1],["Rep. Dominicana",1]],"professions":[["Empleados",4176],["Jubilados",3672],["Liberales",2501],["Tecnicos",2415],["Estudiantes",1951],["Funcionarios",1113],["Obreros",1045],["Profesores",788],["Amas de Casa",605],["Parados",493],["Directivos",219],["Artistas",159],["Sacerdotes",81],["Agricultores",48],["Deportistas",19],["Marinos",17],["Religiosas",14]],"startingCities":[["S. Jean P. Port",3042],["Sarria",2452],["Roncesvalles",1530],["León",1315],["Cebreiro",974],["Ponferrada",903],["Pamplona",723],["Astorga",623],["Le Puy",617],["Burgos",566],["Tui",444],["Sevilla",398],["Oporto",388],["Francia",375],["Oviedo - C.P.",330],["Valença do Minho",293],["Vilafranca",261],["Resto Portugal",238],["Irún",223],["Holanda",204],["Somport",199],["Ferrol",184],["Alemania",170],["Resto C. León",154],["Triacastela",152],["Ourense",132],["Ribadeo",131],["Santander",124],["Samos",120],["Oviedo",106],["Logroño",97],["Resto Asturias",89],["Bilbao",83],["Resto País Vasco",70],["Salamanca",70],["Lisboa",66],["Lourdes",63],["Jaca",55],["Bélgica",54],["Avilés",50],["Suiza",48],["Zamora",46],["Chaves-Portugal",45],["Madrid - C.F.",43],["Puebla de Sanabria",39],["Braga",39],["Sto. Domingo de la Calzada",38],["Carrión de los Condes",38],["Vilalba",35],["Lugo - C.P.",34],["Frómista",32],["Arles",32],["Vezelay",32],["Cataluña",31],["Vega de Valcarce",30],["Gijón",28],["Zaragoza",28],["Hendaya",28],["Rabanal del Camino",27],["Sahagún",27],["Gudiña",27],["R.Pais Vasco",26],["Francia",25],["Hospital de Orbigo",24],["Ponte de Lima",24],["Puente la Reina",23],["Austria",23],["Resto Cantabria",23],["Mérida",22],["Resto Asturias - C.P.",18],["Montserrat",17],["Tineo",16],["Lourenzá",15],["Granada",15],["Valencia",13],["Abadin",12],["Barcelona",12],["Cáceres",11],["Resto C. León - V.P.",11],["Resto Andalucia",10],["Xunqueira de Ambia",10],["Granja de Moreruela",9],["Tineo - C.P.",9],["Fonsagrada - C.P.",8],["Estella",8],["París",8],["",7],["Cataluña",7],["Mondoñedo",7],["Neda",7],["Verín",7],["Vigo",7],["San Sebastián",6],["Italia",6],["Canfranc",6],["Madrid",5],["Fonsagrada",5],["Resto Europa",5],["Roma",3],["Castilla la Mancha",3],["Polonia",3],["Reino Unido",3],["Vegadeo",3],["Malaga",3],["Valladolid",3],["Huelva",3],["Córdoba",3],["Resto de Extremadura",3],["Valcarlos",2],["Nájera",2],["Cast. la Mancha",2],["Porriño",2],["Badajoz",2],["Com. Valenciana",2],["Castrojeriz",2],["Benavente",1],["Rusia",1],["Republica Checa",1],["Com. Valenciana",1],["Grado",1],["Inglaterra",1],["Finisterra",1],["Irlanda",1],["Cadavo",1],["Murcia",1]],"startingRegions":[["France",4421],["Lugo",3946],["León",3375],["Navarra",2286],["Portugal",1048],["Asturias",650],["Burgos",568],["Pontevedra",453],["Sevilla",408],["Gipuzkoa",325],["Holland",204],["A Coruña",192],["Ourense",176],["Germany",170],["Cantabria",147],["La Rioja",137],["Zamora",95],["Vizcaya",83],["Salamanca",70],["Palencia",70],["Barcelona",67],["Huesca",61],["Belgium",54],["Madrid",48],["Switzerland",48],["Porgugal",45],["Zaragoza",28],["Badajoz",27],["Austria",23],["Valencia",16],["Granada",15],["Cáceres",11],["Italy",9],["City&nbsp;Was Blank",7],["Europe Other",5],["Albacete",5],["UK",4],["Poland",3],["Málaga",3],["Valladolid",3],["Huelva",3],["Córdoba",3],["Russia",1],["Czech Republic",1],["Ireland",1],["Murcia",1]],"caminos":[["Frances-Camino de",15235],["Portugues-Camino",1501],["Norte-Camino de",1079],["Via de la Plata",875],["Primitivo-Camino",401],["Ingles-Camino",191],["Otros caminos",26],["Otros caminos",7],["Muxia-Finisterre",1]]},"7":{"year":"2009","month":"7","pilgrims":26212,"gender":[["Hombre",14846],["Mujer",11366]],"transport":[["Pie",22094],["Bicicleta",4060],["Caballo",58]],"age":[["30 - 60",12982],["< 30",11407],["> 60",1823]],"motivation":[["Religioso y otros",12089],["Religioso",11758],["No religioso",2365]],"spanishFrom":[["Madrid",3114],["Andalucía",2912],["Cataluña",2051],["Comunidad Valenciana",1966],["Castilla León",1112],["Pais Vasco",1087],["Castilla la Mancha",1002],["Extremadura",851],["Galicia",772],["Murcia",544],["Canarias",456],["Aragón",385],["Asturias",266],["Navarra",265],["Baleares",176],["Cantabria",133],["La Rioja",88],["Otra",46],["Ceuta",32],["Melilla",4]],"byCountry":[["España",17262],["Alemania",1646],["Italia",1307],["Francia",993],["Estados Unidos",475],["Portugal",464],["Polonia",354],["Irlanda",345],["Reino Unido",286],["Holanda",276],["Belgica",268],["Canadá",217],["Austria",211],["Dinamarca",187],["Suecia",175],["Brasil",152],["Suiza",148],["Noruega",147],["Corea",140],["México",136],["Hungría",128],["República Checa",100],["Australia",73],["Finlandia",67],["Japón",65],["Eslovenia",55],["Eslovaquia",49],["Argentina",45],["Colombia",39],["Sudáfrica",33],["Nueva Zelanda",30],["Ecuador",26],["Venezuela",24],["Estonia",21],["Chile",21],["Perú",17],["Rusia",16],["España",16],["Rumania",16],["Croacia",15],["Bulgaria",13],["Luxemburgo",13],["Puerto Rico",13],["Bolivia",10],["Lituania",9],["Andorra",9],["Ucrania",9],["Israel",7],["Uruguay",6],["Costa Rica",5],["Marruecos",5],["Letonia",4],["Islas Feroe",4],["Rep. Dominicana",3],["Singapur",3],["China",3],["Paraguay",3],["Panamá",3],["India",3],["Cuba",3],["Taiwán",2],["Grecia",2],["Gambia",2],["Togo",2],["Congo",2],["Serbia",2],["Cabo Verde",2],["Irán",2],["Filipinas",2],["Bielorrusia",2],["Haití",2],["Indonesia",2],["Liechtensein",2],["Egipto",1],["Camerún",1],["Nicaragua",1],["Etiopía",1],["Guatemala",1],["Ghana",1],["Nigeria",1],["Senegal",1],["Vanuatu",1],["Bosnia",1],["Emiratos Arabes Unidos",1],["Líbano",1],["Vietnam",1]],"professions":[["Estudiantes",8486],["Empleados",3939],["Profesores",3267],["Tecnicos",2638],["Liberales",2466],["Jubilados",1515],["Funcionarios",1170],["Obreros",1065],["Amas de Casa",528],["Parados",446],["Sacerdotes",213],["Artistas",200],["Directivos",150],["Agricultores",71],["Religiosas",32],["Marinos",15],["Deportistas",9],["Oikoten",2]],"startingCities":[["Sarria",4933],["S. Jean P. Port",2031],["Cebreiro",1974],["Ponferrada",1652],["Roncesvalles",1631],["León",1579],["Astorga",1295],["Tui",923],["Vilafranca",598],["Pamplona",551],["Burgos",551],["Oporto",458],["Ourense",416],["Triacastela",390],["Ferrol",371],["Le Puy",363],["Irún",357],["Vilalba",357],["Oviedo - C.P.",341],["Resto Portugal",327],["Oviedo",288],["Resto C. León",280],["Resto Asturias",276],["Ribadeo",243],["Francia",235],["Valença do Minho",211],["Sevilla",198],["Rabanal del Camino",167],["Samos",159],["Logroño",147],["Somport",145],["Santander",127],["Holanda",115],["Alemania",91],["Bilbao",91],["Sahagún",88],["Gijón",88],["Zamora",88],["",86],["Resto País Vasco",82],["Avilés",78],["Lugo - C.P.",77],["Vega de Valcarce",74],["Polonia",68],["Puebla de Sanabria",64],["Ponte de Lima",63],["Bélgica",62],["Rábade",61],["Hospital de Orbigo",57],["Fonsagrada - C.P.",55],["Salamanca",53],["Gudiña",50],["Suiza",49],["Laza",49],["Resto Cantabria",48],["Jaca",46],["Frómista",44],["Lisboa",41],["Vigo",39],["Vezelay",38],["Sto. Domingo de la Calzada",37],["Madrid - C.F.",36],["Neda",28],["Lourdes",27],["Arles",26],["Carrión de los Condes",26],["Puente la Reina",25],["R.Pais Vasco",23],["Braga",22],["Austria",22],["Xunqueira de Ambia",21],["Cataluña",20],["Resto Europa",20],["Hendaya",20],["Mondoñedo",19],["Mérida",19],["Resto Andalucia",18],["París",18],["Tineo",16],["Estella",16],["Francia",16],["Zaragoza",15],["Resto de Extremadura",15],["Resto C. León - V.P.",15],["Resto Asturias - C.P.",14],["Porriño",13],["Valencia",12],["Cáceres",12],["Salas",12],["Fonsagrada",12],["Granja de Moreruela",12],["Lourenzá",11],["Córdoba",11],["Abadin",10],["Granada",9],["Barcelona",9],["Com. Valenciana",9],["Chaves-Portugal",8],["Nájera",8],["Malaga",7],["Castrojeriz",6],["Badajoz",6],["Montserrat",6],["Canfranc",6],["Huelva",5],["Allariz",5],["Grado",5],["Italia",5],["Madrid",5],["Cadavo",5],["Grandas de Salime",5],["Tineo - C.P.",4],["Verín",4],["Castilla La Mancha",4],["Murcia",4],["Benavente",4],["Cataluña",3],["Republica Checa",3],["San Sebastián",2],["Finisterra",2],["Vegadeo",2],["Grandas de Salime - C.P.",1],["Valladolid",1],["Fonfría",1],["Dinamarca",1],["Reino Unido",1],["Cast. la Mancha",1],["Hungría",1],["Pontedeume",1],["Betanzos",1],["San Juan de Ortega",1],["Reino Unido",1],["Roma",1],["Inglaterra",1]],"startingRegions":[["Lugo",8246],["León",5805],["France",2919],["Navarra",2223],["Asturias",1130],["Portugal",1122],["Pontevedra",975],["Burgos",558],["Ourense",545],["Gipuzkoa",464],["A Coruña",403],["Sevilla",216],["La Rioja",192],["Cantabria",175],["Zamora",168],["Holland",115],["Vizcaya",91],["Germany",91],["City&nbsp;Was Blank",86],["Palencia",70],["Poland",68],["Huelva",66],["Belgium",62],["Salamanca",53],["Huesca",52],["Switzerland",49],["Madrid",41],["Badajoz",40],["Barcelona",38],["Austria",22],["Valencia",21],["Europe Other",20],["Zaragoza",15],["Cáceres",12],["Córdoba",11],["Granada",9],["Porgugal",8],["Málaga",7],["Italy",6],["Albacete",5],["Murcia",4],["Czech Republic",3],["UK",3],["Valladolid",1],["Hungary",1],["Denmark",1]],"caminos":[["Frances-Camino de",19774],["Norte-Camino de",2210],["Portugues-Camino",2097],["Via de la Plata",1099],["Primitivo-Camino",514],["Ingles-Camino",402],["Otros caminos",86],["Otros caminos",28],["Muxia-Finisterre",2]]},"8":{"year":"2009","month":"8","pilgrims":35100,"gender":[["Hombre",20392],["Mujer",14708]],"transport":[["Pie",28457],["Bicicleta",6554],["Caballo",77],["Silla de ruedas",12]],"age":[["30 - 60",20197],["< 30",13523],["> 60",1380]],"motivation":[["Religioso y otros",15997],["Religioso",15688],["No religioso",3415]],"spanishFrom":[["Comunidad Valenciana",3933],["Cataluña",3845],["Madrid",3601],["Andalucía",3415],["Pais Vasco",1545],["Castilla León",1220],["Galicia",1172],["Castilla la Mancha",1157],["Murcia",1005],["Aragón",498],["Extremadura",496],["Canarias",280],["Asturias",239],["Navarra",230],["Cantabria",196],["Baleares",186],["La Rioja",109],["Otra",66],["Ceuta",42],["Melilla",6]],"byCountry":[["España",23241],["Italia",4662],["Alemania",1739],["Francia",963],["Portugal",841],["Polonia",365],["Holanda",255],["Estados Unidos",253],["Austria",251],["Reino Unido",215],["Belgica",211],["Hungría",178],["Canadá",172],["Corea",168],["Irlanda",141],["Eslovaquia",123],["Brasil",116],["Argentina",102],["República Checa",91],["Dinamarca",89],["Suiza",80],["México",69],["Eslovenia",64],["Colombia",64],["Suecia",59],["Japón",50],["Australia",48],["Venezuela",46],["Chile",32],["Sudáfrica",28],["Noruega",26],["Rumania",25],["España",24],["Lituania",24],["Ecuador",21],["Perú",20],["Estonia",19],["Rusia",18],["Finlandia",16],["Luxemburgo",16],["Andorra",14],["Uruguay",11],["Grecia",11],["Bolivia",11],["Nueva Zelanda",10],["Israel",8],["Cuba",7],["China",7],["Croacia",7],["Bulgaria",7],["Ucrania",5],["Letonia",5],["Costa Rica",5],["Taiwán",5],["Rep. Dominicana",4],["San Marino",4],["Paraguay",4],["Cabo Verde",3],["Camerún",3],["Filipinas",3],["Honduras",3],["Guatemala",3],["Puerto Rico",2],["Panamá",2],["Irán",2],["Bielorrusia",2],["Bosnia",1],["Moldavia",1],["Antillas Holandesas",1],["Malasia",1],["Argelia",1],["Turquía",1],["Albania",1],["Jamaica",1],["Congo",1],["Macedonia",1],["Serbia",1],["Marruecos",1],["Islas Feroe",1],["Emiratos Arabes Unidos",1],["Jordania",1],["Vanuatu",1],["Indonesia",1],["Líbano",1],["El Salvador",1],["Liechtensein",1]],"professions":[["Empleados",7830],["Estudiantes",7709],["Tecnicos",4585],["Liberales",4039],["Profesores",3990],["Obreros",2342],["Funcionarios",1261],["Jubilados",1024],["Amas de Casa",710],["Parados",599],["Artistas",313],["Sacerdotes",265],["Directivos",254],["Agricultores",96],["Religiosas",40],["Deportistas",23],["Marinos",20]],"startingCities":[["Sarria",7315],["Roncesvalles",2746],["Cebreiro",2678],["S. Jean P. Port",2637],["Ponferrada",2336],["León",2312],["Astorga",1240],["Tui",1035],["Burgos",894],["Vilafranca",771],["Pamplona",750],["Oviedo - C.P.",696],["Ferrol",552],["Oporto",522],["Triacastela",511],["Irún",488],["Valença do Minho",466],["Ourense",453],["Oviedo",360],["Resto Asturias",319],["Samos",310],["Resto C. León",308],["Le Puy",305],["Ribadeo",300],["Resto Portugal",243],["Logroño",210],["Santander",207],["Vilalba",206],["Francia",201],["Ponte de Lima",186],["Sevilla",184],["Somport",157],["Lugo - C.P.",157],["Bilbao",148],["Gijón",137],["Vega de Valcarce",127],["Resto País Vasco",114],["Holanda",101],["Salamanca",89],["Zamora",89],["Lisboa",88],["Resto Asturias - C.P.",88],["Sahagún",86],["San Sebastián",85],["Carrión de los Condes",73],["Jaca",71],["Avilés",71],["Alemania",62],["Frómista",61],["Resto Cantabria",57],["Puebla de Sanabria",57],["Sto. Domingo de la Calzada",55],["Puente la Reina",54],["Rabanal del Camino",53],["",52],["R.Pais Vasco",51],["Madrid - C.F.",47],["Mérida",46],["Cataluña",42],["Bélgica",38],["Hospital de Orbigo",37],["Lourdes",37],["Fonsagrada - C.P.",35],["Suiza",32],["Neda",31],["Abadin",29],["Fonsagrada",29],["Braga",29],["Verín",28],["Mondoñedo",28],["Vezelay",28],["Barcelona",28],["Resto C. León - V.P.",27],["Estella",27],["Gudiña",25],["Austria",25],["Cadavo",24],["Hendaya",23],["Granja de Moreruela",23],["Montserrat",21],["Cáceres",21],["Valencia",21],["Chaves-Portugal",20],["París",20],["Lourenzá",19],["Zaragoza",17],["Tineo",17],["Italia",16],["Madrid",16],["Tineo - C.P.",15],["Grandas de Salime",15],["Resto Andalucia",14],["Porriño",14],["Nájera",14],["Resto de Extremadura",13],["Arles",12],["Com. Valenciana",12],["Laza",11],["Allariz",10],["Muxia",10],["Grandas de Salime - C.P.",10],["Canfranc",9],["Vigo",8],["Xunqueira de Ambia",8],["Castrojeriz",7],["Badajoz",7],["Huelva",7],["Cataluña",6],["La Mesa",6],["Salas",5],["Resto Europa",5],["Francia",5],["Fonfría",4],["Grado",4],["Finisterra",4],["Córdoba",4],["Granada",3],["Valladolid",3],["Castilla la Mancha",3],["Castilla La Mancha",3],["Murcia",3],["Roma",3],["Reino Unido",2],["La Bañeza",2],["Polonia",2],["Hungría",1],["Com. Valenciana",1],["Malaga",1],["Vilabade",1],["Irlanda",1],["Borres",1],["Cast. la Mancha",1]],"startingRegions":[["Lugo",11646],["León",7299],["Navarra",3577],["France",3425],["Asturias",1744],["Portugal",1534],["Pontevedra",1057],["Burgos",901],["Gipuzkoa",738],["A Coruña",597],["Ourense",535],["La Rioja",279],["Cantabria",264],["Sevilla",198],["Zamora",169],["Vizcaya",148],["Palencia",134],["Holland",101],["Barcelona",97],["Salamanca",89],["Huesca",80],["Badajoz",66],["Madrid",63],["Germany",62],["City&nbsp;Was Blank",52],["Belgium",38],["Valencia",34],["Switzerland",32],["Austria",25],["Cáceres",21],["Porgugal",20],["Italy",19],["Zaragoza",17],["Huelva",7],["Albacete",7],["Europe Other",5],["Córdoba",4],["Granada",3],["Valladolid",3],["Murcia",3],["UK",2],["Poland",2],["Hungary",1],["Málaga",1],["Ireland",1]],"caminos":[["Frances-Camino de",26948],["Norte-Camino de",2661],["Portugues-Camino",2591],["Via de la Plata",1164],["Primitivo-Camino",1042],["Ingles-Camino",583],["Otros caminos",52],["Otros caminos",45],["Muxia-Finisterre",14]]},"9":{"year":"2009","month":"9","pilgrims":20465,"gender":[["Hombre",11886],["Mujer",8579]],"transport":[["Pie",16683],["Bicicleta",3727],["Caballo",33],["Silla de ruedas",22]],"age":[["30 - 60",11787],["< 30",5376],["> 60",3302]],"motivation":[["Religioso y otros",9605],["Religioso",8804],["No religioso",2056]],"spanishFrom":[["Madrid",1862],["Andalucía",1479],["Cataluña",1446],["Comunidad Valenciana",1085],["Castilla León",914],["Galicia",813],["Pais Vasco",508],["Castilla la Mancha",451],["Aragón",302],["Murcia",301],["Extremadura",258],["Canarias",240],["Asturias",195],["Cantabria",145],["Baleares",131],["Navarra",120],["La Rioja",73],["Otra",24],["Ceuta",10],["Melilla",3]],"byCountry":[["España",10360],["Alemania",2536],["Francia",1205],["Italia",1101],["Portugal",534],["Canadá",384],["Belgica",331],["Estados Unidos",319],["Austria",318],["Reino Unido",279],["Irlanda",264],["Polonia",258],["Holanda",239],["Dinamarca",199],["Brasil",186],["Suiza",185],["Australia",152],["Eslovaquia",149],["Suecia",133],["México",132],["Hungría",122],["Finlandia",118],["República Checa",107],["Noruega",92],["Argentina",83],["Japón",75],["Corea",72],["Venezuela",54],["Eslovenia",51],["Nueva Zelanda",45],["Sudáfrica",39],["Colombia",35],["España",23],["Estonia",22],["Israel",22],["Uruguay",20],["Andorra",18],["Rusia",15],["Rumania",14],["Lituania",13],["Chile",13],["Bulgaria",9],["Bolivia",9],["Luxemburgo",8],["China",8],["Ecuador",8],["Rep. Dominicana",7],["Perú",7],["Croacia",6],["Cuba",6],["Malta",6],["Letonia",5],["Costa Rica",5],["Grecia",5],["Islandia",5],["Puerto Rico",4],["Ucrania",4],["Filipinas",3],["Guatemala",3],["Egipto",3],["Taiwán",2],["Moldavia",2],["Turquía",2],["India",2],["Dominica",2],["Tailandia",2],["Paraguay",2],["Ghana",1],["Guinea Ecuatorial",1],["Barbados",1],["Panamá",1],["Camerún",1],["Swazilandia",1],["San Marino",1],["Islas Feroe",1],["Argelia",1],["Singapur",1],["Etiopía",1],["Marruecos",1],["Timor Oriental",1],["Azerbaiyán",1],["Macedonia",1],["Congo",1],["Irán",1],["Botswana",1],["Líbano",1]],"professions":[["Empleados",5351],["Estudiantes",2990],["Jubilados",2823],["Tecnicos",2757],["Liberales",2263],["Funcionarios",1193],["Obreros",790],["Profesores",756],["Amas de Casa",541],["Parados",433],["Directivos",225],["Artistas",138],["Sacerdotes",100],["Agricultores",57],["Religiosas",18],["Deportistas",16],["Marinos",14]],"startingCities":[["Sarria",3805],["S. Jean P. Port",2353],["León",1485],["Roncesvalles",1433],["Cebreiro",1254],["Ponferrada",1110],["Astorga",879],["Pamplona",675],["Burgos",608],["Le Puy",519],["Tui",502],["Oporto",484],["Vilafranca",376],["Oviedo - C.P.",372],["Irún",272],["Valença do Minho",254],["Francia",245],["Resto C. León",185],["Sevilla",164],["Ourense",158],["Logroño",154],["Ferrol",147],["Santander",145],["Oviedo",144],["Alemania",140],["Resto Asturias",134],["Somport",133],["Bilbao",128],["Vilalba",123],["Triacastela",109],["Resto Portugal",97],["Samos",86],["Ribadeo",78],["Holanda",73],["Lugo - C.P.",66],["Sahagún",65],["Madrid - C.F.",61],["Lisboa",61],["Ponte de Lima",60],["Zamora",58],["Frómista",52],["Salamanca",47],["Jaca",45],["Suiza",44],["Bélgica",44],["Gijón",43],["Sto. Domingo de la Calzada",39],["San Sebastián",38],["Gudiña",38],["Resto Cantabria",38],["Puebla de Sanabria",35],["Avilés",34],["Vezelay",31],["Mérida",31],["Neda",30],["Carrión de los Condes",27],["R.Pais Vasco",26],["Vega de Valcarce",25],["Arles",25],["Resto País Vasco",24],["Lourdes",24],["Rabanal del Camino",22],["Resto Asturias - C.P.",22],["Fonsagrada - C.P.",22],["",22],["Granja de Moreruela",21],["Zaragoza",19],["Austria",17],["Hospital de Orbigo",17],["Mondoñedo",17],["Puente la Reina",16],["Vigo",16],["Resto C. León - V.P.",15],["Hendaya",14],["Valencia",13],["Lourenzá",12],["Chaves-Portugal",12],["Abadin",11],["París",11],["Estella",11],["Muxia",10],["Montserrat",10],["Francia",10],["Resto Andalucia",10],["Madrid",9],["Cáceres",9],["Canfranc",9],["Barcelona",9],["Tineo",8],["Braga",8],["Fonsagrada",7],["Nájera",7],["Xunqueira de Ambia",7],["Benavente",7],["Grado",5],["Com. Valenciana",5],["Tineo - C.P.",5],["Cataluña",5],["Laza",5],["Castilla la Mancha",4],["Polonia",4],["Italia",4],["Irlanda",4],["Porriño",4],["Valladolid",3],["Finisterra",3],["Castilla La Mancha",3],["Malaga",3],["Cadavo",3],["Luxemburgo",3],["Rábade",3],["Resto de Extremadura",2],["Reino Unido",2],["Cast. la Mancha",2],["Castrojeriz",2],["Salas",2],["Grandas de Salime",2],["Roma",2],["Verín",2],["Irlanda",2],["Grandas de Salime - C.P.",2],["Córdoba",2],["Vilabade",1],["Reino Unido",1],["Huelva",1],["Cataluña",1],["Valcarlos",1],["Republica Checa",1],["Resto Europa",1],["Badajoz",1],["Borres",1],["Dinamarca",1],["Vegadeo",1],["Granada",1]],"startingRegions":[["Lugo",5594],["León",4179],["France",3365],["Navarra",2136],["Portugal",964],["Asturias",775],["Burgos",610],["Pontevedra",522],["Gipuzkoa",360],["Ourense",210],["La Rioja",200],["A Coruña",190],["Cantabria",183],["Sevilla",174],["Germany",140],["Vizcaya",128],["Zamora",121],["Palencia",79],["Holland",73],["Madrid",70],["Huesca",54],["Salamanca",47],["Switzerland",44],["Belgium",44],["Badajoz",34],["Barcelona",25],["City&nbsp;Was Blank",22],["Zaragoza",19],["Valencia",18],["Austria",17],["Porgugal",12],["Cáceres",9],["Albacete",9],["Ireland",6],["Italy",6],["Poland",4],["Huelva",4],["UK",3],["Málaga",3],["Luxembourg",3],["Valladolid",3],["Córdoba",2],["Europe Other",1],["Czech Republic",1],["Denmark",1],["Granada",1]],"caminos":[["Frances-Camino de",16310],["Portugues-Camino",1486],["Norte-Camino de",1286],["Via de la Plata",644],["Primitivo-Camino",501],["Ingles-Camino",180],["Otros caminos",23],["Otros caminos",22],["Muxia-Finisterre",13]]},"10":{"year":"2009","month":"10","pilgrims":11730,"gender":[["Hombre",6988],["Mujer",4742]],"transport":[["Pie",10141],["Bicicleta",1575],["Caballo",13],["Silla de ruedas",1]],"age":[["30 - 60",7111],["> 60",2418],["< 30",2201]],"motivation":[["Religioso y otros",5962],["Religioso",4769],["No religioso",999]],"spanishFrom":[["Madrid",801],["Andalucía",726],["Cataluña",624],["Galicia",486],["Comunidad Valenciana",480],["Castilla León",330],["Pais Vasco",328],["Castilla la Mancha",150],["Canarias",118],["Aragón",115],["Baleares",113],["Murcia",106],["Asturias",77],["Cantabria",69],["Navarra",62],["Extremadura",47],["La Rioja",27],["Ceuta",5],["Otra",4],["Melilla",3]],"byCountry":[["España",4671],["Alemania",1572],["Francia",927],["Italia",448],["Canadá",446],["Portugal",439],["Estados Unidos",287],["Reino Unido",224],["Australia",222],["Brasil",221],["Austria",205],["Suiza",204],["Holanda",179],["Corea",175],["Suecia",159],["Dinamarca",146],["Irlanda",139],["Finlandia",124],["Japón",115],["Noruega",101],["Belgica",89],["Polonia",81],["Hungría",80],["México",51],["Argentina",48],["Venezuela",45],["República Checa",38],["Sudáfrica",31],["Colombia",26],["Eslovenia",25],["Nueva Zelanda",23],["Eslovaquia",20],["Israel",13],["Uruguay",11],["España",10],["Chile",10],["Lituania",10],["Luxemburgo",9],["Estonia",8],["Perú",8],["Rusia",8],["Costa Rica",8],["Bulgaria",7],["Rumania",6],["Andorra",5],["China",5],["Puerto Rico",5],["Islas Feroe",4],["Croacia",4],["Ecuador",4],["Rep. Dominicana",3],["Islandia",2],["Jamaica",2],["El Salvador",2],["Letonia",2],["Turquía",2],["Malasia",2],["Trinidad y Tobago",2],["Grecia",2],["Vietnam",1],["Macedonia",1],["Argelia",1],["Filipinas",1],["Cuba",1],["Bolivia",1],["Marruecos",1],["Paraguay",1],["Cabo Verde",1],["Etiopía",1],["Kenya",1],["Guatemala",1],["Liechtensein",1],["Indonesia",1],["Vanuatu",1]],"professions":[["Empleados",2914],["Jubilados",2161],["Tecnicos",1507],["Liberales",1450],["Estudiantes",987],["Funcionarios",668],["Profesores",502],["Obreros",468],["Parados",369],["Amas de Casa",312],["Directivos",138],["Artistas",102],["Sacerdotes",55],["Agricultores",50],["Marinos",19],["Religiosas",17],["Deportistas",11]],"startingCities":[["S. Jean P. Port",2024],["Sarria",1655],["Roncesvalles",980],["León",699],["Cebreiro",506],["Astorga",458],["Ponferrada",455],["Le Puy",442],["Pamplona",400],["Burgos",348],["Oporto",345],["Tui",293],["Francia",239],["Sevilla",185],["Oviedo - C.P.",174],["Resto Portugal",167],["Vilafranca",163],["Irún",150],["Ourense",127],["Somport",116],["Ferrol",99],["Samos",92],["Resto C. León",87],["Alemania",85],["Triacastela",72],["Logroño",71],["Lisboa",61],["Santander",58],["Bilbao",58],["Suiza",57],["Oviedo",49],["Valença do Minho",43],["Holanda",40],["Zamora",38],["Resto Cantabria",35],["Arles",35],["Salamanca",35],["Jaca",33],["Resto Asturias",33],["Lugo - C.P.",31],["Puebla de Sanabria",29],["Lourdes",29],["Chaves-Portugal",28],["Sahagún",26],["Vezelay",25],["Ribadeo",24],["Resto País Vasco",23],["Vilalba",22],["Gudiña",21],["Carrión de los Condes",20],["Avilés",19],["Gijón",19],["Austria",16],["Bélgica",15],["Frómista",14],["Granja de Moreruela",14],["Rabanal del Camino",14],["Madrid - C.F.",14],["Sto. Domingo de la Calzada",12],["Ponte de Lima",12],["San Sebastián",12],["R.Pais Vasco",11],["Puente la Reina",11],["Mondoñedo",11],["Resto C. León - V.P.",11],["Vega de Valcarce",10],["Zaragoza",10],["Vigo",9],["Hendaya",8],["Braga",8],["Resto Europa",8],["Francia",8],["Cáceres",7],["Estella",7],["Montserrat",7],["Resto Asturias - C.P.",7],["",7],["Valencia",7],["Mérida",6],["Hospital de Orbigo",6],["Neda",6],["Cataluña",6],["Castilla La Mancha",5],["Tineo",5],["Castrojeriz",5],["Com. Valenciana",5],["Nájera",5],["Canfranc",4],["Vincios",4],["Malaga",4],["Resto Andalucia",4],["Castilla la Mancha",4],["París",4],["Fonsagrada",4],["Cadavo",4],["Valladolid",3],["Muxia",3],["Laza",3],["Republica Checa",3],["Italia",3],["Com. Valenciana",3],["Lourenzá",3],["Finisterra",3],["Vegadeo",2],["Resto de Extremadura",2],["Grandas de Salime",2],["Tineo - C.P.",2],["Verín",2],["Madrid",2],["Grandas de Salime - C.P.",2],["Reino Unido",2],["Granada",2],["Dinamarca",2],["Benavente",1],["Huelva",1],["Roma",1],["Abadin",1],["Valcarlos",1],["Sobrado",1],["Murcia",1],["Córdoba",1],["Barcelona",1],["Finlandia",1],["Andorra",1],["Irlanda",1]],"startingRegions":[["France",2930],["Lugo",2425],["León",1929],["Navarra",1399],["Portugal",636],["Burgos",353],["Asturias",314],["Pontevedra",306],["Gipuzkoa",196],["Sevilla",189],["Ourense",153],["A Coruña",112],["Cantabria",93],["La Rioja",88],["Germany",85],["Zamora",82],["Vizcaya",58],["Switzerland",57],["Holland",40],["Huesca",37],["Salamanca",35],["Palencia",34],["Porgugal",28],["Austria",16],["Madrid",16],["Belgium",15],["Valencia",15],["Barcelona",14],["Zaragoza",10],["Albacete",9],["Europe Other",8],["Badajoz",8],["Cáceres",7],["City&nbsp;Was Blank",7],["Málaga",4],["Italy",4],["Czech Republic",3],["Valladolid",3],["Denmark",2],["UK",2],["Granada",2],["Ireland",1],["Murcia",1],["Córdoba",1],["Finland",1],["Andorra",1],["Huelva",1]],"caminos":[["Frances-Camino de",9356],["Portugues-Camino",942],["Norte-Camino de",547],["Via de la Plata",531],["Primitivo-Camino",220],["Ingles-Camino",106],["Otros caminos",15],["Otros caminos",7],["Muxia-Finisterre",6]]},"11":{"year":"2009","month":"11","pilgrims":2352,"gender":[["Hombre",1582],["Mujer",770]],"transport":[["Pie",2132],["Bicicleta",215],["Caballo",4],["Silla de ruedas",1]],"age":[["30 - 60",1479],["< 30",582],["> 60",291]],"motivation":[["Religioso y otros",1357],["Religioso",742],["No religioso",253]],"spanishFrom":[["Andalucía",171],["Cataluña",164],["Galicia",147],["Madrid",130],["Castilla León",90],["Baleares",83],["Comunidad Valenciana",69],["Pais Vasco",38],["Castilla la Mancha",29],["Aragón",29],["Canarias",25],["Murcia",20],["Asturias",20],["Extremadura",19],["Navarra",12],["Cantabria",8],["La Rioja",7],["Otra",5],["Ceuta",1]],"byCountry":[["España",1067],["Alemania",198],["Francia",159],["Italia",104],["Estados Unidos",89],["Corea",85],["Canadá",84],["Australia",47],["Brasil",45],["Austria",42],["Portugal",42],["Suiza",38],["Reino Unido",34],["Argentina",32],["Belgica",28],["Japón",26],["Irlanda",24],["Holanda",23],["México",14],["Polonia",14],["Suecia",13],["Colombia",13],["Finlandia",12],["República Checa",12],["Andorra",12],["Nueva Zelanda",11],["Eslovenia",9],["Dinamarca",7],["Estonia",7],["Eslovaquia",6],["Uruguay",5],["Rusia",4],["Sudáfrica",4],["Hungría",3],["Chile",3],["Puerto Rico",3],["Letonia",3],["Bolivia",3],["Venezuela",3],["China",2],["Perú",2],["Filipinas",2],["Noruega",2],["Rep. Dominicana",2],["Rumania",2],["Luxemburgo",1],["Guatemala",1],["Grecia",1],["Indonesia",1],["Cuba",1],["Nicaragua",1],["Irán",1],["Nigeria",1],["Bulgaria",1],["Namibia",1],["Mauritania",1],["Libia",1]],"professions":[["Empleados",472],["Liberales",326],["Tecnicos",322],["Jubilados",282],["Estudiantes",219],["Obreros",189],["Funcionarios",142],["Parados",139],["Profesores",109],["Amas de Casa",45],["Artistas",42],["Directivos",22],["Agricultores",18],["Marinos",12],["Sacerdotes",10],["Religiosas",2],["Deportistas",1]],"startingCities":[["S. Jean P. Port",478],["Sarria",244],["Roncesvalles",238],["León",117],["Le Puy",109],["Ponferrada",109],["Cebreiro",103],["Astorga",81],["Francia",72],["Pamplona",70],["Burgos",47],["Oporto",45],["Vilafranca",44],["Oviedo - C.P.",36],["Sevilla",32],["Tui",29],["Somport",29],["Resto Portugal",26],["Logroño",21],["Triacastela",21],["Ferrol",21],["Suiza",20],["Irún",19],["Valença do Minho",19],["Resto C. León",15],["Jaca",15],["Alemania",15],["Bélgica",13],["Lourdes",13],["Ourense",12],["Vezelay",9],["Mérida",9],["Lugo - C.P.",9],["Holanda",8],["Lisboa",8],["San Sebastián",7],["Oviedo",7],["Salamanca",7],["Ribadeo",7],["Samos",6],["Braga",6],["Ponte de Lima",6],["Muxia",6],["Gijón",6],["Arles",6],["Santander",6],["Madrid - C.F.",6],["Valencia",6],["Avilés",5],["Tineo - C.P.",5],["Sto. Domingo de la Calzada",5],["Austria",4],["Zaragoza",4],["Cataluña",4],["Grandas de Salime - C.P.",4],["Bilbao",4],["Rabanal del Camino",4],["Hendaya",4],["Francia",4],["Resto Asturias - C.P.",4],["Vega de Valcarce",4],["Resto de Extremadura",3],["Carrión de los Condes",3],["Sahagún",3],["Frómista",3],["Estella",3],["Resto Andalucia",3],["Montserrat",3],["Murcia",3],["Resto Asturias",2],["Grandas de Salime",2],["Gudiña",2],["Granja de Moreruela",2],["Resto Cantabria",2],["Puente la Reina",2],["Madrid",2],["Zamora",2],["Italia",2],["Canfranc",2],["Cáceres",2],["Hospital de Orbigo",2],["Badajoz",2],["Resto País Vasco",2],["Granada",1],["R.Pais Vasco",1],["Fonsagrada - C.P.",1],["",1],["Finisterra",1],["Cataluña",1],["Barcelona",1]],"startingRegions":[["France",724],["Lugo",391],["León",379],["Navarra",313],["Portugal",110],["Asturias",71],["Burgos",47],["Sevilla",35],["Pontevedra",29],["Gipuzkoa",29],["A Coruña",28],["La Rioja",26],["Switzerland",20],["Huesca",17],["Germany",15],["Badajoz",14],["Ourense",14],["Belgium",13],["Barcelona",9],["Cantabria",8],["Madrid",8],["Holland",8],["Salamanca",7],["Valencia",6],["Palencia",6],["Austria",4],["Zaragoza",4],["Zamora",4],["Vizcaya",4],["Murcia",3],["Italy",2],["Cáceres",2],["Granada",1],["City&nbsp;Was Blank",1]],"caminos":[["Frances-Camino de",1959],["Portugues-Camino",139],["Via de la Plata",79],["Norte-Camino de",77],["Primitivo-Camino",59],["Ingles-Camino",21],["Otros caminos",10],["Muxia-Finisterre",7],["Otros caminos",1]]},"12":{"year":"2009","month":"12","pilgrims":1005,"gender":[["Hombre",711],["Mujer",294]],"transport":[["Pie",882],["Bicicleta",119],["Caballo",4]],"age":[["30 - 60",696],["< 30",232],["> 60",77]],"motivation":[["Religioso y otros",574],["Religioso",346],["No religioso",85]],"spanishFrom":[["Galicia",129],["Madrid",72],["Cataluña",62],["Andalucía",48],["Castilla León",47],["Baleares",41],["Aragón",32],["Comunidad Valenciana",31],["Pais Vasco",29],["Asturias",25],["Canarias",21],["Castilla la Mancha",19],["Cantabria",14],["Extremadura",8],["Murcia",7],["La Rioja",5],["Navarra",5],["Otra",1]],"byCountry":[["España",596],["Portugal",62],["Corea",47],["Alemania",40],["Italia",38],["Francia",35],["Brasil",24],["Estados Unidos",19],["Australia",17],["Canadá",15],["Suiza",12],["Japón",12],["Irlanda",10],["Holanda",10],["Belgica",8],["Austria",8],["Reino Unido",6],["México",5],["Suecia",4],["Argentina",4],["Bulgaria",3],["Sudáfrica",3],["Polonia",3],["Colombia",3],["Dinamarca",3],["República Checa",2],["Uruguay",2],["Nueva Zelanda",2],["Eslovaquia",2],["Perú",2],["Finlandia",1],["Rumania",1],["Hungría",1],["Eslovenia",1],["Cuba",1],["Venezuela",1],["Grecia",1],["Estonia",1]],"professions":[["Empleados",237],["Tecnicos",134],["Liberales",113],["Estudiantes",107],["Obreros",89],["Funcionarios",85],["Jubilados",66],["Parados",58],["Profesores",49],["Amas de Casa",19],["Artistas",16],["Directivos",11],["Agricultores",8],["Sacerdotes",4],["Deportistas",4],["Religiosas",3],["Marinos",2]],"startingCities":[["Sarria",170],["S. Jean P. Port",118],["Tui",77],["Roncesvalles",71],["Cebreiro",69],["Oporto",58],["León",39],["Ponferrada",34],["Oviedo - C.P.",28],["Astorga",23],["Pamplona",22],["Francia",19],["Burgos",18],["Vilafranca",17],["Le Puy",16],["Sevilla",14],["Irún",14],["Zamora",14],["Ourense",12],["Triacastela",10],["Samos",9],["Ferrol",9],["Resto C. León",8],["Somport",8],["Logroño",8],["Lugo - C.P.",7],["Suiza",6],["Valença do Minho",6],["Chaves-Portugal",6],["Ribadeo",5],["Resto Portugal",5],["Oviedo",5],["Lisboa",4],["Montserrat",4],["Gudiña",4],["Vilalba",3],["Resto Asturias - C.P.",3],["Arles",3],["Lourdes",3],["Jaca",3],["Bilbao",3],["Rabanal del Camino",3],["Granada",2],["Resto Europa",2],["Italia",2],["Fonsagrada - C.P.",2],["Resto Asturias",2],["Sto. Domingo de la Calzada",2],["Madrid - C.F.",2],["Ponte de Lima",2],["Puente la Reina",2],["Resto Andalucia",2],["Estella",2],["Valencia",2],["Alemania",2],["Sahagún",2],["Salamanca",2],["Frómista",1],["",1],["Carrión de los Condes",1],["Huelva",1],["Resto de Extremadura",1],["Gijón",1],["Finisterra",1],["Cast. la Mancha",1],["Fonsagrada",1],["Francia",1],["Madrid",1],["Avilés",1],["Hendaya",1],["R.Pais Vasco",1],["Castilla La Mancha",1],["Muxia",1],["Resto Cantabria",1]],"startingRegions":[["Lugo",276],["France",169],["León",126],["Navarra",97],["Pontevedra",77],["Portugal",75],["Asturias",40],["Burgos",18],["Sevilla",16],["Ourense",16],["Gipuzkoa",15],["Zamora",14],["A Coruña",11],["La Rioja",10],["Porgugal",6],["Switzerland",6],["Barcelona",4],["Huesca",3],["Madrid",3],["Vizcaya",3],["Salamanca",2],["Italy",2],["Valencia",2],["Granada",2],["Europe Other",2],["Germany",2],["Palencia",2],["Albacete",2],["Huelva",1],["Badajoz",1],["Cantabria",1],["City&nbsp;Was Blank",1]],"caminos":[["Frances-Camino de",701],["Portugues-Camino",152],["Via de la Plata",60],["Primitivo-Camino",40],["Norte-Camino de",38],["Ingles-Camino",9],["Muxia-Finisterre",2],["Otros caminos",2],["Otros caminos",1]]},"all":{"year":"2009","month":"","pilgrims":145878,"gender":[["Hombre",85944],["Mujer",59934]],"transport":[["Pie",120608],["Bicicleta",24890],["Caballo",341],["Silla de ruedas",39]],"age":[["30 - 60",82908],["< 30",44418],["> 60",18552]],"motivation":[["Religioso y otros",70304],["Religioso",62189],["No religioso",13385]],"spanishFrom":[["Madrid",13829],["Cataluña",11350],["Andalucía",11262],["Comunidad Valenciana",9843],["Galicia",5574],["Castilla León",5276],["Pais Vasco",4853],["Castilla la Mancha",3755],["Murcia",2447],["Extremadura",2201],["Aragón",1811],["Canarias",1638],["Asturias",1329],["Baleares",1101],["Navarra",983],["Cantabria",841],["La Rioja",463],["Otra",202],["Ceuta",121],["Melilla",23]],"byCountry":[["España",79007],["Alemania",14789],["Italia",10340],["Francia",7459],["Portugal",4855],["Estados Unidos",2540],["Canadá",2194],["Austria",1995],["Holanda",1916],["Irlanda",1722],["Reino Unido",1700],["Belgica",1410],["Polonia",1321],["Brasil",1248],["Suiza",1208],["Corea",1079],["Dinamarca",1061],["Suecia",1039],["Australia",1015],["Finlandia",825],["Hungría",710],["Noruega",647],["México",638],["República Checa",618],["Japón",527],["Argentina",461],["Eslovaquia",413],["Eslovenia",357],["Venezuela",278],["Colombia",273],["Sudáfrica",262],["Nueva Zelanda",200],["Chile",120],["Estonia",110],["Rumania",104],["Rusia",94],["Uruguay",88],["Ecuador",85],["Lituania",83],["Luxemburgo",82],["Perú",82],["Andorra",69],["Israel",61],["Bolivia",56],["Croacia",55],["Puerto Rico",54],["Bulgaria",52],["Grecia",37],["Costa Rica",35],["Letonia",35],["China",35],["Ucrania",33],["Rep. Dominicana",27],["Cuba",27],["Turquía",16],["Guatemala",15],["Filipinas",15],["Taiwán",14],["Islas Feroe",14],["Paraguay",13],["Islandia",13],["Marruecos",12],["Singapur",12],["Malta",11],["India",11],["Panamá",10],["Tailandia",9],["Cabo Verde",8],["Irán",7],["Honduras",7],["El Salvador",7],["Indonesia",6],["Serbia",6],["San Marino",5],["Egipto",5],["Jamaica",5],["Argelia",5],["Nicaragua",5],["Bielorrusia",5],["Camerún",5],["Moldavia",4],["Macedonia",4],["Nigeria",4],["Liechtensein",4],["Malasia",4],["Congo",4],["Líbano",4],["Bosnia",4],["Emiratos Arabes Unidos",3],["Dominica",3],["Vanuatu",3],["Trinidad y Tobago",3],["Etiopía",3],["Jordania",3],["Albania",3],["Ghana",3],["Gambia",2],["Zimbabwe",2],["Namibia",2],["Haití",2],["Chipre",2],["Tanzania",2],["Kenya",2],["Guinea Ecuatorial",2],["Vietnam",2],["Togo",2],["Qatar",1],["Mónaco",1],["Sri Lanka",1],["Santa Lucía",1],["Senegal",1],["Angola",1],["Guayana Francesa",1],["Libia",1],["Antillas Holandesas",1],["Barbados",1],["Swazilandia",1],["Timor Oriental",1],["Azerbaiyán",1],["Botswana",1],["Mauritania",1],["Guinea - Bissau",1]],"professions":[["Empleados",31639],["Estudiantes",26845],["Tecnicos",17882],["Liberales",16378],["Jubilados",16108],["Profesores",11105],["Obreros",7675],["Funcionarios",7025],["Amas de Casa",3575],["Parados",3393],["Directivos",1346],["Artistas",1175],["Sacerdotes",871],["Agricultores",444],["Religiosas",153],["Marinos",136],["Deportistas",108],["Oikoten",20]],"startingCities":[["Sarria",26203],["S. Jean P. Port",15826],["Roncesvalles",10564],["Cebreiro",9417],["León",9410],["Ponferrada",7913],["Astorga",5566],["Pamplona",4202],["Tui",4169],["Burgos",3783],["Oporto",3236],["Le Puy",3024],["Vilafranca",2725],["Oviedo - C.P.",2314],["Sevilla",1905],["Francia",1890],["Irún",1723],["Valença do Minho",1686],["Ourense",1677],["Ferrol",1641],["Triacastela",1611],["Resto Portugal",1563],["Resto C. León",1282],["Samos",1075],["Oviedo",1048],["Somport",983],["Resto Asturias",970],["Logroño",908],["Ribadeo",898],["Vilalba",842],["Santander",789],["Alemania",729],["Holanda",666],["Bilbao",596],["Lugo - C.P.",547],["Salamanca",460],["Ponte de Lima",456],["Lisboa",449],["Zamora",440],["Sahagún",422],["Vega de Valcarce",369],["Resto País Vasco",364],["Rabanal del Camino",361],["Gijón",359],["Jaca",351],["Avilés",312],["Suiza",297],["Madrid - C.F.",287],["Puebla de Sanabria",268],["Frómista",266],["Bélgica",261],["Lourdes",248],["Mérida",242],["Braga",228],["Gudiña",226],["Sto. Domingo de la Calzada",225],["Resto Cantabria",222],["Carrión de los Condes",220],["",205],["Vezelay",204],["Cataluña",183],["Fonsagrada - C.P.",182],["Resto Asturias - C.P.",181],["Puente la Reina",176],["R.Pais Vasco",173],["Arles",170],["Hospital de Orbigo",169],["San Sebastián",169],["Chaves-Portugal",144],["Neda",140],["Hendaya",120],["Zaragoza",120],["Austria",118],["Estella",110],["Vigo",102],["Resto C. León - V.P.",97],["Valencia",96],["Barcelona",93],["Mondoñedo",93],["Granja de Moreruela",93],["Resto Andalucia",85],["Laza",84],["Xunqueira de Ambia",84],["París",79],["Montserrat",77],["Polonia",77],["Cáceres",74],["Abadin",72],["Fonsagrada",71],["Tineo",68],["Rábade",64],["Lourenzá",64],["Verín",60],["Porriño",57],["Madrid",53],["Resto de Extremadura",52],["Com. Valenciana",51],["Tineo - C.P.",49],["Italia",49],["Canfranc",48],["Muxia",48],["Nájera",46],["Resto Europa",44],["Granada",42],["Cadavo",38],["Grandas de Salime",33],["Grandas de Salime - C.P.",32],["Castrojeriz",31],["Castilla la Mancha",30],["Finisterra",28],["Malaga",28],["Córdoba",26],["Huelva",24],["Badajoz",23],["Salas",19],["Benavente",18],["Castilla La Mancha",17],["Grado",16],["Valladolid",15],["Reino Unido",15],["Allariz",15],["Murcia",13],["Roma",11],["Cast. la Mancha",9],["Irlanda",9],["Vegadeo",9],["Republica Checa",8],["Valcarlos",7],["La Mesa",7],["Vincios",6],["Fonfría",5],["Dinamarca",5],["San Juan de Ortega",4],["Ortigueira",4],["Luxemburgo",3],["Hungría",2],["Inglaterra",2],["Sobrado",2],["La Bañeza",2],["Vilabade",2],["Borres",2],["Pontedeume",1],["Betanzos",1],["Gonzar",1],["Rusia",1],["Egipto",1],["Peñaseita",1],["Finlandia",1],["Andorra",1]],"startingRegions":[["Lugo",41121],["León",28316],["France",22544],["Navarra",15059],["Portugal",7618],["Asturias",5420],["Pontevedra",4334],["Burgos",3818],["Gipuzkoa",2429],["Ourense",2146],["Sevilla",1990],["A Coruña",1865],["La Rioja",1179],["Cantabria",1011],["Zamora",819],["Germany",729],["Holland",666],["Vizcaya",596],["Palencia",486],["Salamanca",460],["Huesca",399],["Barcelona",353],["Madrid",340],["Badajoz",317],["Switzerland",297],["Belgium",261],["City&nbsp;Was Blank",205],["Valencia",147],["Porgugal",144],["Zaragoza",120],["Austria",118],["Huelva",88],["Poland",77],["Cáceres",74],["Italy",60],["Albacete",56],["Europe Other",44],["Granada",42],["Málaga",28],["Córdoba",26],["UK",17],["Valladolid",15],["Murcia",13],["Ireland",9],["Czech Republic",8],["Denmark",5],["Luxembourg",3],["Hungary",2],["Andorra",1],["Russia",1],["Finland",1],["Egypt",1]],"caminos":[["Frances-Camino de",113004],["Portugues-Camino",11952],["Norte-Camino de",8988],["Via de la Plata",6254],["Primitivo-Camino",3391],["Ingles-Camino",1792],["Otros caminos",421],["Muxia-Finisterre",76]]}},"2010":{"1":{"year":"2010","month":"1","pilgrims":1169,"gender":[["Hombre",774],["Mujer",395]],"transport":[["Pie",1103],["Bicicleta",51],["Caballo",15]],"age":[["30 - 60",665],["< 30",413],["> 60",91]],"motivation":[["Religioso",622],["Religioso y otros",485],["No religioso",62]],"spanishFrom":[["Madrid",208],["Galicia",204],["Andalucía",79],["Asturias",60],["Comunidad Valenciana",45],["Castilla León",37],["Cataluña",35],["Baleares",20],["Castilla la Mancha",19],["Murcia",16],["Aragón",15],["Pais Vasco",15],["La Rioja",13],["Canarias",12],["Cantabria",7],["Extremadura",7],["Navarra",6]],"byCountry":[["España",798],["Alemania",65],["Corea",60],["Portugal",44],["Italia",42],["Francia",16],["Estados Unidos",14],["Holanda",14],["Brasil",11],["México",10],["Japón",9],["Reino Unido",8],["Argentina",8],["Irlanda",7],["Colombia",6],["Polonia",6],["Belgica",6],["Venezuela",5],["Australia",5],["Canadá",4],["Finlandia",4],["Ecuador",3],["Hungría",3],["Rumania",3],["Austria",3],["Perú",2],["República Checa",2],["Suiza",2],["Dinamarca",1],["Andorra",1],["Paraguay",1],["Rep. Dominicana",1],["Panamá",1],["Cuba",1],["España",1],["Chile",1]],"professions":[["Estudiantes",272],["Empleados",229],["Liberales",133],["Tecnicos",113],["Profesores",106],["Funcionarios",77],["Obreros",67],["Jubilados",58],["Amas de Casa",41],["Parados",41],["Sacerdotes",11],["Artistas",9],["Agricultores",5],["Directivos",4],["Religiosas",2],["Deportistas",1]],"startingCities":[["Sarria",317],["Cebreiro",104],["Resto C. León",78],["Ponferrada",68],["S. Jean P. Port",59],["Tui",58],["Astorga",56],["Vilalba",54],["León",48],["Roncesvalles",37],["Pamplona",26],["Oporto",25],["Ourense",24],["Vilafranca",17],["Oviedo - C.P.",16],["Valença do Minho",15],["Zamora",12],["Laza",12],["Lugo - C.P.",11],["Ferrol",10],["Burgos",9],["Oviedo",8],["Resto Portugal",7],["Avilés",6],["Logroño",6],["Braga",5],["Abadin",5],["Sevilla",5],["Somport",5],["Triacastela",4],["Madrid - C.F.",3],["Francia",3],["Irún",3],["Alemania",3],["",3],["Ribadeo",3],["Verín",3],["Granja de Moreruela",2],["Cáceres",2],["Cadavo",2],["Santander",2],["Le Puy",2],["Samos",2],["Barcelona",2],["Jaca",2],["Lourenzá",1],["Finisterra",1],["Reino Unido",1],["Resto Cantabria",1],["Bilbao",1],["Frómista",1],["Estella",1],["Xunqueira de Ambia",1],["Sto. Domingo de la Calzada",1],["Resto Asturias",1],["Lourdes",1],["Murcia",1],["Resto C. León - V.P.",1],["París",1],["Com. Valenciana",1],["Salamanca",1],["Resto Andalucia",1],["Carrión de los Condes",1],["Lisboa",1],["Holanda",1],["Hospital de Orbigo",1],["Suiza",1],["Castilla La Mancha",1],["Polonia",1],["Francia",1]],"startingRegions":[["Lugo",503],["León",269],["France",72],["Navarra",64],["Pontevedra",58],["Portugal",53],["Ourense",40],["Asturias",31],["Zamora",14],["A Coruña",11],["Burgos",9],["La Rioja",7],["Sevilla",6],["Madrid",3],["Gipuzkoa",3],["Germany",3],["City&nbsp;Was Blank",3],["Cantabria",3],["Cáceres",2],["Barcelona",2],["Palencia",2],["Huesca",2],["Vizcaya",1],["Poland",1],["UK",1],["Valencia",1],["Salamanca",1],["Holland",1],["Switzerland",1],["Albacete",1],["Murcia",1]],"caminos":[["Frances-Camino de",863],["Portugues-Camino",111],["Norte-Camino de",86],["Via de la Plata",65],["Primitivo-Camino",29],["Ingles-Camino",10],["Otros caminos",3],["Otros caminos",1],["Muxia-Finisterre",1]]},"2":{"year":"2010","month":"2","pilgrims":1640,"gender":[["Hombre",1109],["Mujer",531]],"transport":[["Pie",1533],["Bicicleta",103],["Caballo",3],["Silla de ruedas",1]],"age":[["30 - 60",898],["< 30",659],["> 60",83]],"motivation":[["Religioso y otros",830],["Religioso",721],["No religioso",89]],"spanishFrom":[["Galicia",260],["Madrid",165],["Andalucía",127],["Castilla León",91],["Comunidad Valenciana",88],["Cataluña",79],["Castilla la Mancha",50],["Canarias",42],["Aragón",37],["Baleares",36],["Pais Vasco",25],["Murcia",22],["Cantabria",18],["Navarra",8],["Asturias",7],["Extremadura",7],["La Rioja",3],["Otra",3]],"byCountry":[["España",1068],["Portugal",222],["Alemania",66],["Italia",45],["Corea",28],["México",22],["Brasil",21],["Francia",20],["Estados Unidos",18],["Argentina",13],["Chile",12],["Suiza",10],["Belgica",10],["Austria",10],["Reino Unido",9],["Japón",9],["Venezuela",5],["Holanda",4],["Colombia",4],["Rumania",4],["Australia",4],["Polonia",4],["Hungría",3],["Dinamarca",3],["Irlanda",3],["Canadá",3],["Ecuador",3],["España",2],["Noruega",2],["Andorra",2],["República Checa",2],["Suecia",2],["Finlandia",1],["Rwanda",1],["Nueva Zelanda",1],["El Salvador",1],["Cuba",1],["Eslovaquia",1],["Bolivia",1]],"professions":[["Estudiantes",452],["Empleados",341],["Liberales",177],["Tecnicos",144],["Obreros",108],["Profesores",102],["Parados",86],["Jubilados",78],["Funcionarios",68],["Amas de Casa",27],["Directivos",16],["Artistas",14],["Agricultores",11],["Sacerdotes",9],["Religiosas",4],["Marinos",3]],"startingCities":[["Sarria",354],["Cebreiro",321],["Tui",111],["Roncesvalles",102],["S. Jean P. Port",85],["Ponferrada",79],["León",54],["Oporto",48],["Astorga",44],["Pamplona",38],["Triacastela",33],["Porriño",29],["Ferrol",26],["Vilafranca",25],["Lugo - C.P.",24],["Samos",21],["Burgos",20],["Resto C. León",14],["Valença do Minho",13],["Oviedo - C.P.",13],["Sevilla",13],["Irún",13],["Resto Portugal",10],["Lisboa",9],["Chaves-Portugal",8],["Oviedo",7],["Ourense",7],["Ribadeo",7],["Francia",6],["Vilalba",5],["Logroño",5],["Resto Asturias",5],["Puente la Reina",5],["Somport",5],["Verín",4],["Vigo",4],["Resto Cantabria",4],["Jaca",4],["Le Puy",4],["Sahagún",4],["Madrid - C.F.",4],["Cast. la Mancha",3],["Ponte de Lima",3],["Canfranc",3],["Estella",3],["Montserrat",3],["Barcelona",3],["Cataluña",3],["Zamora",2],["Castilla La Mancha",2],["Gudiña",2],["Lourdes",2],["Grado",2],["Carrión de los Condes",2],["Valladolid",2],["Resto País Vasco",1],["Vega de Valcarce",1],["Salamanca",1],["Nájera",1],["R.Pais Vasco",1],["Fonsagrada - C.P.",1],["Suiza",1],["Malaga",1],["San Juan de Ortega",1],["Pontedeume",1],["Resto Asturias - C.P.",1],["Tineo - C.P.",1],["A Guarda",1],["Francia",1],["Valencia",1],["Alemania",1],["Puebla de Sanabria",1],["Huelva",1]],"startingRegions":[["Lugo",766],["León",221],["Navarra",148],["Pontevedra",145],["France",103],["Portugal",83],["Asturias",29],["A Coruña",27],["Burgos",21],["Gipuzkoa",15],["Sevilla",13],["Ourense",13],["Barcelona",9],["Porgugal",8],["Huesca",7],["La Rioja",6],["Albacete",5],["Cantabria",4],["Madrid",4],["Zamora",3],["Valladolid",2],["Palencia",2],["Huelva",1],["Switzerland",1],["Málaga",1],["Valencia",1],["Germany",1],["Salamanca",1]],"caminos":[["Frances-Camino de",1255],["Portugues-Camino",228],["Via de la Plata",44],["Norte-Camino de",43],["Primitivo-Camino",42],["Ingles-Camino",27],["Otros caminos",1]]},"3":{"year":"2010","month":"3","pilgrims":5882,"gender":[["Hombre",3461],["Mujer",2421]],"transport":[["Pie",5465],["Bicicleta",415],["Silla de ruedas",2]],"age":[["30 - 60",3108],["< 30",2289],["> 60",485]],"motivation":[["Religioso y otros",3108],["Religioso",2463],["No religioso",311]],"spanishFrom":[["Galicia",999],["Madrid",966],["Andalucía",564],["Cataluña",414],["Castilla la Mancha",399],["Comunidad Valenciana",365],["Castilla León",249],["Pais Vasco",136],["Extremadura",132],["Baleares",92],["Aragón",63],["Murcia",60],["Asturias",56],["La Rioja",45],["Canarias",41],["Cantabria",30],["Navarra",27],["Otra",8],["Melilla",2]],"byCountry":[["España",4648],["Alemania",325],["Portugal",168],["Irlanda",93],["Estados Unidos",63],["Italia",63],["Francia",61],["Reino Unido",45],["Japón",40],["Brasil",30],["Corea",30],["Austria",25],["Canadá",24],["Dinamarca",24],["México",22],["Suiza",20],["Argentina",19],["Belgica",15],["Finlandia",12],["Rep. Dominicana",11],["Colombia",10],["Holanda",10],["Venezuela",10],["Paraguay",8],["Chile",7],["Noruega",7],["Polonia",7],["Eslovenia",6],["Ecuador",6],["Israel",5],["Rumania",5],["Nueva Zelanda",5],["Australia",4],["Perú",4],["Eslovaquia",4],["Bulgaria",4],["Rusia",4],["Uruguay",4],["Panamá",3],["España",3],["Hungría",3],["Bolivia",3],["República Checa",3],["Suecia",3],["Islas Feroe",2],["Vietnam",2],["China",2],["Ucrania",2],["Puerto Rico",2],["India",1],["Nicaragua",1],["Sudáfrica",1],["Taiwán",1],["Turquía",1],["Tailandia",1]],"professions":[["Estudiantes",1596],["Empleados",1305],["Liberales",567],["Tecnicos",547],["Jubilados",366],["Obreros",358],["Profesores",328],["Funcionarios",317],["Amas de Casa",184],["Parados",176],["Directivos",45],["Artistas",25],["Agricultores",25],["Sacerdotes",22],["Marinos",16],["Deportistas",3],["Oikoten",1],["Religiosas",1]],"startingCities":[["Sarria",1839],["Tui",452],["Cebreiro",446],["Roncesvalles",304],["Valença do Minho",246],["Ponferrada",244],["Ourense",227],["León",225],["S. Jean P. Port",189],["Ferrol",161],["Astorga",143],["Triacastela",105],["Vilafranca",95],["Oporto",93],["Oviedo - C.P.",79],["Pamplona",79],["Samos",76],["Ribadeo",73],["Burgos",71],["Vilalba",70],["Sevilla",63],["Lugo - C.P.",58],["Oviedo",37],["Puebla de Sanabria",26],["Resto C. León",25],["Irún",23],["Logroño",21],["Santander",19],["Jaca",19],["Neda",19],["Somport",18],["Resto Asturias",17],["Resto Portugal",17],["Zamora",17],["Salamanca",16],["Sahagún",15],["Porriño",14],["Francia",14],["Vigo",13],["Le Puy",13],["Gijón",10],["Gudiña",10],["Lisboa",8],["Avilés",8],["Baamonde",7],["Madrid - C.F.",7],["Hospital de Orbigo",6],["Vega de Valcarce",6],["Muxia",6],["Madrid",6],["Valencia",6],["Laza",6],["Sto. Domingo de la Calzada",5],["Barcelona",5],["Ponte de Lima",5],["Zaragoza",5],["Nájera",4],["Alemania",4],["Fonsagrada - C.P.",4],["Mondoñedo",4],["Bilbao",4],["Arles",3],["San Juan de Ortega",3],["Castilla la Mancha",3],["Castrojeriz",3],["Chaves-Portugal",3],["Fonsagrada",3],["Molinaseca",3],["Resto Asturias - C.P.",3],["Córdoba",3],["Granja de Moreruela",3],["Verín",2],["R.Pais Vasco",2],["Estella",2],["Murcia",2],["Montserrat",2],["Xunqueira de Ambia",2],["Baiona",2],["Lourdes",2],["Allariz",2],["Com. Valenciana",2],["Holanda",2],["Benavente",2],["Quiroga",2],["San Sebastián",1],["Guitiriz",1],["Tineo",1],["Roma",1],["Carrión de los Condes",1],["Suiza",1],["Jerusalem",1],["Com. Valenciana",1],["Austria",1],["Frómista",1],["Mérida",1],["Abadin",1],["Cataluña",1],["Puente la Reina",1],["Finisterra",1],["Granada",1],["Vegadeo",1],["Resto Andalucia",1],["Resto Cantabria",1]],"startingRegions":[["Lugo",2689],["León",762],["Pontevedra",481],["Navarra",386],["Portugal",369],["Ourense",249],["France",239],["A Coruña",187],["Asturias",156],["Burgos",77],["Sevilla",64],["Zamora",48],["La Rioja",30],["Gipuzkoa",26],["Cantabria",20],["Huesca",19],["Salamanca",16],["Madrid",13],["Valencia",9],["Barcelona",8],["Zaragoza",5],["Vizcaya",4],["Germany",4],["Albacete",3],["Porgugal",3],["Córdoba",3],["Murcia",2],["Holland",2],["Palencia",2],["Italy",1],["Switzerland",1],["Israel",1],["Austria",1],["Badajoz",1],["Granada",1]],"caminos":[["Frances-Camino de",4014],["Portugues-Camino",850],["Via de la Plata",391],["Norte-Camino de",281],["Ingles-Camino",180],["Primitivo-Camino",144],["Otros caminos",15],["Muxia-Finisterre",7]]},"4":{"year":"2010","month":"4","pilgrims":19587,"gender":[["Hombre",11000],["Mujer",8587]],"transport":[["Pie",17293],["Bicicleta",2085],["Caballo",207],["Silla de ruedas",2]],"age":[["30 - 60",11690],["< 30",5648],["> 60",2249]],"motivation":[["Religioso y otros",9463],["Religioso",8780],["No religioso",1344]],"spanishFrom":[["Galicia",3735],["Madrid",2236],["Comunidad Valenciana",1447],["Cataluña",1415],["Andalucía",1324],["Castilla León",1279],["Pais Vasco",522],["Castilla la Mancha",518],["Aragón",318],["Asturias",284],["Baleares",252],["Navarra",243],["Extremadura",238],["Canarias",206],["Cantabria",189],["Murcia",154],["La Rioja",97],["Ceuta",37],["Otra",32],["Melilla",3]],"byCountry":[["España",14529],["Alemania",1075],["Portugal",872],["Francia",564],["Italia",323],["Estados Unidos",184],["Reino Unido",167],["Irlanda",164],["Austria",149],["Brasil",132],["Holanda",107],["Corea",94],["Canadá",94],["México",88],["Australia",85],["Suecia",75],["Suiza",69],["Belgica",67],["Dinamarca",64],["Colombia",63],["Finlandia",60],["Venezuela",56],["Argentina",52],["Japón",49],["Noruega",45],["Polonia",36],["República Checa",33],["Hungría",28],["Sudáfrica",19],["Chile",19],["Uruguay",14],["Eslovaquia",14],["Rumania",13],["Ecuador",13],["Andorra",12],["Bolivia",11],["Rusia",10],["Perú",10],["España",10],["Estonia",9],["Nueva Zelanda",8],["Rep. Dominicana",7],["Lituania",6],["Croacia",6],["Paraguay",5],["Filipinas",5],["Luxemburgo",5],["Puerto Rico",5],["El Salvador",5],["Cuba",4],["Turquía",4],["Eslovenia",4],["Ucrania",4],["Guatemala",3],["Grecia",3],["Letonia",3],["India",3],["Panamá",3],["Costa Rica",3],["China",3],["Bulgaria",3],["Malta",2],["Marruecos",2],["Nicaragua",2],["Namibia",1],["Pakistán",1],["Albania",1],["Sri Lanka",1],["Indonesia",1],["Trinidad y Tobago",1],["Emiratos Arabes Unidos",1],["Líbano",1],["Bielorrusia",1],["Nigeria",1],["Islandia",1]],"professions":[["Empleados",4802],["Estudiantes",3266],["Tecnicos",2369],["Liberales",1886],["Jubilados",1707],["Obreros",1372],["Profesores",1312],["Funcionarios",1117],["Amas de Casa",784],["Parados",515],["Directivos",185],["Agricultores",95],["Artistas",82],["Sacerdotes",36],["Marinos",34],["Religiosas",15],["Deportistas",9],["Oikoten",1]],"startingCities":[["Sarria",5049],["Cebreiro",2186],["Tui",1487],["Roncesvalles",990],["Ponferrada",899],["León",830],["S. Jean P. Port",824],["Valença do Minho",527],["Ourense",499],["Oporto",482],["Astorga",470],["Vilafranca",401],["Ferrol",350],["Burgos",305],["Resto Portugal",294],["Sevilla",240],["Pamplona",228],["Triacastela",207],["Vigo",200],["Samos",192],["Vilalba",186],["Le Puy",184],["Lugo - C.P.",179],["Oviedo - C.P.",175],["Resto C. León",119],["Francia",98],["Neda",84],["Ribadeo",82],["Somport",81],["Logroño",80],["Irún",78],["Oviedo",76],["Vega de Valcarce",72],["Ponte de Lima",66],["Resto Asturias - C.P.",54],["Salamanca",53],["Resto Asturias",53],["Santander",50],["Bilbao",48],["Lisboa",48],["Madrid - C.F.",46],["Xunqueira de Ambia",43],["Sahagún",38],["Puebla de Sanabria",36],["Braga",35],["Zamora",35],["Frómista",33],["Jaca",32],["Gudiña",30],["Alemania",29],["Mondoñedo",28],["Verín",26],["Sto. Domingo de la Calzada",26],["Avilés",23],["Gijón",23],["Finisterra",20],["Mérida",19],["R.Pais Vasco",18],["Rabanal del Camino",17],["Carrión de los Condes",16],["Cataluña",16],["Granada",15],["Resto C. León - V.P.",14],["Baamonde",14],["Fonsagrada - C.P.",14],["Resto Cantabria",14],["Puente la Reina",14],["Holanda",13],["Laza",13],["Granja de Moreruela",12],["Cadavo",12],["Resto País Vasco",12],["Madrid",12],["Cáceres",11],["Montserrat",11],["Fonfría",11],["Córdoba",10],["Valencia",10],["Lourenzá",10],["Suiza",9],["Fonsagrada",9],["Chaves-Portugal",8],["Estella",8],["Canfranc",8],["San Sebastián",8],["Hospital de Orbigo",8],["Arles",8],["Muxia",8],["Molinaseca",8],["Resto Andalucia",7],["Castilla La Mancha",7],["Valladolid",7],["Zaragoza",7],["Bélgica",7],["Francia",7],["Grandas de Salime",7],["Porriño",6],["Nájera",6],["Abadin",6],["Castilla la Mancha",6],["Tineo - C.P.",5],["Grandas de Salime - C.P.",5],["San Juan de Ortega",5],["Vezelay",5],["Lourdes",5],["Resto de Extremadura",5],["Hendaya",5],["A Guarda",4],["Tineo",4],["Valcarlos",4],["La Rioja",4],["Resto Europa",4],["Austria",3],["Baiona",3],["Vincios",3],["Badajoz",3],["Murcia",3],["La Mesa",2],["Huelva",2],["Allariz",2],["París",2],["Barcelona",2],["Italia",2],["Com. Valenciana",1],["Cast. la Mancha",1],["Irlanda",1],["Grado",1],["Roma",1],["Finlandia",1],["La Bañeza",1],["Com. Valenciana",1],["Salas",1],["Malaga",1],["Castrojeriz",1],["Cataluña",1],["Egipto",1]],"startingRegions":[["Lugo",8185],["León",2877],["Pontevedra",1703],["Portugal",1452],["Navarra",1244],["France",1219],["Ourense",613],["A Coruña",462],["Asturias",429],["Burgos",311],["Sevilla",247],["Gipuzkoa",116],["La Rioja",116],["Zamora",83],["Cantabria",64],["Madrid",58],["Salamanca",53],["Palencia",49],["Vizcaya",48],["Huesca",40],["Barcelona",30],["Germany",29],["Badajoz",27],["Granada",15],["Albacete",14],["Holland",13],["Valencia",12],["Cáceres",11],["Córdoba",10],["Switzerland",9],["Porgugal",8],["Valladolid",7],["Zaragoza",7],["Belgium",7],["Europe Other",4],["Austria",3],["Murcia",3],["Italy",3],["Huelva",2],["Ireland",1],["Finland",1],["Málaga",1],["Egypt",1]],"caminos":[["Frances-Camino de",13635],["Portugues-Camino",3155],["Via de la Plata",1111],["Norte-Camino de",754],["Primitivo-Camino",448],["Ingles-Camino",435],["Muxia-Finisterre",28],["Otros caminos",21]]},"5":{"year":"2010","month":"5","pilgrims":28849,"gender":[["Hombre",16531],["Mujer",12318]],"transport":[["Pie",24654],["Bicicleta",4071],["Caballo",120],["Silla de ruedas",4]],"age":[["30 - 60",18471],["> 60",6296],["< 30",4082]],"motivation":[["Religioso",15432],["Religioso y otros",12036],["No religioso",1381]],"spanishFrom":[["Galicia",5025],["Madrid",2398],["Cataluña",2215],["Andalucía",1553],["Comunidad Valenciana",1290],["Castilla León",1097],["Pais Vasco",825],["Castilla la Mancha",603],["Canarias",563],["Aragón",458],["Asturias",343],["Baleares",211],["Extremadura",210],["Cantabria",192],["Murcia",186],["Navarra",140],["La Rioja",70],["Otra",69],["Melilla",14],["Ceuta",8]],"byCountry":[["España",17470],["Alemania",2556],["Francia",1371],["Italia",1148],["Portugal",841],["Holanda",446],["Irlanda",433],["Austria",421],["Estados Unidos",401],["Canadá",332],["Brasil",331],["Reino Unido",294],["Suecia",254],["Belgica",236],["Suiza",200],["México",200],["Australia",187],["Finlandia",186],["Dinamarca",146],["Corea",142],["Polonia",132],["Argentina",108],["Noruega",107],["Venezuela",105],["Japón",84],["Eslovenia",75],["Hungría",67],["República Checa",61],["Colombia",57],["Eslovaquia",56],["Sudáfrica",54],["Nueva Zelanda",36],["Andorra",31],["Chile",19],["España",19],["Perú",18],["Rusia",17],["Rumania",17],["Luxemburgo",16],["Puerto Rico",14],["Uruguay",13],["Ecuador",11],["Estonia",10],["Lituania",10],["Grecia",8],["Singapur",8],["Ucrania",5],["Panamá",5],["Israel",5],["Brunei",4],["Bolivia",4],["Bulgaria",4],["Croacia",4],["China",4],["Islandia",4],["Taiwán",3],["Turquía",3],["Costa Rica",3],["Cuba",3],["Groenlandia",2],["Myanmar",2],["Letonia",2],["Filipinas",2],["Rep. Dominicana",2],["Liechtensein",2],["Chipre",2],["Marruecos",2],["Serbia",2],["Paraguay",2],["Timor Oriental",2],["Guatemala",2],["Albania",2],["Malasia",2],["Pakistán",1],["Líbano",1],["Irán",1],["Malta",1],["Dominica",1],["Armenia",1],["San Marino",1],["Belice",1],["Sudán",1],["Islas Vírgenes",1],["Honduras",1],["Rwanda",1],["Gabón",1],["Senegal",1],["Guinea Ecuatorial",1],["India",1],["Nicaragua",1]],"professions":[["Empleados",7649],["Jubilados",4896],["Tecnicos",3654],["Liberales",3165],["Funcionarios",2136],["Estudiantes",1692],["Amas de Casa",1603],["Obreros",1557],["Profesores",909],["Parados",797],["Directivos",287],["Artistas",136],["Agricultores",119],["Sacerdotes",94],["Religiosas",74],["Marinos",64],["Deportistas",15],["Oikoten",2]],"startingCities":[["Sarria",5794],["S. Jean P. Port",2598],["Cebreiro",2363],["Roncesvalles",1760],["Tui",1627],["León",1477],["Ponferrada",1351],["Oporto",1049],["Astorga",851],["Pamplona",681],["Ourense",561],["Vilafranca",560],["Le Puy",558],["Burgos",539],["Sevilla",498],["Oviedo - C.P.",384],["Ferrol",377],["Resto Portugal",334],["Francia",320],["Valença do Minho",287],["Somport",254],["Lugo - C.P.",240],["Triacastela",222],["Resto C. León",217],["Vilalba",210],["Irún",198],["Samos",135],["Lisboa",126],["Neda",122],["Holanda",118],["Ribadeo",118],["Oviedo",116],["Salamanca",115],["Logroño",111],["Muxia",100],["Zamora",97],["Bilbao",82],["Alemania",81],["Ponte de Lima",81],["Santander",80],["Resto Asturias",78],["Sahagún",76],["Frómista",76],["Vigo",66],["Molinaseca",65],["Jaca",57],["Madrid - C.F.",55],["Carrión de los Condes",50],["Resto Asturias - C.P.",48],["Sto. Domingo de la Calzada",48],["Resto Galicia",47],["Baamonde",47],["Gijón",46],["Vega de Valcarce",45],["Gudiña",43],["Puente la Reina",42],["Suiza",41],["Puebla de Sanabria",41],["Lourenzá",41],["Resto País Vasco",41],["Mérida",39],["Rabanal del Camino",38],["Hospital de Orbigo",37],["Grandas de Salime - C.P.",33],["Bélgica",30],["Francia",30],["Zaragoza",28],["Mondoñedo",27],["Fonsagrada - C.P.",26],["",26],["Granja de Moreruela",25],["Cataluña",25],["R.Pais Vasco",24],["Braga",23],["Avilés",23],["Lourdes",23],["Resto Cantabria",21],["Resto Andalucia",21],["Arles",21],["Finisterra",21],["Valencia",20],["Vezelay",19],["Barcelona",19],["Montserrat",18],["Com. Valenciana",18],["Cáceres",17],["Resto C. León - V.P.",17],["Chaves-Portugal",17],["Porriño",17],["Laza",17],["Nájera",16],["Granada",16],["Abadin",15],["Xunqueira de Ambia",15],["Com. Valenciana",13],["San Sebastián",13],["Hendaya",12],["Madrid",12],["Estella",11],["Malaga",11],["Austria",10],["Verín",9],["Tineo - C.P.",8],["Canfranc",8],["Grandas de Salime",8],["Allariz",8],["Fonsagrada",6],["Huelva",5],["Cadavo",5],["Valcarlos",5],["Resto Europa",5],["Benavente",4],["Murcia",4],["París",4],["Vincios",4],["Castilla la Mancha",4],["Córdoba",4],["Cataluña",3],["Valladolid",3],["A Guarda",2],["Baiona",2],["La Mesa",2],["A Rúa",2],["Quiroga",2],["Salas",2],["Dinamarca",2],["Polonia",2],["Inglaterra",2],["Resto de Extremadura",2],["Castilla La Mancha",2],["Italia",2],["Reino Unido",2],["Andorra",2],["San Juan de Ortega",2],["Rábade",1],["Luxemburgo",1],["La Rioja",1],["Castrojeriz",1],["Tineo",1],["Grecia",1],["Badajoz",1],["El Escamplero",1],["Jerusalem",1],["Cast. la Mancha",1],["Navarra",1],["Irlanda",1],["Irlanda",1]],"startingRegions":[["Lugo",9251],["León",4734],["France",3839],["Navarra",2500],["Portugal",1900],["Pontevedra",1718],["Asturias",750],["A Coruña",667],["Ourense",655],["Burgos",542],["Sevilla",519],["Gipuzkoa",276],["La Rioja",176],["Zamora",167],["Palencia",126],["Holland",118],["Salamanca",115],["Cantabria",101],["Vizcaya",82],["Germany",81],["Madrid",67],["Barcelona",65],["Huesca",65],["Valencia",51],["Badajoz",42],["Switzerland",41],["Belgium",30],["Zaragoza",28],["City&nbsp;Was Blank",26],["Cáceres",17],["Porgugal",17],["Granada",16],["Málaga",11],["Austria",10],["Albacete",7],["Huelva",6],["Europe Other",5],["Córdoba",4],["Murcia",4],["UK",4],["Valladolid",3],["Denmark",2],["Poland",2],["Italy",2],["Andorra",2],["Ireland",2],["Luxembourg",1],["Greece",1],["Israel",1]],"caminos":[["Frances-Camino de",20921],["Portugues-Camino",3618],["Via de la Plata",1600],["Norte-Camino de",1214],["Primitivo-Camino",749],["Ingles-Camino",500],["Muxia-Finisterre",121],["Otros caminos",100],["Otros caminos",26]]},"6":{"year":"2010","month":"6","pilgrims":33757,"gender":[["Hombre",19459],["Mujer",14298]],"transport":[["Pie",27890],["Bicicleta",5712],["Caballo",153],["Silla de ruedas",2]],"age":[["30 - 60",20995],["> 60",6428],["< 30",6334]],"motivation":[["Religioso",18598],["Religioso y otros",13379],["No religioso",1780]],"spanishFrom":[["Galicia",4228],["Madrid",3903],["Cataluña",2318],["Andalucía",2248],["Comunidad Valenciana",1839],["Castilla León",1433],["Castilla la Mancha",917],["Pais Vasco",835],["Asturias",615],["Aragón",442],["Extremadura",390],["Cantabria",388],["Canarias",388],["Murcia",310],["Navarra",227],["Baleares",170],["La Rioja",133],["Otra",51],["Ceuta",6],["Melilla",3]],"byCountry":[["España",20844],["Alemania",2407],["Italia",1823],["Portugal",1641],["Francia",1290],["Estados Unidos",650],["Holanda",453],["Irlanda",375],["Brasil",333],["Canadá",306],["Austria",294],["Reino Unido",288],["Suecia",224],["Corea",222],["Belgica",218],["Australia",202],["México",195],["Suiza",167],["Polonia",153],["Japón",149],["Argentina",139],["Dinamarca",120],["República Checa",114],["Hungría",96],["Finlandia",93],["Venezuela",89],["Noruega",83],["Colombia",80],["Eslovaquia",66],["Sudáfrica",51],["Puerto Rico",51],["Eslovenia",43],["Nueva Zelanda",41],["Israel",31],["Rusia",28],["Ecuador",27],["Lituania",26],["Rumania",25],["Perú",24],["Andorra",24],["Uruguay",23],["Chile",19],["Croacia",18],["Luxemburgo",14],["Grecia",10],["Costa Rica",10],["Guatemala",10],["Estonia",9],["China",9],["Paraguay",9],["Bulgaria",8],["Cuba",8],["Panamá",8],["Malta",7],["Filipinas",7],["Islas Feroe",6],["Ucrania",6],["Letonia",6],["Rep. Dominicana",5],["Bolivia",5],["El Salvador",5],["Nicaragua",4],["Turquía",4],["Guyana",4],["Malasia",3],["Jordania",3],["Mozambique",3],["Irán",3],["San Marino",2],["Gabón",2],["Madagascar",2],["Bielorrusia",2],["Chipre",2],["Islandia",2],["Mónaco",2],["Pakistán",2],["Brunei",2],["Singapur",2],["Armenia",2],["Serbia",2],["Albania",2],["Comores",1],["Tailandia",1],["Trinidad y Tobago",1],["Nigeria",1],["Nepal",1],["Emiratos Arabes Unidos",1],["Omán",1],["Timor Oriental",1],["Zimbabwe",1],["Barbados",1],["Myanmar",1],["Uganda",1],["Antillas Holandesas",1],["Argelia",1],["Liechtensein",1],["India",1],["Tayikistán",1],["Marruecos",1]],"professions":[["Empleados",8686],["Jubilados",5198],["Tecnicos",4214],["Liberales",3591],["Estudiantes",3264],["Funcionarios",2455],["Obreros",1669],["Amas de Casa",1548],["Profesores",1312],["Parados",900],["Directivos",346],["Artistas",166],["Sacerdotes",132],["Agricultores",110],["Religiosas",76],["Marinos",54],["Deportistas",35],["Oikoten",1]],"startingCities":[["Sarria",6940],["S. Jean P. Port",3126],["Cebreiro",2569],["Roncesvalles",2148],["Tui",1618],["León",1598],["Ponferrada",1366],["Astorga",885],["Oporto",877],["Pamplona",735],["Ferrol",646],["Vilafranca",589],["Ourense",580],["Resto Portugal",575],["Burgos",558],["Le Puy",489],["Oviedo - C.P.",416],["Valença do Minho",412],["Sevilla",404],["Lugo - C.P.",395],["Santander",368],["Francia",364],["Irún",349],["Porriño",291],["Triacastela",271],["Holanda",265],["Resto C. León",252],["Ribadeo",236],["Samos",204],["Vilalba",182],["Oviedo",177],["Resto Asturias",169],["Somport",166],["Salamanca",130],["Neda",129],["Logroño",121],["A Guarda",120],["Bilbao",118],["Madrid - C.F.",114],["Lisboa",113],["Alemania",111],["Vigo",102],["Zamora",100],["Chaves-Portugal",90],["Sahagún",87],["Mondoñedo",85],["Avilés",82],["Vega de Valcarce",69],["Ponte de Lima",69],["Braga",67],["Monforte de Lemos",64],["Bélgica",62],["Resto País Vasco",56],["Gijón",54],["Jaca",52],["Rabanal del Camino",49],["Gudiña",48],["Resto Asturias - C.P.",47],["Carrión de los Condes",46],["Puebla de Sanabria",45],["Zaragoza",43],["Frómista",42],["Abadin",40],["San Sebastián",40],["Vezelay",37],["Sto. Domingo de la Calzada",37],["Grandas de Salime - C.P.",36],["Arles",35],["Suiza",35],["Mérida",35],["Fonsagrada - C.P.",31],["Hendaya",31],["Lourdes",31],["Puente la Reina",30],["Resto Cantabria",29],["Cataluña",28],["Lourenzá",27],["",27],["Verín",26],["Vegadeo",26],["Cáceres",25],["Baamonde",25],["Granja de Moreruela",25],["Francia",24],["Resto C. León - V.P.",23],["Grandas de Salime",23],["Valencia",23],["mirallos",22],["Hospital de Orbigo",21],["R.Pais Vasco",21],["Barcelona",19],["Fonsagrada",17],["Córdoba",15],["Laza",15],["Austria",13],["Muxia",13],["Madrid",13],["Xunqueira de Ambia",13],["Finisterra",13],["Resto Andalucia",12],["Granada",12],["Montserrat",12],["Murcia",11],["A Rúa",11],["Castrojeriz",10],["Com. Valenciana",9],["Castilla la Mancha",9],["Ortigueira",9],["Resto de Extremadura",9],["Cast. la Mancha",8],["Resto Galicia",8],["París",8],["Italia",8],["Huelva",8],["Estella",8],["Com. Valenciana",7],["Navarra",7],["Castilla La Mancha",7],["Roma",7],["Salas",7],["Valladolid",7],["Malaga",7],["Canfranc",6],["Tineo",5],["Badajoz",5],["Resto Europa",5],["Reino Unido",4],["Allariz",4],["Inglaterra",4],["Tineo - C.P.",4],["La Rioja",4],["Baiona",4],["Nájera",3],["Egipto",3],["Grado",3],["Cadavo",3],["Finlandia",2],["Cataluña",2],["Polonia",2],["Rábade",2],["Valcarlos",2],["La Mesa",1],["Hungría",1],["Resto Africa",1],["Viveiro",1],["Vincios",1],["San Juan de Ortega",1],["Molinaseca",1],["Gándara",1],["Benavente",1],["Dinamarca",1]],"startingRegions":[["Lugo",11112],["León",4940],["France",4311],["Navarra",2930],["Pontevedra",2137],["Portugal",2113],["Asturias",1050],["A Coruña",818],["Ourense",697],["Burgos",569],["Gipuzkoa",466],["Sevilla",416],["Cantabria",397],["Holland",265],["Zamora",171],["La Rioja",165],["Salamanca",130],["Madrid",127],["Vizcaya",118],["Germany",111],["Porgugal",90],["Palencia",88],["Belgium",62],["Barcelona",61],["Huesca",58],["Badajoz",49],["Zaragoza",43],["Valencia",39],["Switzerland",35],["City&nbsp;Was Blank",27],["Cáceres",25],["Albacete",24],["Córdoba",15],["Italy",15],["Austria",13],["Granada",12],["Murcia",11],["Huelva",10],["UK",8],["Málaga",7],["Valladolid",7],["Europe Other",5],["Egypt",3],["Finland",2],["Poland",2],["Hungary",1],["Denmark",1],["Africa",1]],"caminos":[["Frances-Camino de",23742],["Portugues-Camino",4249],["Norte-Camino de",2166],["Via de la Plata",1660],["Primitivo-Camino",944],["Ingles-Camino",784],["Otros caminos",159],["Otros caminos",27],["Muxia-Finisterre",26]]},"7":{"year":"2010","month":"7","pilgrims":42472,"gender":[["Hombre",22576],["Mujer",19896]],"transport":[["Pie",37655],["Bicicleta",4622],["Caballo",187],["Silla de ruedas",8]],"age":[["30 - 60",21717],["< 30",17089],["> 60",3666]],"motivation":[["Religioso",23194],["Religioso y otros",16869],["No religioso",2409]],"spanishFrom":[["Madrid",6126],["Andalucía",4909],["Galicia",3033],["Comunidad Valenciana",3030],["Cataluña",3028],["Castilla León",2377],["Castilla la Mancha",1649],["Pais Vasco",1342],["Extremadura",1136],["Aragón",958],["Canarias",788],["Murcia",711],["Asturias",626],["Navarra",365],["Baleares",321],["Cantabria",249],["La Rioja",162],["Otra",76],["Ceuta",54],["Melilla",28]],"byCountry":[["España",30968],["Italia",1945],["Alemania",1606],["Francia",1205],["Portugal",839],["Estados Unidos",652],["Polonia",626],["Holanda",283],["Brasil",272],["Irlanda",265],["Reino Unido",259],["México",240],["Belgica",229],["Corea",209],["Canadá",207],["Argentina",191],["Suecia",178],["Eslovaquia",173],["Suiza",151],["Austria",148],["Hungría",147],["Dinamarca",134],["Australia",131],["Eslovenia",126],["República Checa",120],["Noruega",102],["Venezuela",98],["Colombia",94],["Japón",70],["Finlandia",61],["Lituania",59],["Rumania",55],["Ecuador",44],["Perú",42],["Rusia",40],["Nueva Zelanda",37],["Sudáfrica",34],["Estonia",32],["Chile",32],["Bolivia",26],["Uruguay",26],["Puerto Rico",23],["Marruecos",21],["Andorra",21],["Croacia",19],["Bulgaria",17],["Grecia",15],["Ucrania",11],["Luxemburgo",11],["San Marino",10],["China",10],["Paraguay",9],["Pakistán",7],["Nicaragua",6],["El Salvador",6],["Malta",6],["Letonia",5],["Moldavia",5],["Cuba",5],["Myanmar",5],["Guinea Ecuatorial",5],["Irán",4],["Costa Rica",4],["India",4],["Rep. Dominicana",4],["Filipinas",4],["Georgia",3],["Macedonia",3],["Líbano",3],["Indonesia",3],["Serbia",3],["Islandia",3],["Dominica",3],["Honduras",3],["Madagascar",2],["Camerún",2],["Brunei",2],["Turquía",2],["Congo",2],["Cabo Verde",2],["Argelia",2],["Belice",2],["Swazilandia",2],["Albania",2],["Singapur",2],["Panamá",2],["Bahamas",2],["Israel",2],["Chipre",2],["Kenya",2],["Vietnam",1],["Nigeria",1],["Mauricio",1],["Tailandia",1],["Bahrein",1],["Rwanda",1],["Armenia",1],["Túnez",1],["Nepal",1],["Omán",1],["Comores",1],["Guatemala",1],["Taiwán",1],["Martinica",1],["Antillas Holandesas",1],["Uganda",1]],"professions":[["Estudiantes",12832],["Empleados",7824],["Profesores",4357],["Tecnicos",4329],["Liberales",3504],["Jubilados",2606],["Funcionarios",2085],["Obreros",1658],["Amas de Casa",1401],["Parados",764],["Sacerdotes",338],["Directivos",245],["Artistas",194],["Religiosas",143],["Agricultores",128],["Marinos",43],["Deportistas",17],["Oikoten",4]],"startingCities":[["Sarria",10417],["Cebreiro",3283],["Tui",3039],["S. Jean P. Port",2546],["Ponferrada",2264],["Roncesvalles",1806],["León",1718],["Astorga",1501],["Ourense",1031],["Vilafranca",961],["Ferrol",873],["Oporto",705],["Valença do Minho",700],["Burgos",605],["Triacastela",593],["Oviedo - C.P.",525],["Irún",513],["Pamplona",499],["Resto Portugal",497],["Le Puy",440],["Ribadeo",436],["Lugo - C.P.",426],["Samos",404],["Mondoñedo",400],["Resto C. León",380],["Vilalba",331],["Oviedo",329],["Francia",304],["Resto Asturias",287],["Sevilla",224],["Santander",173],["Laza",172],["Neda",161],["Somport",153],["Logroño",145],["Avilés",144],["Gijón",143],["Lisboa",139],["Bilbao",135],["Ponte de Lima",134],["Holanda",118],["Gudiña",111],["Muxia",109],["Vega de Valcarce",107],["Madrid - C.F.",103],["Alemania",90],["Zamora",83],["Sahagún",83],["Rabanal del Camino",80],["Salamanca",76],["Jaca",72],["Allariz",70],["Lourenzá",69],["Baamonde",68],["Resto País Vasco",64],["Lourdes",61],["Puebla de Sanabria",60],["Resto Asturias - C.P.",57],["Frómista",43],["Xunqueira de Ambia",43],["San Sebastián",42],["Fonsagrada - C.P.",42],["Verín",42],["Suiza",41],["Porriño",41],["Carrión de los Condes",40],["Resto Cantabria",40],["Puente la Reina",39],["Sto. Domingo de la Calzada",36],["Madrid",36],["Vezelay",35],["Canfranc",33],["Bélgica",32],["R.Pais Vasco",26],["Hendaya",26],["Zaragoza",25],["Arles",25],["Hospital de Orbigo",25],["Valencia",24],["Molinaseca",24],["Resto C. León - V.P.",23],["Granja de Moreruela",23],["Braga",23],["Navarra",22],["Cataluña",21],["París",21],["Grandas de Salime - C.P.",21],["Cáceres",21],["Mérida",18],["Fonsagrada",18],["Vigo",18],["Abadin",18],["Resto Andalucia",18],["Montserrat",18],["Francia",17],["Italia",17],["Tineo - C.P.",17],["Salas",17],["Resto Europa",16],["Barcelona",15],["Chaves-Portugal",15],["Estella",15],["Com. Valenciana",14],["Resto de Extremadura",14],["Castilla la Mancha",11],["Tineo",11],["A Guarda",11],["Murcia",10],["Vegadeo",10],["Cadavo",10],["Roma",10],["La Rioja",10],["La Bañeza",9],["Castilla La Mancha",9],["Grado",8],["Grandas de Salime",8],["Resto Galicia",8],["Austria",8],["Granada",8],["Castrojeriz",7],["Valcarlos",6],["La Mesa",6],["Com. Valenciana",6],["Valladolid",5],["Badajoz",5],["Baiona",5],["Cast. la Mancha",5],["Cataluña",5],["Finisterra",5],["Republica Checa",5],["Malaga",4],["Dinamarca",4],["San Sebastian",4],["Nájera",4],["Reino Unido",4],["Córdoba",4],["Huelva",3],["Polonia",3],["San Juan de Ortega",3],["Benavente",3],["Vincios",2],["Rábade",2],["Betanzos",1],["La Rioja",1],["Grecia",1],["Cea",1],["Guitiriz",1],["Inglaterra",1],["Irlanda",1],["O Barco de Valdeorras",1],["Monforte de Lemos",1],["Hungría",1],["Lalín",1],["Andorra",1],["Las Médulas",1],["Finlandia",1]],"startingRegions":[["Lugo",16517],["León",7177],["France",3628],["Pontevedra",3117],["Navarra",2387],["Portugal",2198],["Asturias",1583],["Ourense",1470],["A Coruña",1157],["Gipuzkoa",649],["Burgos",615],["Sevilla",242],["Cantabria",213],["La Rioja",196],["Zamora",169],["Madrid",139],["Vizcaya",135],["Holland",118],["Huesca",105],["Germany",90],["Palencia",83],["Salamanca",76],["Barcelona",59],["Valencia",44],["Switzerland",41],["Badajoz",37],["Belgium",32],["Italy",27],["Zaragoza",25],["Albacete",25],["Cáceres",21],["Europe Other",16],["Porgugal",15],["Murcia",10],["Austria",8],["Granada",8],["Valladolid",5],["Czech Republic",5],["UK",5],["Huelva",5],["Denmark",4],["Córdoba",4],["Málaga",4],["Poland",3],["Greece",1],["Finland",1],["Hungary",1],["Andorra",1],["Ireland",1]],"caminos":[["Frances-Camino de",29384],["Portugues-Camino",5314],["Norte-Camino de",3289],["Via de la Plata",2132],["Primitivo-Camino",1129],["Ingles-Camino",1035],["Muxia-Finisterre",114],["Otros caminos",75]]},"8":{"year":"2010","month":"8","pilgrims":61543,"gender":[["Hombre",33991],["Mujer",27552]],"transport":[["Pie",53697],["Bicicleta",7644],["Caballo",196],["Silla de ruedas",6]],"age":[["30 - 60",32855],["< 30",25890],["> 60",2798]],"motivation":[["Religioso",36941],["Religioso y otros",21692],["No religioso",2910]],"spanishFrom":[["Madrid",9573],["Andalucía",8032],["Cataluña",6044],["Comunidad Valenciana",5436],["Galicia",3479],["Castilla León",2937],["Castilla la Mancha",2794],["Pais Vasco",1873],["Extremadura",1330],["Murcia",1117],["Aragón",850],["Asturias",790],["Canarias",630],["Navarra",469],["Cantabria",386],["Baleares",318],["La Rioja",215],["Otra",102],["Ceuta",35],["Melilla",28]],"byCountry":[["España",46438],["Italia",5840],["Alemania",1656],["Francia",1596],["Portugal",1235],["Polonia",425],["Irlanda",271],["Estados Unidos",261],["Reino Unido",247],["Belgica",228],["Holanda",208],["Corea",204],["Austria",185],["Hungría",185],["México",181],["Venezuela",177],["Brasil",161],["Argentina",157],["Eslovaquia",154],["Canadá",139],["Colombia",138],["República Checa",120],["Dinamarca",109],["Suiza",99],["Ecuador",89],["Suecia",78],["Eslovenia",73],["Australia",69],["Perú",63],["Bolivia",52],["Rumania",44],["Chile",43],["Japón",42],["Uruguay",41],["Rusia",37],["Puerto Rico",32],["Andorra",32],["Finlandia",23],["Luxemburgo",22],["Paraguay",20],["El Salvador",19],["Croacia",19],["Israel",18],["Rep. Dominicana",18],["Sudáfrica",16],["Taiwán",16],["Grecia",14],["Noruega",14],["China",13],["Guatemala",13],["Estonia",13],["Nueva Zelanda",13],["Marruecos",12],["Honduras",12],["Filipinas",10],["Ucrania",10],["Cuba",10],["Bulgaria",9],["Serbia",8],["Lituania",7],["Albania",6],["Camerún",5],["Costa Rica",5],["Kenya",5],["India",5],["Swazilandia",4],["Malta",4],["Panamá",4],["Bielorrusia",3],["Georgia",3],["Guinea Ecuatorial",3],["Singapur",3],["Nicaragua",3],["Irán",3],["Nigeria",2],["Tayikistán",2],["Armenia",2],["Vietnam",2],["Líbano",2],["Cabo Verde",2],["Senegal",2],["Timor Oriental",2],["Malasia",2],["Myanmar",2],["Brunei",1],["Togo",1],["Costa de Marfil",1],["Mozambique",1],["Angola",1],["Sudán",1],["Emiratos Arabes Unidos",1],["Indonesia",1],["Turquía",1],["Jordania",1],["Congo",1],["Nepal",1],["Siria",1],["Omán",1],["Zimbabwe",1],["Ghana",1],["Comores",1],["Islas Feroe",1],["Moldavia",1],["Argelia",1],["Antillas Holandesas",1]],"professions":[["Estudiantes",17666],["Empleados",13035],["Tecnicos",7005],["Liberales",6156],["Profesores",5553],["Obreros",3213],["Funcionarios",2442],["Jubilados",1849],["Amas de Casa",1682],["Parados",1052],["Sacerdotes",685],["Directivos",382],["Artistas",297],["Religiosas",231],["Agricultores",184],["Marinos",56],["Deportistas",30],["Oikoten",25]],"startingCities":[["Sarria",15530],["Tui",4743],["Cebreiro",4129],["Ponferrada",3013],["S. Jean P. Port",2741],["Roncesvalles",2718],["León",2470],["Ourense",2339],["Resto Asturias",1940],["Astorga",1669],["Finisterra",1309],["Ferrol",1281],["Oviedo - C.P.",960],["Vilafranca",938],["Burgos",907],["Valença do Minho",780],["Triacastela",767],["Oporto",725],["Pamplona",717],["Vilalba",707],["Irún",677],["Resto Portugal",606],["Lugo - C.P.",599],["Neda",569],["Samos",537],["Oviedo",486],["Ribadeo",477],["Resto C. León",413],["Le Puy",328],["Abadin",275],["Sevilla",273],["Logroño",241],["Francia",240],["Santander",229],["Porriño",219],["Gijón",211],["Avilés",190],["Resto Asturias - C.P.",165],["Bilbao",162],["Zamora",162],["Allariz",149],["Vigo",148],["Puebla de Sanabria",139],["Vega de Valcarce",139],["Madrid - C.F.",136],["Sahagún",134],["Lisboa",134],["Ponte de Lima",130],["Somport",115],["Salamanca",108],["Gudiña",102],["Resto País Vasco",101],["Baamonde",99],["Lourenzá",99],["Fonsagrada - C.P.",96],["Resto Cantabria",90],["Frómista",81],["Alemania",76],["Holanda",73],["Verín",70],["Resto C. León - V.P.",70],["Jaca",67],["Murcia",64],["Sto. Domingo de la Calzada",61],["Bélgica",59],["Carrión de los Condes",57],["Rabanal del Camino",56],["Cadavo",56],["San Sebastián",54],["Granja de Moreruela",50],["Mondoñedo",46],["Resto Andalucia",43],["Puente la Reina",43],["R.Pais Vasco",41],["Hospital de Orbigo",40],["Laza",39],["Montserrat",37],["Muxia",37],["Fonsagrada",37],["Com. Valenciana",37],["Resto de Extremadura",36],["Tineo - C.P.",35],["Mérida",34],["Madrid",34],["Lourdes",34],["Hendaya",34],["Braga",34],["Grandas de Salime - C.P.",32],["Cataluña",30],["Tineo",27],["Suiza",27],["Vezelay",27],["Zaragoza",26],["Xunqueira de Ambia",23],["Navarra",23],["Estella",22],["Barcelona",21],["Valencia",21],["Cáceres",20],["Grandas de Salime",17],["Molinaseca",17],["Austria",17],["Italia",17],["Francia",17],["Castilla La Mancha",16],["Granada",13],["Resto Europa",13],["Castilla la Mancha",12],["Com. Valenciana",11],["Córdoba",11],["Salas",10],["Castrojeriz",9],["Baiona",9],["París",9],["A Guarda",9],["Huelva",9],["Cast. la Mancha",8],["Arles",8],["Canfranc",8],["Ortigueira",7],["San Sebastian",7],["Chaves-Portugal",6],["Nájera",5],["San Juan de Ortega",5],["Resto Galicia",5],["Valladolid",5],["Vegadeo",5],["Republica Checa",4],["La Bañeza",4],["Vilabade",4],["Badajoz",4],["Monforte de Lemos",4],["Malaga",4],["Vincios",4],["Roma",3],["Reino Unido",3],["Cataluña",3],["La Rioja",3],["Polonia",3],["Valcarlos",2],["Leyre",2],["La Mesa",2],["Irlanda",2],["La Rioja",2],["Fonfría",1],["",1],["Hungría",1],["Rábade",1],["Reino Unido",1],["Peñaseita",1],["Gonzar",1],["Artieda",1],["Egipto",1],["Benavente",1]],"startingRegions":[["Lugo",23464],["León",8963],["Pontevedra",5132],["Asturias",4081],["France",3553],["Navarra",3527],["A Coruña",3208],["Ourense",2722],["Portugal",2409],["Burgos",921],["Gipuzkoa",880],["Zamora",352],["Cantabria",319],["Sevilla",316],["La Rioja",312],["Madrid",170],["Vizcaya",162],["Palencia",138],["Salamanca",108],["Barcelona",91],["Germany",76],["Huesca",75],["Badajoz",74],["Holland",73],["Valencia",69],["Murcia",64],["Belgium",59],["Albacete",36],["Switzerland",27],["Zaragoza",27],["Cáceres",20],["Italy",20],["Austria",17],["Europe Other",13],["Granada",13],["Córdoba",11],["Huelva",10],["Porgugal",6],["Valladolid",5],["Czech Republic",4],["Málaga",4],["UK",4],["Poland",3],["Ireland",2],["City&nbsp;Was Blank",1],["Egypt",1],["Hungary",1]],"caminos":[["Frances-Camino de",38937],["Portugues-Camino",7541],["Norte-Camino de",5989],["Via de la Plata",3764],["Primitivo-Camino",1961],["Ingles-Camino",1858],["Muxia-Finisterre",1346],["Otros caminos",146],["Otros caminos",1]]},"9":{"year":"2010","month":"9","pilgrims":36870,"gender":[["Hombre",20167],["Mujer",16703]],"transport":[["Pie",31686],["Bicicleta",5043],["Caballo",133],["Silla de ruedas",8]],"age":[["30 - 60",21839],["< 30",9224],["> 60",5807]],"motivation":[["Religioso",20173],["Religioso y otros",14875],["No religioso",1822]],"spanishFrom":[["Madrid",4248],["Andalucía",3487],["Galicia",3429],["Cataluña",2730],["Comunidad Valenciana",2118],["Castilla León",1976],["Castilla la Mancha",1223],["Pais Vasco",838],["Asturias",645],["Extremadura",617],["Canarias",576],["Aragón",535],["Murcia",498],["Cantabria",387],["Baleares",331],["Navarra",220],["La Rioja",147],["Otra",77],["Ceuta",52],["Melilla",21]],"byCountry":[["España",24155],["Alemania",2524],["Italia",1765],["Francia",1407],["Portugal",878],["Irlanda",480],["Polonia",425],["Estados Unidos",394],["Reino Unido",364],["Brasil",359],["Canadá",286],["Austria",268],["Holanda",260],["Belgica",250],["Suecia",247],["México",215],["Dinamarca",212],["Suiza",195],["Australia",185],["Argentina",176],["Finlandia",148],["República Checa",145],["Venezuela",136],["Colombia",117],["Corea",106],["Noruega",106],["Hungría",97],["Japón",96],["Eslovaquia",88],["Sudáfrica",72],["Uruguay",70],["Eslovenia",67],["Puerto Rico",53],["Rumania",41],["Chile",39],["Rusia",38],["Luxemburgo",38],["Ecuador",37],["Andorra",33],["Nueva Zelanda",28],["Bulgaria",28],["Estonia",26],["Perú",23],["Israel",19],["Bolivia",13],["Malta",13],["Lituania",11],["Filipinas",11],["Cuba",9],["Costa Rica",8],["Croacia",8],["Rep. Dominicana",7],["Paraguay",7],["Panamá",7],["El Salvador",6],["Nicaragua",6],["Letonia",5],["Ucrania",4],["Albania",4],["Grecia",4],["Guatemala",4],["India",3],["Irán",3],["Islas Feroe",3],["Swazilandia",3],["Cabo Verde",2],["Bielorrusia",2],["Singapur",2],["China",2],["Guinea Ecuatorial",2],["Turquía",2],["Honduras",1],["Líbano",1],["Ghana",1],["Antillas Holandesas",1],["Moldavia",1],["Islandia",1],["Mongolia",1],["Tanzania",1],["Sri Lanka",1],["Taiwán",1],["Guyana",1],["Tailandia",1],["Chipre",1],["Namibia",1],["Camerún",1],["Serbia",1],["Armenia",1],["Malasia",1],["Trinidad y Tobago",1],["Nepal",1],["Liechtensein",1]],"professions":[["Empleados",8849],["Tecnicos",5272],["Estudiantes",5097],["Liberales",4621],["Jubilados",4306],["Funcionarios",2276],["Obreros",1880],["Amas de Casa",1543],["Profesores",1209],["Parados",792],["Directivos",303],["Artistas",202],["Sacerdotes",195],["Agricultores",130],["Religiosas",93],["Marinos",72],["Deportistas",24],["Oikoten",6]],"startingCities":[["Sarria",10635],["Cebreiro",2831],["S. Jean P. Port",2489],["León",1918],["Tui",1863],["Ponferrada",1769],["Roncesvalles",1705],["Astorga",937],["Oporto",834],["Le Puy",713],["Burgos",693],["Ourense",688],["Vilafranca",663],["Pamplona",621],["Valença do Minho",539],["Ferrol",514],["Oviedo - C.P.",508],["Triacastela",409],["Irún",352],["Francia",342],["Resto Portugal",313],["Lugo - C.P.",301],["Oviedo",299],["Resto C. León",263],["Samos",246],["Sevilla",235],["Resto Asturias",228],["Ribadeo",201],["Santander",192],["Vilalba",170],["Ponte de Lima",152],["Bilbao",141],["Somport",136],["Baamonde",119],["Alemania",119],["Logroño",119],["Avilés",117],["Zamora",104],["Gijón",95],["Holanda",90],["Salamanca",85],["Sahagún",83],["Lisboa",80],["Gudiña",75],["Mondoñedo",73],["Madrid - C.F.",72],["Vega de Valcarce",70],["Resto Asturias - C.P.",69],["Resto País Vasco",68],["Frómista",58],["Puebla de Sanabria",52],["Hospital de Orbigo",51],["Rabanal del Camino",50],["Resto Cantabria",49],["Carrión de los Condes",47],["Neda",47],["Vigo",47],["Fonsagrada - C.P.",46],["Sto. Domingo de la Calzada",39],["Jaca",39],["Bélgica",39],["San Sebastián",39],["Granja de Moreruela",35],["Laza",33],["Mérida",32],["Xunqueira de Ambia",28],["Braga",28],["Lourdes",28],["Suiza",28],["Lourenzá",27],["Verín",25],["Hendaya",23],["Muxia",23],["R.Pais Vasco",21],["Arles",21],["Resto C. León - V.P.",20],["Francia",20],["Vezelay",19],["Fonsagrada",19],["Molinaseca",18],["Puente la Reina",18],["Cataluña",18],["Navarra",17],["Tineo",17],["Abadin",17],["Estella",17],["Baiona",16],["Castilla La Mancha",15],["Com. Valenciana",15],["Porriño",14],["Resto Europa",13],["Valencia",13],["Zaragoza",13],["Austria",13],["Cadavo",13],["Montserrat",12],["París",12],["Madrid",10],["Finisterra",10],["Tineo - C.P.",10],["Granada",9],["Italia",9],["Chaves-Portugal",9],["Barcelona",9],["Castilla la Mancha",8],["Resto Andalucia",8],["Cast. la Mancha",8],["Cáceres",8],["San Sebastian",8],["La Rioja",8],["Grandas de Salime - C.P.",8],["Grandas de Salime",6],["Com. Valenciana",6],["Polonia",6],["Resto de Extremadura",5],["Murcia",5],["Valladolid",5],["Córdoba",5],["Canfranc",5],["Roma",4],["Salas",4],["Huelva",3],["Castrojeriz",3],["Malaga",3],["Nájera",3],["Reino Unido",3],["Inglaterra",3],["Dinamarca",3],["Vincios",2],["Guitiriz",2],["Vegadeo",2],["Monforte de Lemos",2],["San Juan de Ortega",2],["Badajoz",2],["Valcarlos",2],["",2],["Cataluña",2],["La Bañeza",2],["A Guarda",2],["Vilabade",2],["Republica Checa",1],["Grado",1],["Grecia",1],["La Rioja",1],["Resto Galicia",1],["Luxemburgo",1],["Andorra",1],["Benavente",1],["Irlanda",1],["Pontedeume",1]],"startingRegions":[["Lugo",15113],["León",5844],["France",3803],["Navarra",2380],["Portugal",1946],["Pontevedra",1944],["Asturias",1364],["Ourense",849],["Burgos",698],["A Coruña",596],["Gipuzkoa",488],["Sevilla",243],["Cantabria",241],["Zamora",192],["La Rioja",170],["Vizcaya",141],["Germany",119],["Palencia",105],["Holland",90],["Salamanca",85],["Madrid",82],["Huesca",44],["Barcelona",41],["Belgium",39],["Badajoz",39],["Valencia",34],["Albacete",31],["Switzerland",28],["Austria",13],["Zaragoza",13],["Italy",13],["Europe Other",13],["Porgugal",9],["Granada",9],["Cáceres",8],["Poland",6],["UK",6],["Valladolid",5],["Córdoba",5],["Murcia",5],["Denmark",3],["Málaga",3],["Huelva",3],["City&nbsp;Was Blank",2],["Czech Republic",1],["Greece",1],["Luxembourg",1],["Andorra",1],["Ireland",1]],"caminos":[["Frances-Camino de",27593],["Portugues-Camino",3890],["Norte-Camino de",2284],["Via de la Plata",1497],["Primitivo-Camino",962],["Ingles-Camino",563],["Otros caminos",46],["Muxia-Finisterre",33],["Otros caminos",2]]},"10":{"year":"2010","month":"10","pilgrims":26600,"gender":[["Hombre",14779],["Mujer",11821]],"transport":[["Pie",23748],["Bicicleta",2732],["Caballo",118],["Silla de ruedas",2]],"age":[["30 - 60",16869],["< 30",5206],["> 60",4525]],"motivation":[["Religioso",14267],["Religioso y otros",11263],["No religioso",1070]],"spanishFrom":[["Galicia",4741],["Madrid",2854],["Andalucía",1871],["Cataluña",1744],["Comunidad Valenciana",1329],["Castilla León",1188],["Castilla la Mancha",711],["Pais Vasco",616],["Asturias",436],["Canarias",375],["Extremadura",305],["Aragón",293],["Baleares",279],["Navarra",273],["Murcia",255],["Cantabria",249],["La Rioja",83],["Otra",57],["Ceuta",22],["Melilla",13]],"byCountry":[["España",17694],["Alemania",1644],["Francia",1081],["Italia",770],["Portugal",651],["Estados Unidos",451],["Canadá",378],["Brasil",306],["Reino Unido",243],["Australia",214],["Holanda",201],["Corea",190],["México",182],["Austria",177],["Polonia",169],["Argentina",166],["Japón",161],["Suiza",158],["Suecia",154],["Dinamarca",146],["Finlandia",143],["Irlanda",130],["Belgica",129],["Colombia",124],["Noruega",121],["Venezuela",113],["Puerto Rico",70],["Hungría",65],["República Checa",53],["Chile",49],["Nueva Zelanda",43],["Sudáfrica",38],["Eslovaquia",37],["Rusia",37],["Uruguay",25],["Eslovenia",22],["Perú",20],["Letonia",18],["Rumania",18],["Bulgaria",18],["Ecuador",17],["Andorra",16],["Ucrania",16],["Israel",14],["Filipinas",11],["Lituania",11],["Estonia",11],["China",9],["Grecia",8],["Rep. Dominicana",7],["Luxemburgo",6],["Paraguay",5],["Cuba",5],["Bolivia",5],["Croacia",5],["Panamá",4],["Costa Rica",4],["Dominica",4],["Brunei",4],["Guatemala",2],["Honduras",2],["Islas Feroe",2],["Angola",2],["Swazilandia",2],["Islandia",1],["Chipre",1],["El Salvador",1],["Indonesia",1],["India",1],["Uganda",1],["Turquía",1],["Albania",1],["Cabo Verde",1],["Namibia",1],["Bielorrusia",1],["Bosnia",1],["Gabón",1],["Armenia",1],["Marruecos",1],["Líbano",1],["Mauricio",1]],"professions":[["Empleados",6095],["Liberales",3728],["Tecnicos",3681],["Jubilados",3273],["Estudiantes",2555],["Funcionarios",1787],["Obreros",1606],["Amas de Casa",1388],["Profesores",989],["Parados",713],["Directivos",236],["Artistas",173],["Agricultores",115],["Sacerdotes",103],["Religiosas",76],["Marinos",61],["Deportistas",20],["Oikoten",1]],"startingCities":[["Sarria",7267],["S. Jean P. Port",2387],["Cebreiro",2163],["Tui",1547],["Roncesvalles",1417],["Ponferrada",1206],["León",1006],["Oporto",653],["Astorga",636],["Ourense",514],["Ferrol",479],["Pamplona",447],["Le Puy",428],["Burgos",377],["Vilafranca",369],["Oviedo - C.P.",348],["Sevilla",309],["Lugo - C.P.",302],["Triacastela",282],["Valença do Minho",281],["Francia",276],["Resto Portugal",243],["Resto C. León",204],["Irún",198],["Samos",149],["Somport",136],["Ribadeo",136],["Neda",135],["Vilalba",132],["Oviedo",122],["A Guarda",117],["Santander",108],["Vegadeo",92],["Logroño",87],["Resto Asturias",82],["Bilbao",70],["Ponte de Lima",68],["Alemania",67],["Resto Asturias - C.P.",64],["Muxia",61],["Madrid - C.F.",58],["Zamora",56],["Vega de Valcarce",54],["Baamonde",50],["Gijón",49],["Baiona",48],["Lisboa",45],["Vigo",44],["Sahagún",42],["Jaca",39],["Puebla de Sanabria",38],["Holanda",37],["Salamanca",37],["Resto Cantabria",36],["Allariz",36],["Fonsagrada - C.P.",34],["Suiza",34],["Gudiña",32],["Frómista",29],["Mondoñedo",29],["Avilés",29],["Resto País Vasco",26],["Puente la Reina",25],["Lourdes",24],["Vezelay",24],["Braga",23],["Arles",23],["Bélgica",23],["Mérida",22],["Carrión de los Condes",21],["Cataluña",21],["Sto. Domingo de la Calzada",21],["Navarra",19],["Resto C. León - V.P.",18],["Finisterra",18],["Rabanal del Camino",17],["Xunqueira de Ambia",17],["San Sebastián",17],["Hospital de Orbigo",16],["Chaves-Portugal",16],["Montserrat",15],["Granja de Moreruela",15],["Barcelona",15],["Zaragoza",14],["Valencia",13],["Verín",13],["Com. Valenciana",12],["Laza",12],["Abadin",12],["Canfranc",12],["Francia",10],["Resto Andalucia",10],["Cadavo",10],["Castrojeriz",10],["Tineo - C.P.",10],["Granada",9],["Estella",9],["Molinaseca",9],["Nájera",9],["Cast. la Mancha",9],["R.Pais Vasco",8],["Resto Europa",8],["Lourenzá",8],["Hendaya",8],["Fonsagrada",7],["Madrid",7],["Porriño",6],["Valladolid",6],["Córdoba",6],["Resto de Extremadura",6],["Cáceres",6],["Grandas de Salime",6],["Grandas de Salime - C.P.",6],["Castilla la Mancha",5],["Austria",5],["Malaga",5],["Castilla La Mancha",5],["Italia",5],["Polonia",4],["Tineo",4],["París",4],["Gonzar",4],["Cataluña",4],["Com. Valenciana",3],["Roma",3],["Reino Unido",3],["Hungría",2],["Fonfría",2],["La Rioja",2],["Huelva",2],["San Sebastian",2],["Vilabade",1],["La Bañeza",1],["Luxemburgo",1],["Reino Unido",1],["Valcarlos",1],["Paradela",1],["Murcia",1],["Guntín",1]],"startingRegions":[["Lugo",10589],["León",3578],["France",3320],["Navarra",1918],["Pontevedra",1762],["Portugal",1313],["Asturias",812],["A Coruña",694],["Ourense",624],["Burgos",387],["Sevilla",319],["Gipuzkoa",251],["Cantabria",144],["La Rioja",119],["Zamora",109],["Vizcaya",70],["Germany",67],["Madrid",65],["Barcelona",55],["Huesca",51],["Palencia",50],["Holland",37],["Salamanca",37],["Switzerland",34],["Valencia",28],["Badajoz",28],["Belgium",23],["Albacete",19],["Porgugal",16],["Zaragoza",14],["Granada",9],["Europe Other",8],["Italy",8],["Córdoba",6],["Cáceres",6],["Valladolid",6],["Austria",5],["Málaga",5],["Poland",4],["UK",4],["Hungary",2],["Huelva",2],["Luxembourg",1],["Murcia",1]],"caminos":[["Frances-Camino de",19583],["Portugues-Camino",3075],["Norte-Camino de",1236],["Via de la Plata",1198],["Primitivo-Camino",779],["Ingles-Camino",615],["Muxia-Finisterre",79],["Otros caminos",35]]},"11":{"year":"2010","month":"11","pilgrims":8076,"gender":[["Hombre",4479],["Mujer",3597]],"transport":[["Pie",7506],["Bicicleta",543],["Caballo",26],["Silla de ruedas",1]],"age":[["30 - 60",5360],["< 30",1645],["> 60",1071]],"motivation":[["Religioso",4224],["Religioso y otros",3512],["No religioso",340]],"spanishFrom":[["Galicia",2485],["Madrid",802],["Andalucía",473],["Cataluña",468],["Castilla León",362],["Baleares",317],["Asturias",266],["Comunidad Valenciana",249],["Castilla la Mancha",134],["Pais Vasco",116],["Aragón",90],["Canarias",74],["Murcia",64],["Extremadura",44],["Cantabria",38],["Navarra",30],["La Rioja",20],["Otra",17],["Ceuta",2],["Melilla",2]],"byCountry":[["España",6053],["Francia",295],["Alemania",246],["Italia",155],["Portugal",135],["Corea",124],["Estados Unidos",108],["Brasil",80],["Canadá",63],["Belgica",63],["Australia",56],["Argentina",54],["Holanda",51],["Austria",51],["Reino Unido",49],["Japón",44],["Suiza",39],["México",37],["Venezuela",37],["Irlanda",31],["Suecia",26],["Polonia",23],["Colombia",18],["Puerto Rico",17],["Uruguay",15],["Hungría",13],["Estonia",13],["Dinamarca",12],["Sudáfrica",12],["Chile",12],["Rusia",11],["Ecuador",11],["Lituania",10],["Perú",9],["República Checa",8],["Letonia",8],["Finlandia",7],["Eslovaquia",7],["Rumania",6],["Croacia",5],["Nueva Zelanda",5],["Malta",5],["Bolivia",5],["Bulgaria",4],["Taiwán",4],["Costa Rica",3],["Ucrania",3],["Guatemala",3],["China",3],["Israel",3],["Panamá",3],["Noruega",3],["Rep. Dominicana",2],["Bielorrusia",2],["Guinea Ecuatorial",1],["El Salvador",1],["Georgia",1],["Luxemburgo",1],["Argelia",1],["Paraguay",1],["Marruecos",1],["Cuba",1],["Singapur",1],["Guyana",1],["India",1],["Malasia",1],["Turquía",1]],"professions":[["Empleados",2054],["Liberales",1265],["Tecnicos",844],["Jubilados",744],["Estudiantes",705],["Funcionarios",567],["Obreros",565],["Amas de Casa",515],["Profesores",295],["Parados",245],["Directivos",90],["Artistas",72],["Agricultores",62],["Marinos",19],["Sacerdotes",17],["Religiosas",8],["Deportistas",6],["Oikoten",3]],"startingCities":[["Sarria",1907],["Cebreiro",842],["Tui",758],["S. Jean P. Port",600],["Roncesvalles",438],["Ponferrada",346],["Ourense",237],["León",231],["Ferrol",161],["Oviedo - C.P.",135],["Oporto",121],["Le Puy",116],["Astorga",115],["Burgos",104],["Pamplona",100],["Francia",100],["Valença do Minho",98],["Vilafranca",93],["Sevilla",88],["Triacastela",80],["Lugo - C.P.",66],["Resto Portugal",65],["Fonsagrada - C.P.",55],["Resto C. León",51],["Santander",51],["Irún",50],["Vilalba",49],["Resto Asturias",41],["Ribadeo",40],["Somport",39],["Samos",37],["Carrión de los Condes",35],["Zamora",33],["Oviedo",33],["Gudiña",28],["Madrid - C.F.",28],["Monforte de Lemos",25],["Suiza",23],["Resto Cantabria",23],["Salamanca",22],["Logroño",22],["Jaca",20],["Covelo",20],["Alemania",18],["Bilbao",17],["Neda",17],["Braga",17],["Granja de Moreruela",16],["Ponte de Lima",15],["Muxia",15],["Lourdes",15],["Porriño",14],["Avilés",14],["Sahagún",13],["Lisboa",13],["Bélgica",13],["A Guarda",12],["Abadin",11],["Gijón",11],["Vezelay",11],["París",10],["O Barco de Valdeorras",10],["Valcarlos",10],["Resto Asturias - C.P.",10],["Cadavo",10],["Cataluña",9],["Sto. Domingo de la Calzada",9],["Arles",9],["Puebla de Sanabria",8],["Baamonde",8],["Quiroga",8],["Vega de Valcarce",8],["Barcelona",7],["Madrid",7],["Francia",7],["Vigo",7],["Allariz",7],["Fonsagrada",7],["Laza",7],["Italia",6],["Cáceres",6],["Mondoñedo",6],["San Sebastián",6],["Verín",6],["Puente la Reina",5],["Vegadeo",5],["Navarra",5],["Tineo",5],["Austria",5],["Finisterra",4],["Frómista",4],["Grado",4],["Resto C. León - V.P.",4],["Xunqueira de Ambia",4],["Com. Valenciana",4],["Rabanal del Camino",4],["Hospital de Orbigo",4],["Grandas de Salime - C.P.",4],["Hendaya",4],["",4],["San Juan de Ortega",3],["Holanda",3],["Huelva",3],["Valencia",3],["Com. Valenciana",3],["Valladolid",3],["Granada",2],["Tineo - C.P.",2],["Resto de Extremadura",2],["Resto País Vasco",2],["Zaragoza",2],["Las Médulas",2],["Resto Andalucia",2],["Resto Europa",2],["Mérida",2],["Malaga",2],["Roma",1],["Polonia",1],["Finlandia",1],["Guntín",1],["Canfranc",1],["Montserrat",1],["Estella",1],["Cataluña",1],["La Rioja",1],["Molinaseca",1],["Nájera",1],["Salas",1],["Chantada",1]],"startingRegions":[["Lugo",3152],["France",911],["León",872],["Pontevedra",811],["Navarra",559],["Portugal",329],["Ourense",299],["Asturias",265],["A Coruña",198],["Burgos",107],["Sevilla",90],["Cantabria",74],["Gipuzkoa",58],["Zamora",57],["Palencia",39],["Madrid",35],["La Rioja",33],["Switzerland",23],["Salamanca",22],["Huesca",21],["Germany",18],["Barcelona",18],["Vizcaya",17],["Belgium",13],["Valencia",10],["Italy",7],["Cáceres",6],["Austria",5],["City&nbsp;Was Blank",4],["Badajoz",4],["Holland",3],["Huelva",3],["Valladolid",3],["Granada",2],["Zaragoza",2],["Europe Other",2],["Málaga",2],["Poland",1],["Finland",1]],"caminos":[["Frances-Camino de",5515],["Portugues-Camino",1140],["Via de la Plata",489],["Norte-Camino de",391],["Primitivo-Camino",287],["Ingles-Camino",178],["Otros caminos",53],["Muxia-Finisterre",19],["Otros caminos",4]]},"12":{"year":"2010","month":"12","pilgrims":5967,"gender":[["Hombre",3330],["Mujer",2637]],"transport":[["Pie",5638],["Bicicleta",257],["Caballo",71],["Silla de ruedas",1]],"age":[["30 - 60",3997],["< 30",1439],["> 60",531]],"motivation":[["Religioso",3305],["Religioso y otros",2464],["No religioso",198]],"spanishFrom":[["Galicia",2896],["Madrid",617],["Andalucía",289],["Castilla León",236],["Cataluña",230],["Asturias",190],["Comunidad Valenciana",172],["Baleares",127],["Castilla la Mancha",98],["Pais Vasco",83],["Extremadura",73],["Aragón",60],["Murcia",47],["Canarias",39],["Navarra",34],["La Rioja",26],["Cantabria",21],["Otra",4],["Ceuta",1]],"byCountry":[["España",5243],["Portugal",142],["Alemania",71],["Francia",55],["Estados Unidos",45],["Italia",44],["Corea",38],["Brasil",36],["Japón",33],["Belgica",27],["Colombia",22],["Argentina",21],["México",19],["Reino Unido",18],["Canadá",18],["Suiza",14],["Austria",13],["Polonia",10],["Holanda",9],["Venezuela",8],["Suecia",7],["Uruguay",7],["Australia",7],["Rusia",7],["Perú",6],["Eslovenia",5],["Dinamarca",4],["República Checa",4],["Rumania",4],["Finlandia",3],["Chile",3],["Irlanda",2],["El Salvador",2],["Taiwán",2],["Sudáfrica",2],["Ecuador",2],["Rep. Dominicana",2],["Hungría",1],["Paraguay",1],["Panamá",1],["China",1],["Luxemburgo",1],["Marruecos",1],["Malasia",1],["Haití",1],["Líbano",1],["Kazajistán",1],["Andorra",1],["Dominica",1]],"professions":[["Empleados",1615],["Liberales",857],["Estudiantes",848],["Tecnicos",604],["Obreros",359],["Funcionarios",353],["Profesores",325],["Jubilados",319],["Amas de Casa",313],["Parados",194],["Artistas",46],["Directivos",42],["Agricultores",33],["Marinos",21],["Religiosas",17],["Sacerdotes",17],["Deportistas",3],["Oikoten",1]],"startingCities":[["Sarria",1681],["Cebreiro",862],["Tui",743],["Ferrol",224],["Ponferrada",209],["Roncesvalles",204],["S. Jean P. Port",189],["Ourense",188],["Oviedo - C.P.",111],["León",104],["Resto C. León",102],["Lugo - C.P.",101],["Valença do Minho",93],["Astorga",83],["Triacastela",75],["Vigo",67],["Oporto",64],["Neda",55],["Vilafranca",44],["Resto Portugal",40],["Vilalba",40],["Sevilla",33],["Madrid",31],["Samos",30],["Burgos",28],["Pamplona",28],["Braga",25],["Irún",24],["Ribadeo",24],["Resto Asturias",24],["A Guarda",23],["Oviedo",22],["Madrid - C.F.",21],["Le Puy",19],["Francia",18],["Vega de Valcarce",17],["Fonsagrada - C.P.",17],["Muxia",16],["Porriño",16],["Somport",13],["Suiza",11],["Resto Asturias - C.P.",11],["Baamonde",11],["Logroño",10],["Gudiña",10],["Avilés",9],["Finisterra",7],["Baiona",7],["Granja de Moreruela",7],["Bilbao",7],["Frómista",6],["Mondoñedo",6],["Cataluña",6],["Jaca",6],["Xunqueira de Ambia",5],["Salamanca",5],["Resto País Vasco",5],["Gijón",5],["Resto Europa",5],["Hendaya",4],["Alemania",4],["Lourdes",4],["Vezelay",4],["Vegadeo",4],["Rabanal del Camino",4],["Las Médulas",3],["Carrión de los Condes",3],["Abadin",3],["Roma",3],["Barcelona",3],["Sahagún",3],["La Mesa",3],["Cadavo",3],["Zamora",3],["Granada",3],["Estella",3],["Arles",3],["Montserrat",3],["Sto. Domingo de la Calzada",3],["Tineo - C.P.",2],["Molinaseca",2],["Salas",2],["Rábade",2],["Zaragoza",2],["Republica Checa",2],["Resto C. León - V.P.",2],["Resto Andalucia",2],["Resto Cantabria",2],["Allariz",2],["Austria",2],["Santander",2],["Mérida",2],["Canfranc",2],["París",2],["Puebla de Sanabria",2],["Benavente",2],["Resto Galicia",2],["San Sebastian",1],["Lourenzá",1],["Ponte de Lima",1],["Cáceres",1],["Vilabade",1],["Laza",1],["Jerusalem",1],["Lisboa",1],["Verín",1],["Com. Valenciana",1],["Grandas de Salime - C.P.",1],["Holanda",1],["La Rioja",1],["Grado",1],["Navarra",1],["Com. Valenciana",1],["Bélgica",1],["Valencia",1]],"startingRegions":[["Lugo",2855],["Pontevedra",856],["León",573],["A Coruña",304],["France",256],["Navarra",236],["Portugal",224],["Ourense",207],["Asturias",195],["Madrid",52],["Sevilla",35],["Gipuzkoa",30],["Burgos",28],["La Rioja",14],["Zamora",14],["Barcelona",12],["Switzerland",11],["Palencia",9],["Huesca",8],["Vizcaya",7],["Salamanca",5],["Europe Other",5],["Cantabria",4],["Germany",4],["Granada",3],["Italy",3],["Valencia",3],["Czech Republic",2],["Huelva",2],["Austria",2],["Badajoz",2],["Zaragoza",2],["Cáceres",1],["Israel",1],["Holland",1],["Belgium",1]],"caminos":[["Frances-Camino de",3829],["Portugues-Camino",1080],["Via de la Plata",300],["Ingles-Camino",279],["Primitivo-Camino",253],["Norte-Camino de",196],["Muxia-Finisterre",23],["Otros caminos",7]]},"all":{"year":"2010","month":"","pilgrims":272412,"gender":[["Hombre",151656],["Mujer",120756]],"transport":[["Pie",237868],["Bicicleta",33278],["Caballo",1229],["Silla de ruedas",37]],"age":[["30 - 60",158464],["< 30",79918],["> 60",34030]],"motivation":[["Religioso",148720],["Religioso y otros",109976],["No religioso",13716]],"spanishFrom":[["Galicia",34514],["Madrid",34096],["Andalucía",24956],["Cataluña",20720],["Comunidad Valenciana",17408],["Castilla León",13262],["Castilla la Mancha",9115],["Pais Vasco",7226],["Extremadura",4489],["Asturias",4318],["Aragón",4119],["Canarias",3734],["Murcia",3440],["Baleares",2474],["Cantabria",2154],["Navarra",2042],["La Rioja",1014],["Otra",496],["Ceuta",217],["Melilla",114]],"byCountry":[["España",189943],["Alemania",14241],["Italia",13963],["Francia",8961],["Portugal",7668],["Estados Unidos",3241],["Irlanda",2254],["Brasil",2072],["Holanda",2046],["Polonia",2016],["Reino Unido",1991],["Canadá",1854],["Austria",1744],["Belgica",1478],["Corea",1447],["México",1411],["Suecia",1248],["Australia",1149],["Suiza",1124],["Argentina",1104],["Dinamarca",975],["Venezuela",839],["Japón",786],["Finlandia",741],["Colombia",733],["Hungría",708],["República Checa",665],["Eslovaquia",600],["Noruega",590],["Eslovenia",421],["Sudáfrica",299],["Puerto Rico",267],["Ecuador",263],["Chile",255],["Uruguay",238],["Rumania",235],["Rusia",229],["Perú",221],["Nueva Zelanda",217],["Andorra",173],["Lituania",140],["Bolivia",125],["Estonia",123],["Luxemburgo",114],["Israel",97],["Bulgaria",95],["Croacia",84],["Paraguay",68],["Rep. Dominicana",66],["Grecia",62],["Ucrania",61],["China",56],["Filipinas",50],["Cuba",47],["Letonia",47],["El Salvador",46],["Panamá",41],["Marruecos",41],["Costa Rica",40],["Guatemala",38],["Malta",38],["Taiwán",28],["Nicaragua",23],["India",20],["Honduras",19],["Turquía",19],["Singapur",18],["Albania",18],["Serbia",16],["Irán",14],["Islas Feroe",14],["Brunei",13],["San Marino",13],["Islandia",12],["Guinea Ecuatorial",12],["Swazilandia",11],["Pakistán",11],["Bielorrusia",11],["Líbano",10],["Myanmar",10],["Malasia",10],["Dominica",9],["Armenia",8],["Camerún",8],["Chipre",8],["Moldavia",7],["Georgia",7],["Cabo Verde",7],["Kenya",7],["Indonesia",6],["Guyana",6],["Argelia",5],["Timor Oriental",5],["Vietnam",5],["Nigeria",5],["Gabón",4],["Liechtensein",4],["Tailandia",4],["Madagascar",4],["Antillas Holandesas",4],["Nepal",4],["Jordania",4],["Mozambique",4],["Namibia",3],["Senegal",3],["Comores",3],["Angola",3],["Omán",3],["Rwanda",3],["Congo",3],["Uganda",3],["Trinidad y Tobago",3],["Belice",3],["Tayikistán",3],["Macedonia",3],["Emiratos Arabes Unidos",3],["Groenlandia",2],["Sri Lanka",2],["Mónaco",2],["Bahamas",2],["Zimbabwe",2],["Mauricio",2],["Sudán",2],["Ghana",2],["Bahrein",1],["Túnez",1],["Barbados",1],["Togo",1],["Costa de Marfil",1],["Islas Vírgenes",1],["Siria",1],["Kazajistán",1],["Mongolia",1],["Tanzania",1],["Bosnia",1],["Haití",1],["Martinica",1]],"professions":[["Empleados",62484],["Estudiantes",50245],["Tecnicos",32776],["Liberales",29650],["Jubilados",25400],["Profesores",16797],["Funcionarios",15680],["Obreros",14412],["Amas de Casa",11029],["Parados",6275],["Directivos",2181],["Sacerdotes",1659],["Artistas",1416],["Agricultores",1017],["Religiosas",740],["Marinos",443],["Deportistas",163],["Oikoten",45]],"startingCities":[["Sarria",67730],["Cebreiro",22099],["Tui",18046],["S. Jean P. Port",17833],["Roncesvalles",13629],["Ponferrada",12814],["León",11679],["Astorga",7390],["Ourense",6895],["Oporto",5676],["Ferrol",5102],["Vilafranca",4755],["Burgos",4216],["Pamplona",4199],["Valença do Minho",3991],["Oviedo - C.P.",3670],["Le Puy",3294],["Triacastela",3048],["Resto Portugal",3001],["Resto Asturias",2925],["Lugo - C.P.",2702],["Irún",2478],["Sevilla",2385],["Francia",2219],["Vilalba",2136],["Resto C. León",2118],["Samos",2033],["Ribadeo",1833],["Oviedo",1712],["Finisterra",1409],["Neda",1338],["Santander",1274],["Somport",1121],["Logroño",968],["Bilbao",785],["Ponte de Lima",724],["Holanda",721],["Lisboa",717],["Vigo",716],["Zamora",704],["Mondoñedo",704],["Porriño",667],["Salamanca",649],["Madrid - C.F.",647],["Gijón",647],["Avilés",645],["Alemania",603],["Vega de Valcarce",588],["Sahagún",578],["Resto Asturias - C.P.",529],["Gudiña",491],["Puebla de Sanabria",448],["Baamonde",448],["Jaca",409],["Abadin",403],["Muxia",388],["Resto País Vasco",376],["Frómista",374],["Fonsagrada - C.P.",366],["Laza",327],["Carrión de los Condes",319],["Rabanal del Camino",315],["Resto Cantabria",310],["A Guarda",301],["Sto. Domingo de la Calzada",286],["Lourenzá",283],["Braga",280],["Allariz",280],["Bélgica",266],["Suiza",252],["Lourdes",230],["Verín",227],["Puente la Reina",222],["San Sebastián",220],["Granja de Moreruela",213],["Hospital de Orbigo",209],["Mérida",204],["Cataluña",199],["Xunqueira de Ambia",194],["Resto C. León - V.P.",192],["Vezelay",181],["Chaves-Portugal",172],["Madrid",168],["Com. Valenciana",166],["Zaragoza",165],["R.Pais Vasco",162],["Arles",156],["Molinaseca",148],["Hendaya",147],["Grandas de Salime - C.P.",146],["Vegadeo",145],["Valencia",135],["Montserrat",132],["Resto Andalucia",125],["Cadavo",124],["Fonsagrada",123],["Barcelona",120],["Cáceres",117],["Murcia",101],["Estella",100],["Baiona",96],["Monforte de Lemos",96],["Navarra",95],["Tineo - C.P.",94],["Granada",88],["Canfranc",86],["Resto de Extremadura",79],["Austria",77],["Tineo",75],["Grandas de Salime",75],["París",73],["Resto Galicia",71],["Resto Europa",71],["Italia",66],["Castilla La Mancha",64],["",63],["Córdoba",58],["Castilla la Mancha",58],["Nájera",52],["Salas",44],["Castrojeriz",44],["Cast. la Mancha",43],["Valladolid",43],["La Rioja",38],["Malaga",38],["Huelva",36],["Roma",33],["Valcarlos",32],["San Juan de Ortega",25],["San Sebastian",22],["mirallos",22],["Reino Unido",22],["Polonia",22],["Covelo",20],["Grado",20],["Badajoz",20],["La Bañeza",17],["Vincios",16],["Ortigueira",16],["La Mesa",16],["Benavente",14],["Fonfría",14],["A Rúa",13],["Quiroga",12],["Republica Checa",12],["O Barco de Valdeorras",11],["Inglaterra",10],["Dinamarca",10],["Vilabade",8],["Rábade",8],["Irlanda",7],["Las Médulas",6],["Gonzar",5],["Finlandia",5],["Hungría",5],["Egipto",5],["Guitiriz",4],["Andorra",4],["Jerusalem",3],["Grecia",3],["Luxemburgo",3],["Pontedeume",2],["Leyre",2],["Guntín",2],["Lalín",1],["Gándara",1],["Chantada",1],["Resto Africa",1],["Peñaseita",1],["Betanzos",1],["Artieda",1],["Paradela",1],["Cea",1],["Viveiro",1],["El Escamplero",1]],"startingRegions":[["Lugo",104196],["León",40810],["France",25254],["Pontevedra",19864],["Navarra",18279],["Portugal",14389],["Asturias",10745],["Ourense",8438],["A Coruña",8329],["Burgos",4285],["Gipuzkoa",3258],["Sevilla",2510],["Cantabria",1584],["Zamora",1379],["La Rioja",1344],["Madrid",815],["Vizcaya",785],["Holland",721],["Palencia",693],["Salamanca",649],["Germany",603],["Huesca",495],["Barcelona",451],["Badajoz",303],["Valencia",301],["Belgium",266],["Switzerland",252],["Porgugal",172],["Zaragoza",166],["Albacete",165],["Cáceres",117],["Murcia",101],["Italy",99],["Granada",88],["Austria",77],["Europe Other",71],["City&nbsp;Was Blank",63],["Córdoba",58],["Huelva",44],["Valladolid",43],["Málaga",38],["UK",32],["Poland",22],["Czech Republic",12],["Denmark",10],["Ireland",7],["Egypt",5],["Finland",5],["Hungary",5],["Andorra",4],["Luxembourg",3],["Greece",3],["Israel",3],["Africa",1]],"caminos":[["Frances-Camino de",189271],["Portugues-Camino",34251],["Norte-Camino de",17929],["Via de la Plata",14251],["Primitivo-Camino",7727],["Ingles-Camino",6464],["Muxia-Finisterre",1797],["Otros caminos",722]]}},"2011":{"1":{"year":"2011","month":"1","pilgrims":649,"gender":[["Hombre",438],["Mujer",211]],"transport":[["Pie",615],["Bicicleta",33],["Caballo",1]],"age":[["30 - 60",430],["< 30",194],["> 60",25]],"motivation":[["Religioso y otros",310],["Religioso",291],["No religioso",48]],"spanishFrom":[["Galicia",87],["Madrid",57],["Andalucía",46],["Comunidad Valenciana",40],["Cataluña",37],["Castilla León",33],["Pais Vasco",16],["Baleares",12],["Asturias",10],["Cantabria",9],["Aragón",7],["Castilla la Mancha",5],["Canarias",5],["Murcia",4],["La Rioja",4],["Extremadura",3],["Navarra",2],["Otra",1]],"byCountry":[["España",378],["Corea",64],["Italia",34],["Portugal",32],["Alemania",25],["Estados Unidos",13],["Francia",10],["Brasil",10],["Belgica",8],["México",8],["Japón",7],["Holanda",6],["Irlanda",5],["Reino Unido",4],["Argentina",3],["Chile",3],["Sudáfrica",3],["Uruguay",3],["Suiza",2],["Canadá",2],["Honduras",2],["Rumania",2],["Polonia",2],["China",2],["Austria",2],["República Checa",2],["Paraguay",2],["Dinamarca",2],["Colombia",1],["Australia",1],["Perú",1],["Eslovaquia",1],["Finlandia",1],["Nigeria",1],["Noruega",1],["Nueva Zelanda",1],["Suecia",1],["Hungría",1]],"professions":[["Empleados",137],["Estudiantes",127],["Liberales",77],["Tecnicos",72],["Profesores",59],["Obreros",43],["Funcionarios",41],["Parados",21],["Artistas",20],["Jubilados",15],["Amas de Casa",12],["Agricultores",7],["Directivos",6],["Sacerdotes",5],["Marinos",4],["Religiosas",3]],"startingCities":[["Sarria",137],["S. Jean P. Port",70],["Cebreiro",64],["León",45],["Ponferrada",30],["Astorga",27],["Roncesvalles",27],["Oporto",25],["Tui",21],["Mondoñedo",20],["Pamplona",18],["Burgos",15],["Vilafranca",15],["Oviedo - C.P.",9],["Oviedo",8],["Valença do Minho",7],["Vilalba",7],["Sevilla",5],["Ponte de Lima",5],["Resto C. León",5],["Logroño",5],["Francia",5],["Lourenzá",5],["Madrid - C.F.",4],["Lugo - C.P.",4],["Jaca",4],["Neda",4],["Resto Asturias",4],["Irún",4],["Ferrol",3],["Triacastela",3],["Bilbao",3],["Le Puy",3],["Madrid",3],["Somport",3],["Frómista",2],["Xunqueira de Ambia",2],["Ourense",2],["Resto Portugal",2],["Finisterra",2],["Grandas de Salime - C.P.",2],["Fonsagrada - C.P.",2],["Cataluña",2],["La Mesa",1],["Zamora",1],["Molinaseca",1],["Resto País Vasco",1],["Vega de Valcarce",1],["Santander",1],["Puebla de Sanabria",1],["Muxia",1],["Bélgica",1],["Granja de Moreruela",1],["Barcelona",1],["Lourdes",1],["Arles",1],["Córdoba",1],["Salamanca",1],["Resto Europa",1]],"startingRegions":[["Lugo",242],["León",124],["France",83],["Navarra",45],["Portugal",39],["Asturias",24],["Pontevedra",21],["Burgos",15],["A Coruña",10],["Madrid",7],["Sevilla",5],["La Rioja",5],["Gipuzkoa",5],["Huesca",4],["Ourense",4],["Barcelona",3],["Vizcaya",3],["Zamora",3],["Palencia",2],["Europe Other",1],["Cantabria",1],["Belgium",1],["Córdoba",1],["Salamanca",1]],"caminos":[["Frances-Camino de",491],["Portugues-Camino",60],["Norte-Camino de",53],["Primitivo-Camino",18],["Via de la Plata",17],["Ingles-Camino",7],["Muxia-Finisterre",3]]},"2":{"year":"2011","month":"2","pilgrims":820,"gender":[["Hombre",558],["Mujer",262]],"transport":[["Pie",750],["Bicicleta",70]],"age":[["30 - 60",438],["< 30",343],["> 60",39]],"motivation":[["Religioso y otros",467],["Religioso",337],["No religioso",16]],"spanishFrom":[["Madrid",113],["Andalucía",96],["Galicia",66],["Comunidad Valenciana",54],["Cataluña",51],["Castilla León",26],["Castilla la Mancha",21],["Baleares",19],["Pais Vasco",18],["Murcia",12],["Asturias",10],["Extremadura",8],["Canarias",7],["Navarra",6],["Aragón",5],["Cantabria",5],["La Rioja",1],["Ceuta",1],["Otra",1]],"byCountry":[["España",520],["Corea",49],["Alemania",47],["Portugal",41],["Italia",19],["Estados Unidos",17],["Francia",17],["Brasil",16],["Japón",13],["Austria",9],["Canadá",8],["Reino Unido",7],["Hungría",5],["México",5],["Holanda",5],["Chile",5],["Finlandia",4],["Australia",4],["Venezuela",3],["Belgica",3],["Argentina",3],["Ecuador",3],["China",3],["Irlanda",3],["Polonia",2],["Ucrania",2],["República Checa",2],["Rumania",1],["Suiza",1],["Estonia",1],["Andorra",1],["Rusia",1]],"professions":[["Empleados",226],["Estudiantes",225],["Tecnicos",89],["Liberales",71],["Obreros",45],["Parados",33],["Funcionarios",32],["Jubilados",27],["Profesores",24],["Amas de Casa",13],["Artistas",11],["Agricultores",8],["Directivos",7],["Sacerdotes",3],["Religiosas",3],["Marinos",2],["Deportistas",1]],"startingCities":[["Sarria",152],["Cebreiro",112],["S. Jean P. Port",70],["Ponferrada",52],["León",51],["Roncesvalles",38],["Resto Portugal",29],["Tui",26],["Pamplona",25],["Oporto",25],["Samos",23],["Astorga",22],["Burgos",17],["Lugo - C.P.",17],["Sevilla",13],["Ferrol",12],["Le Puy",10],["Triacastela",8],["Vilafranca",8],["Resto Asturias",8],["Logroño",7],["Salamanca",6],["Irún",6],["Oviedo - C.P.",5],["Lisboa",5],["Verín",5],["Francia",4],["Ribadeo",4],["Sto. Domingo de la Calzada",4],["Santander",3],["Somport",3],["Granja de Moreruela",2],["Cast. la Mancha",2],["Oviedo",2],["Bilbao",2],["Valencia",2],["Carrión de los Condes",2],["Ourense",2],["Baiona",2],["Puente la Reina",2],["Sahagún",2],["Austria",2],["Laza",2],["Gudiña",2],["Resto C. León",2],["Resto Andalucia",1],["Frómista",1],["Com. Valenciana",1],["Granada",1],["Resto Asturias - C.P.",1],["Resto País Vasco",1],["Bélgica",1],["R.Pais Vasco",1],["Cáceres",1],["Castilla La Mancha",1],["Muxia",1],["Barcelona",1],["Finisterra",1],["Com. Valenciana",1],["A Guarda",1],["Montserrat",1],["Cataluña",1],["Jaca",1],["Zaragoza",1],["La Mesa",1],["Resto Cantabria",1],["Holanda",1]],"startingRegions":[["Lugo",316],["León",137],["France",87],["Navarra",65],["Portugal",59],["Pontevedra",29],["Asturias",17],["Burgos",17],["Sevilla",14],["A Coruña",14],["La Rioja",11],["Ourense",11],["Gipuzkoa",8],["Salamanca",6],["Cantabria",4],["Valencia",4],["Albacete",3],["Palencia",3],["Barcelona",3],["Zamora",2],["Austria",2],["Vizcaya",2],["Holland",1],["Belgium",1],["Cáceres",1],["Huesca",1],["Zaragoza",1],["Granada",1]],"caminos":[["Frances-Camino de",628],["Portugues-Camino",88],["Via de la Plata",36],["Norte-Camino de",27],["Primitivo-Camino",24],["Ingles-Camino",12],["Otros caminos",3],["Muxia-Finisterre",2]]},"3":{"year":"2011","month":"3","pilgrims":3024,"gender":[["Hombre",1913],["Mujer",1111]],"transport":[["Pie",2473],["Bicicleta",550],["Caballo",1]],"age":[["30 - 60",1576],["< 30",1272],["> 60",176]],"motivation":[["Religioso y otros",1854],["Religioso",1046],["No religioso",124]],"spanishFrom":[["Andalucía",288],["Cataluña",214],["Madrid",172],["Galicia",172],["Castilla la Mancha",142],["Castilla León",128],["Comunidad Valenciana",111],["Baleares",77],["Pais Vasco",48],["Cantabria",46],["Extremadura",37],["Murcia",26],["Canarias",23],["Asturias",23],["Navarra",11],["Aragón",9],["Otra",5],["La Rioja",2]],"byCountry":[["España",1534],["Portugal",597],["Alemania",245],["Irlanda",87],["Estados Unidos",79],["Italia",77],["Francia",46],["Corea",38],["Reino Unido",34],["Japón",33],["Brasil",28],["Holanda",27],["Canadá",14],["Dinamarca",14],["Polonia",13],["Argentina",13],["México",11],["Austria",11],["China",10],["Belgica",10],["Suiza",10],["Australia",8],["Taiwán",8],["República Checa",8],["Uruguay",7],["Suecia",7],["Rusia",6],["Sudáfrica",5],["Colombia",5],["Venezuela",5],["Panamá",4],["Hungría",4],["Perú",3],["Luxemburgo",3],["Rumania",2],["Nueva Zelanda",2],["Eslovaquia",2],["Noruega",1],["Lituania",1],["Angola",1],["Letonia",1],["Estonia",1],["Cabo Verde",1],["Finlandia",1],["Israel",1],["Turquía",1],["Eslovenia",1],["Bhután",1],["Guatemala",1],["Chile",1],["Croacia",1]],"professions":[["Estudiantes",955],["Empleados",524],["Liberales",327],["Tecnicos",299],["Obreros",223],["Profesores",165],["Parados",145],["Jubilados",139],["Funcionarios",130],["Amas de Casa",43],["Directivos",29],["Artistas",16],["Sacerdotes",14],["Agricultores",8],["Marinos",3],["Religiosas",2],["Deportistas",2]],"startingCities":[["Sarria",719],["Cebreiro",288],["Resto Portugal",287],["Ourense",215],["León",143],["Ponferrada",142],["S. Jean P. Port",131],["Oporto",125],["Tui",96],["Roncesvalles",90],["Astorga",71],["Valença do Minho",67],["Pamplona",56],["Samos",53],["Burgos",49],["Ferrol",41],["Vilafranca",40],["Oviedo - C.P.",35],["Lugo - C.P.",31],["Sevilla",29],["Irún",21],["Triacastela",19],["Francia",19],["Logroño",15],["Ponte de Lima",15],["Resto C. León",11],["Oviedo",9],["Le Puy",9],["Lisboa",8],["Somport",8],["Vilalba",8],["Bilbao",8],["Grandas de Salime - C.P.",7],["Gudiña",7],["Jaca",6],["Braga",6],["Murcia",6],["Ribadeo",6],["Resto Asturias",5],["Sahagún",5],["Salamanca",5],["Cataluña",5],["Lourdes",5],["Muxia",5],["Lourenzá",4],["Valencia",4],["Zamora",4],["Alemania",4],["Fonsagrada - C.P.",3],["Castilla la Mancha",3],["Com. Valenciana",3],["Madrid - C.F.",3],["Cáceres",3],["Puebla de Sanabria",3],["Carrión de los Condes",3],["Valladolid",3],["Avilés",3],["Mondoñedo",2],["Resto de Extremadura",2],["Santander",2],["Granada",2],["Barcelona",2],["Bélgica",2],["Finisterra",2],["Fonfría",2],["Resto Andalucia",2],["Tineo - C.P.",2],["Sto. Domingo de la Calzada",2],["Gijón",2],["Badajoz",2],["Resto Cantabria",2],["Cataluña",2],["Com. Valenciana",1],["Mérida",1],["Castrojeriz",1],["Zaragoza",1],["Porriño",1],["Tineo",1],["Madrid",1],["Abadin",1],["Resto Asturias - C.P.",1],["Grandas de Salime",1],["Frómista",1],["París",1],["Verín",1],["Navarra",1],["Montserrat",1],["Castilla La Mancha",1],["Malaga",1],["Holanda",1],["Granja de Moreruela",1],["Resto País Vasco",1],["San Sebastián",1],["Estella",1],["La Rioja",1],["Hospital de Orbigo",1],["San Sebastian",1]],"startingRegions":[["Lugo",1136],["Portugal",508],["León",413],["Ourense",223],["France",173],["Navarra",148],["Pontevedra",97],["Asturias",66],["Burgos",50],["A Coruña",48],["Sevilla",31],["Gipuzkoa",24],["La Rioja",18],["Barcelona",10],["Vizcaya",8],["Valencia",8],["Zamora",8],["Huesca",6],["Murcia",6],["Salamanca",5],["Badajoz",5],["Cantabria",4],["Albacete",4],["Madrid",4],["Palencia",4],["Germany",4],["Valladolid",3],["Cáceres",3],["Granada",2],["Belgium",2],["Zaragoza",1],["Málaga",1],["Holland",1]],"caminos":[["Frances-Camino de",1911],["Portugues-Camino",605],["Via de la Plata",283],["Norte-Camino de",80],["Primitivo-Camino",79],["Ingles-Camino",41],["Otros caminos",18],["Muxia-Finisterre",7]]},"4":{"year":"2011","month":"4","pilgrims":14154,"gender":[["Hombre",7929],["Mujer",6225]],"transport":[["Pie",12304],["Bicicleta",1813],["Caballo",36],["Silla de ruedas",1]],"age":[["30 - 60",7824],["< 30",4871],["> 60",1459]],"motivation":[["Religioso y otros",7277],["Religioso",5838],["No religioso",1039]],"spanishFrom":[["Madrid",1649],["Cataluña",1062],["Andalucía",1022],["Comunidad Valenciana",950],["Galicia",857],["Castilla León",619],["Pais Vasco",443],["Castilla la Mancha",393],["Extremadura",358],["Canarias",220],["Baleares",194],["Murcia",160],["Asturias",140],["Aragón",134],["Navarra",90],["Cantabria",47],["Ceuta",29],["La Rioja",22],["Otra",22],["Melilla",1]],"byCountry":[["España",8412],["Alemania",1357],["Portugal",1133],["Francia",396],["Italia",319],["Estados Unidos",241],["Reino Unido",190],["Dinamarca",161],["Irlanda",130],["Austria",125],["Belgica",124],["Suecia",117],["Holanda",112],["Brasil",104],["Canadá",99],["Suiza",94],["Noruega",87],["Corea",84],["México",81],["Finlandia",78],["Colombia",74],["Australia",70],["Polonia",69],["Venezuela",52],["Argentina",51],["Japón",43],["Hungría",31],["República Checa",31],["Sudáfrica",31],["Eslovaquia",29],["Eslovenia",22],["China",18],["Ecuador",17],["Perú",17],["Lituania",13],["Rusia",13],["Rumania",12],["Uruguay",10],["Chile",9],["Andorra",7],["Estonia",7],["Israel",6],["Panamá",6],["Nueva Zelanda",6],["Croacia",5],["Paraguay",5],["Taiwán",4],["Bulgaria",4],["Guatemala",4],["Bolivia",3],["Luxemburgo",3],["Islandia",3],["Ucrania",3],["Camerún",3],["Rep. Dominicana",3],["Costa Rica",3],["Filipinas",3],["Serbia",2],["El Salvador",2],["Puerto Rico",2],["Armenia",1],["Liechtensein",1],["Cuba",1],["Islas Feroe",1],["Grecia",1],["Ghana",1],["Irán",1],["Turquía",1],["Líbano",1],["Indonesia",1],["Singapur",1],["Nicaragua",1],["Madagascar",1],["Marruecos",1]],"professions":[["Empleados",3250],["Estudiantes",2954],["Tecnicos",2190],["Liberales",1312],["Profesores",1224],["Jubilados",1131],["Funcionarios",634],["Obreros",552],["Parados",300],["Amas de Casa",254],["Directivos",115],["Artistas",110],["Sacerdotes",42],["Agricultores",33],["Religiosas",29],["Marinos",18],["Deportistas",6]],"startingCities":[["Sarria",4396],["Cebreiro",839],["Tui",762],["S. Jean P. Port",758],["León",696],["Oporto",638],["Ponferrada",604],["Roncesvalles",551],["Valença do Minho",483],["Astorga",382],["Burgos",238],["Resto Portugal",237],["Vilafranca",237],["Triacastela",232],["Pamplona",226],["Sevilla",198],["Oviedo - C.P.",171],["Ourense",165],["Ferrol",162],["Lugo - C.P.",133],["Ponte de Lima",118],["Le Puy",118],["Irún",92],["Francia",82],["Resto Asturias",80],["Samos",71],["Logroño",70],["Oviedo",63],["Resto C. León",59],["Salamanca",53],["Vilalba",51],["Ribadeo",51],["Neda",46],["Lisboa",45],["Fonsagrada - C.P.",43],["Porriño",40],["Resto Asturias - C.P.",39],["Braga",37],["Somport",35],["Alemania",34],["Zamora",32],["Madrid - C.F.",30],["Puebla de Sanabria",29],["Sahagún",29],["Santander",25],["Gijón",24],["Laza",23],["Cáceres",23],["Vega de Valcarce",22],["R.Pais Vasco",21],["Baamonde",20],["Avilés",19],["Verín",19],["Bilbao",18],["Madrid",17],["Resto País Vasco",16],["Sto. Domingo de la Calzada",16],["Mérida",15],["Puente la Reina",15],["Resto Andalucia",14],["Frómista",14],["Cadavo",14],["Estella",13],["Gudiña",13],["Rabanal del Camino",13],["Lourenzá",13],["Suiza",12],["Valencia",12],["Malaga",12],["Fonsagrada",11],["San Sebastián",11],["Chaves-Portugal",10],["Jaca",9],["Vigo",9],["Com. Valenciana",9],["Resto de Extremadura",9],["Arles",9],["Vezelay",8],["Carrión de los Condes",8],["Muxia",8],["Vilabade",7],["Resto Galicia",7],["Francia",7],["Bélgica",6],["Resto Cantabria",6],["Resto C. León - V.P.",6],["Lourdes",6],["Cataluña",5],["Navarra",5],["Valladolid",5],["Cataluña",5],["Abadin",4],["Badajoz",4],["Ponferrada. C.Inv.",4],["Zaragoza",4],["Grandas de Salime - C.P.",4],["Holanda",4],["Salas",4],["Resto Europa",4],["Barcelona",3],["La Rioja",3],["Tineo",3],["Granja de Moreruela",3],["Xunqueira de Ambia",3],["Molinaseca",3],["Montserrat",3],["Finisterra",3],["Roma",3],["Cast. la Mancha",3],["Hendaya",3],["Vegadeo",3],["Mondoñedo",3],["Hospital de Orbigo",3],["Tineo - C.P.",2],["Murcia",2],["Castilla la Mancha",2],["San Sebastian",2],["San Juan de Ortega",2],["Nájera",2],["Povoa de Varzim",2],["Castilla La Mancha",2],["Baiona",2],["Córdoba",2],["Canfranc",2],["París",2],["Granada",2],["Ortigueira",1],["Austria",1],["Valcarlos",1],["Huelva",1],["La Bañeza",1],["Dinamarca",1],["Polonia",1],["A Guarda",1],["Allariz",1],["Monforte de Lemos",1]],"startingRegions":[["Lugo",5889],["León",2059],["Portugal",1560],["France",1028],["Pontevedra",814],["Navarra",811],["Asturias",412],["Burgos",240],["A Coruña",227],["Ourense",224],["Sevilla",212],["Gipuzkoa",142],["La Rioja",91],["Zamora",64],["Salamanca",53],["Madrid",47],["Germany",34],["Cantabria",31],["Badajoz",28],["Cáceres",23],["Palencia",22],["Valencia",21],["Vizcaya",18],["Barcelona",16],["Málaga",12],["Switzerland",12],["Huesca",11],["Porgugal",10],["Albacete",7],["Belgium",6],["Valladolid",5],["Zaragoza",4],["Holland",4],["Europe Other",4],["Italy",3],["Murcia",2],["Córdoba",2],["Granada",2],["Austria",1],["Huelva",1],["Denmark",1],["Poland",1]],"caminos":[["Frances-Camino de",9914],["Portugues-Camino",2374],["Via de la Plata",662],["Norte-Camino de",525],["Primitivo-Camino",417],["Ingles-Camino",209],["Otros caminos",42],["Muxia-Finisterre",11]]},"5":{"year":"2011","month":"5","pilgrims":19803,"gender":[["Hombre",11643],["Mujer",8160]],"transport":[["Pie",16685],["Bicicleta",3063],["Caballo",52],["Silla de ruedas",3]],"age":[["30 - 60",11663],["> 60",5124],["< 30",3016]],"motivation":[["Religioso y otros",9673],["Religioso",9314],["No religioso",816]],"spanishFrom":[["Cataluña",1421],["Andalucía",1261],["Madrid",1096],["Comunidad Valenciana",831],["Galicia",633],["Castilla León",631],["Pais Vasco",488],["Castilla la Mancha",253],["Canarias",242],["Aragón",199],["Baleares",195],["Asturias",146],["Cantabria",114],["Navarra",109],["Murcia",100],["Extremadura",92],["La Rioja",36],["Otra",31],["Ceuta",9],["Melilla",8]],"byCountry":[["España",7895],["Alemania",3014],["Francia",1349],["Italia",1182],["Portugal",747],["Estados Unidos",474],["Holanda",454],["Austria",443],["Irlanda",408],["Canadá",368],["Brasil",314],["Reino Unido",296],["Dinamarca",234],["Suiza",223],["Noruega",218],["Corea",218],["Suecia",215],["Australia",213],["Belgica",185],["Finlandia",158],["Polonia",143],["República Checa",118],["México",104],["Eslovenia",101],["Argentina",96],["Sudáfrica",79],["Japón",69],["Venezuela",69],["Hungría",48],["Eslovaquia",43],["Nueva Zelanda",33],["Rusia",25],["Lituania",23],["Colombia",20],["Chile",18],["Ecuador",15],["Puerto Rico",14],["Uruguay",12],["Andorra",12],["Rumania",11],["Luxemburgo",10],["Grecia",9],["Perú",8],["Malta",7],["Ucrania",7],["Cuba",7],["Namibia",7],["Islandia",6],["Filipinas",6],["Israel",6],["Macedonia",6],["Croacia",6],["China",5],["Taiwán",4],["Estonia",4],["Liechtensein",3],["Panamá",3],["Nicaragua",3],["Paraguay",3],["Singapur",3],["Líbano",3],["Rep. Dominicana",2],["Bulgaria",2],["El Salvador",2],["Honduras",2],["Letonia",2],["Bosnia",2],["India",1],["Vietnam",1],["Irán",1],["Marruecos",1],["Pakistán",1],["Guatemala",1],["Nigeria",1],["Costa Rica",1],["Armenia",1],["Siria",1],["Bolivia",1],["Albania",1],["Malasia",1],["Serbia",1]],"professions":[["Empleados",5593],["Jubilados",4195],["Tecnicos",2672],["Liberales",1791],["Estudiantes",1431],["Funcionarios",1170],["Profesores",674],["Obreros",637],["Amas de Casa",543],["Parados",530],["Directivos",201],["Artistas",185],["Agricultores",53],["Sacerdotes",51],["Religiosas",43],["Marinos",16],["Deportistas",11],["Oikoten",7]],"startingCities":[["Sarria",3400],["S. Jean P. Port",2618],["León",1269],["Oporto",1007],["Roncesvalles",984],["Cebreiro",899],["Pamplona",718],["Ponferrada",714],["Astorga",662],["Tui",638],["Sevilla",551],["Burgos",511],["Le Puy",500],["Ourense",397],["Francia",323],["Valença do Minho",293],["Resto Portugal",291],["Oviedo - C.P.",277],["Ferrol",234],["Vilafranca",225],["Irún",207],["Resto C. León",150],["Triacastela",144],["Samos",141],["Oviedo",135],["Somport",121],["Lisboa",120],["Logroño",113],["Holanda",106],["Lugo - C.P.",98],["Salamanca",87],["Bilbao",73],["Alemania",71],["Resto Asturias",68],["Zamora",63],["Santander",59],["Gijón",57],["Ribadeo",56],["Puebla de Sanabria",54],["Gudiña",53],["Sahagún",49],["Suiza",49],["Frómista",48],["Ponte de Lima",44],["Braga",39],["Avilés",38],["Resto País Vasco",37],["Carrión de los Condes",35],["Madrid - C.F.",31],["Bélgica",30],["Vega de Valcarce",29],["Jaca",28],["Resto Europa",28],["Mérida",27],["San Sebastián",27],["Hospital de Orbigo",26],["Cataluña",25],["Sto. Domingo de la Calzada",25],["Arles",25],["Resto Cantabria",24],["Vezelay",24],["Puente la Reina",23],["Muxia",21],["Lourdes",21],["Resto Asturias - C.P.",20],["Neda",20],["Chaves-Portugal",19],["Grandas de Salime - C.P.",18],["Com. Valenciana",18],["Cáceres",18],["Vilalba",18],["Francia",17],["Granada",16],["Granja de Moreruela",16],["Rabanal del Camino",15],["R.Pais Vasco",15],["Canfranc",15],["Verín",14],["Zaragoza",13],["Estella",13],["Molinaseca",13],["Com. Valenciana",12],["Valencia",12],["Hendaya",11],["Barcelona",11],["Austria",10],["Madrid",10],["Xunqueira de Ambia",10],["Cast. la Mancha",10],["Resto Andalucia",10],["Resto C. León - V.P.",9],["Navarra",9],["Laza",9],["Castilla la Mancha",9],["Salas",8],["Cataluña",8],["Fonsagrada - C.P.",8],["Malaga",8],["Resto de Extremadura",7],["Grado",7],["San Sebastian",6],["Fonfría",6],["Lourenzá",6],["Grandas de Salime",6],["Mondoñedo",5],["Povoa de Varzim",5],["París",5],["Huelva",4],["Finisterra",4],["Italia",4],["La Rioja",4],["Reino Unido",4],["La Rioja",4],["Porriño",4],["Vigo",3],["Fonsagrada",3],["Valladolid",3],["Tineo",3],["Castilla La Mancha",3],["Benavente",3],["Cadavo",2],["Badajoz",2],["Montserrat",2],["Tineo - C.P.",2],["Córdoba",2],["Baamonde",2],["Castrojeriz",2],["Polonia",2],["A Guarda",1],["San Juan de Ortega",1],["Murcia",1],["Resto Galicia",1],["Dinamarca",1],["La Bañeza",1]],"startingRegions":[["Lugo",4788],["France",3665],["León",3162],["Portugal",1799],["Navarra",1747],["Pontevedra",646],["Asturias",639],["Sevilla",561],["Burgos",514],["Ourense",483],["Gipuzkoa",292],["A Coruña",280],["La Rioja",146],["Zamora",136],["Holland",106],["Salamanca",87],["Cantabria",83],["Palencia",83],["Vizcaya",73],["Germany",71],["Switzerland",49],["Barcelona",46],["Huesca",43],["Valencia",42],["Madrid",41],["Badajoz",36],["Belgium",30],["Europe Other",28],["Albacete",22],["Porgugal",19],["Cáceres",18],["Granada",16],["Zaragoza",13],["Austria",10],["Málaga",8],["Huelva",4],["Italy",4],["UK",4],["Valladolid",3],["Poland",2],["Córdoba",2],["Murcia",1],["Denmark",1]],"caminos":[["Frances-Camino de",14330],["Portugues-Camino",2445],["Via de la Plata",1396],["Norte-Camino de",864],["Primitivo-Camino",440],["Ingles-Camino",254],["Otros caminos",49],["Muxia-Finisterre",25]]},"6":{"year":"2011","month":"6","pilgrims":25230,"gender":[["Hombre",15215],["Mujer",10015]],"transport":[["Pie",19800],["Bicicleta",5381],["Caballo",49]],"age":[["30 - 60",15123],["> 60",5513],["< 30",4594]],"motivation":[["Religioso y otros",12417],["Religioso",11575],["No religioso",1238]],"spanishFrom":[["Madrid",2022],["Cataluña",1655],["Andalucía",1554],["Comunidad Valenciana",964],["Castilla León",794],["Pais Vasco",636],["Galicia",534],["Castilla la Mancha",521],["Canarias",335],["Murcia",241],["Asturias",218],["Aragón",214],["Extremadura",186],["Baleares",150],["Navarra",136],["Cantabria",126],["La Rioja",53],["Otra",39],["Ceuta",12],["Melilla",2]],"byCountry":[["España",10392],["Alemania",3191],["Portugal",1928],["Italia",1886],["Francia",1489],["Estados Unidos",699],["Holanda",556],["Austria",451],["Irlanda",406],["Canadá",400],["Brasil",334],["Reino Unido",300],["Belgica",292],["Corea",245],["Suiza",223],["Australia",222],["Dinamarca",212],["Suecia",190],["Polonia",187],["República Checa",150],["México",140],["Hungría",127],["Japón",114],["Finlandia",113],["Argentina",97],["Noruega",96],["Sudáfrica",94],["Eslovaquia",74],["Rusia",66],["Eslovenia",60],["Nueva Zelanda",47],["Venezuela",41],["Chile",40],["Colombia",39],["Uruguay",32],["Rumania",30],["Puerto Rico",22],["Rep. Dominicana",19],["Bulgaria",16],["Ecuador",15],["Lituania",13],["Perú",13],["Filipinas",10],["China",9],["Croacia",9],["Luxemburgo",9],["Estonia",8],["Taiwán",8],["El Salvador",8],["Grecia",7],["Costa Rica",7],["Guatemala",7],["Singapur",7],["Israel",5],["Islandia",5],["Malta",5],["Turquía",5],["Panamá",5],["Bolivia",4],["Moldavia",4],["Andorra",4],["Liechtensein",4],["Ucrania",4],["Dominica",3],["Nicaragua",3],["Sri Lanka",3],["Malasia",3],["Honduras",3],["Letonia",2],["Cuba",2],["Trinidad y Tobago",2],["Islas Feroe",2],["Tailandia",1],["Jordania",1],["India",1],["Albania",1],["Georgia",1],["Egipto",1],["Indonesia",1],["Namibia",1],["Antillas Holandesas",1],["Marruecos",1],["Haití",1],["Chipre",1]],"professions":[["Empleados",6711],["Jubilados",4671],["Tecnicos",3536],["Estudiantes",2551],["Liberales",2456],["Funcionarios",1523],["Profesores",1061],["Obreros",749],["Amas de Casa",665],["Parados",605],["Directivos",244],["Artistas",174],["Sacerdotes",98],["Agricultores",74],["Religiosas",46],["Marinos",33],["Oikoten",17],["Deportistas",16]],"startingCities":[["Sarria",4062],["S. Jean P. Port",3805],["León",1553],["Roncesvalles",1401],["Oporto",1288],["Cebreiro",948],["Ponferrada",828],["Tui",819],["Astorga",769],["Pamplona",753],["Le Puy",728],["Resto Portugal",674],["Burgos",570],["Sevilla",505],["Francia",430],["Oviedo - C.P.",412],["Irún",394],["Ferrol",307],["Valença do Minho",285],["Vilafranca",269],["Holanda",225],["Resto C. León",205],["Triacastela",189],["Alemania",170],["Somport",152],["Salamanca",151],["Ourense",137],["Bilbao",130],["Logroño",130],["Lugo - C.P.",116],["Bélgica",107],["Resto Asturias",103],["Ponte de Lima",101],["Vigo",100],["Samos",98],["Oviedo",97],["Santander",95],["Lisboa",94],["Sahagún",75],["Zamora",74],["Chaves-Portugal",71],["Ribadeo",70],["Gijón",67],["Braga",58],["Baamonde",58],["Lourdes",58],["Suiza",56],["Madrid - C.F.",56],["Resto Asturias - C.P.",52],["Avilés",51],["Jaca",45],["Frómista",44],["Resto País Vasco",43],["Vilalba",40],["Cataluña",40],["San Sebastián",39],["Gudiña",37],["Arles",37],["Puebla de Sanabria",37],["Vezelay",36],["Madrid",34],["Resto Cantabria",34],["Hospital de Orbigo",33],["Carrión de los Condes",31],["Puente la Reina",28],["Francia",24],["Hendaya",23],["Mérida",23],["Porriño",23],["Estella",23],["Sto. Domingo de la Calzada",22],["Zaragoza",22],["Vega de Valcarce",22],["Cáceres",21],["Granja de Moreruela",21],["Resto Andalucia",19],["Resto C. León - V.P.",18],["Verín",18],["Resto de Extremadura",17],["Austria",17],["Xunqueira de Ambia",16],["Navarra",16],["Valencia",16],["Montserrat",15],["Com. Valenciana",15],["Italia",15],["Grandas de Salime - C.P.",14],["Castrojeriz",14],["Canfranc",14],["Castilla La Mancha",14],["Rabanal del Camino",14],["Muxia",13],["Fonsagrada - C.P.",13],["Finisterra",12],["R.Pais Vasco",12],["Granada",12],["Lourenzá",12],["Huelva",12],["Barcelona",9],["Laza",9],["Roma",7],["Cast. la Mancha",7],["París",7],["Tineo",7],["Tineo - C.P.",7],["Grandas de Salime",7],["Molinaseca",7],["Malaga",6],["Neda",6],["Nájera",6],["Castilla la Mancha",5],["Cadavo",5],["Fonsagrada",5],["Mondoñedo",5],["Com. Valenciana",4],["Resto Europa",4],["Republica Checa",4],["La Rioja",4],["Murcia",3],["Abadin",3],["Salas",3],["Valladolid",3],["Cataluña",3],["San Sebastian",3],["Córdoba",3],["Hungría",3],["A Guarda",2],["Badajoz",2],["Povoa de Varzim",2],["Reino Unido",2],["Allariz",2],["Fonfría",2],["La Rioja",1],["Monforte de Lemos",1],["Benavente",1],["Reino Unido",1],["La Bañeza",1],["Gonzar",1],["Dinamarca",1]],"startingRegions":[["Lugo",5628],["France",5300],["León",3794],["Portugal",2502],["Navarra",2221],["Pontevedra",944],["Asturias",820],["Burgos",584],["Sevilla",524],["Gipuzkoa",491],["A Coruña",338],["Holland",225],["Ourense",219],["Germany",170],["La Rioja",163],["Salamanca",151],["Zamora",133],["Vizcaya",130],["Cantabria",129],["Belgium",107],["Madrid",90],["Palencia",75],["Porgugal",71],["Barcelona",67],["Huesca",59],["Switzerland",56],["Badajoz",42],["Valencia",35],["Albacete",26],["Italy",22],["Zaragoza",22],["Cáceres",21],["Austria",17],["Granada",12],["Huelva",12],["Málaga",6],["Europe Other",4],["Czech Republic",4],["Murcia",3],["Valladolid",3],["Córdoba",3],["Hungary",3],["UK",3],["Denmark",1]],"caminos":[["Frances-Camino de",18203],["Portugues-Camino",3446],["Norte-Camino de",1312],["Via de la Plata",1264],["Primitivo-Camino",623],["Ingles-Camino",314],["Otros caminos",43],["Muxia-Finisterre",25]]},"7":{"year":"2011","month":"7","pilgrims":30838,"gender":[["Hombre",17165],["Mujer",13673]],"transport":[["Pie",26077],["Bicicleta",4709],["Caballo",51],["Silla de ruedas",1]],"age":[["30 - 60",16094],["< 30",12138],["> 60",2606]],"motivation":[["Religioso y otros",15883],["Religioso",12939],["No religioso",2016]],"spanishFrom":[["Andalucía",3757],["Madrid",3576],["Cataluña",2390],["Comunidad Valenciana",2260],["Castilla León",1443],["Pais Vasco",1373],["Castilla la Mancha",1108],["Galicia",913],["Extremadura",819],["Aragón",616],["Canarias",512],["Murcia",470],["Asturias",401],["Navarra",321],["Baleares",170],["Cantabria",137],["La Rioja",75],["Otra",53],["Ceuta",30],["Melilla",20]],"byCountry":[["España",20444],["Italia",1699],["Alemania",1617],["Francia",1013],["Estados Unidos",678],["Portugal",667],["Polonia",418],["Irlanda",356],["Holanda",309],["Reino Unido",293],["Belgica",267],["Corea",258],["Dinamarca",250],["Austria",208],["Canadá",204],["México",194],["Brasil",188],["Suecia",179],["Hungría",147],["Suiza",132],["Australia",120],["Noruega",117],["República Checa",105],["Argentina",93],["Japón",81],["Finlandia",72],["Colombia",67],["Eslovaquia",62],["Sudáfrica",59],["Eslovenia",55],["Ecuador",41],["Rusia",38],["Nueva Zelanda",33],["Rumania",31],["Venezuela",31],["Uruguay",25],["Croacia",21],["Lituania",20],["Perú",18],["Estonia",16],["Chile",13],["Andorra",13],["Israel",11],["China",11],["Bulgaria",11],["Rep. Dominicana",10],["Argelia",9],["Bolivia",8],["Puerto Rico",8],["Marruecos",7],["Luxemburgo",7],["Islandia",6],["India",6],["Cuba",5],["Paraguay",5],["Filipinas",5],["Taiwán",5],["El Salvador",5],["Malta",4],["Indonesia",4],["Grecia",4],["Costa Rica",4],["Tailandia",4],["Guatemala",4],["Singapur",4],["Islas Feroe",3],["Líbano",3],["Serbia",3],["Albania",2],["Turquía",2],["Nicaragua",2],["Panamá",2],["Ucrania",2],["Bielorrusia",2],["Cabo Verde",2],["Seychelles",2],["Dominica",2],["Bosnia",1],["Costa de Marfil",1],["Angola",1],["Zimbabwe",1],["Nigeria",1],["Vietnam",1],["Letonia",1],["Irán",1],["Belice",1],["Moldavia",1],["Honduras",1],["Afganistán",1]],"professions":[["Estudiantes",9134],["Empleados",5451],["Profesores",3902],["Tecnicos",3354],["Liberales",2639],["Jubilados",2039],["Funcionarios",1516],["Obreros",870],["Amas de Casa",650],["Parados",520],["Artistas",212],["Sacerdotes",179],["Directivos",157],["Agricultores",116],["Religiosas",59],["Marinos",27],["Deportistas",11],["Oikoten",2]],"startingCities":[["Sarria",6899],["S. Jean P. Port",2537],["Cebreiro",1866],["León",1644],["Ponferrada",1574],["Roncesvalles",1568],["Astorga",1443],["Tui",1326],["Oporto",726],["Oviedo - C.P.",667],["Burgos",592],["Pamplona",590],["Vilafranca",541],["Valença do Minho",517],["Irún",507],["Triacastela",415],["Ferrol",408],["Resto C. León",384],["Ribadeo",378],["Le Puy",357],["Ourense",324],["Resto Asturias",313],["Francia",273],["Sevilla",194],["Lugo - C.P.",192],["Vilalba",191],["Santander",187],["Somport",183],["Bilbao",171],["Resto Portugal",163],["Oviedo",157],["Logroño",150],["Samos",149],["Holanda",139],["Neda",116],["Gijón",116],["Avilés",112],["Madrid - C.F.",100],["Lisboa",98],["Alemania",97],["Salamanca",91],["Ponte de Lima",89],["Resto País Vasco",86],["Vega de Valcarce",79],["Sahagún",78],["Bélgica",72],["Granja de Moreruela",69],["Resto Asturias - C.P.",62],["Baamonde",62],["Jaca",61],["Zamora",58],["Rábade",57],["San Sebastián",55],["Resto Cantabria",53],["Puebla de Sanabria",52],["Gudiña",49],["Puente la Reina",48],["Fonsagrada - C.P.",48],["Lourenzá",47],["Carrión de los Condes",46],["Madrid",45],["Porriño",45],["Mondoñedo",45],["Rabanal del Camino",44],["Navarra",41],["Suiza",40],["Lourdes",37],["Frómista",37],["Sto. Domingo de la Calzada",35],["Vezelay",31],["Braga",30],["Laza",28],["Abadin",28],["La Mesa",27],["Cataluña",26],["Zaragoza",25],["Tineo - C.P.",24],["Arles",22],["Com. Valenciana",22],["Hendaya",21],["Resto C. León - V.P.",21],["R.Pais Vasco",19],["Benavente",19],["Muxia",18],["Hospital de Orbigo",18],["Francia",18],["Mérida",18],["Montserrat",18],["Cáceres",17],["Barcelona",17],["Valencia",15],["París",15],["Allariz",15],["Vegadeo",15],["Estella",14],["Fonsagrada",14],["Grandas de Salime",14],["Cadavo",12],["La Rioja",12],["Chaves-Portugal",11],["Austria",11],["Valladolid",10],["Com. Valenciana",10],["Castilla La Mancha",10],["Finisterra",10],["Verín",10],["Nájera",9],["Resto Europa",9],["Molinaseca",8],["Granada",8],["Vigo",8],["Fonfría",7],["Canfranc",7],["Grandas de Salime - C.P.",7],["Resto de Extremadura",7],["Castilla la Mancha",7],["Malaga",6],["Polonia",6],["Badajoz",6],["Huelva",6],["Italia",6],["Salas",6],["Córdoba",6],["Baiona",5],["Resto Andalucia",5],["Cast. la Mancha",5],["Grado",5],["Xunqueira de Ambia",5],["Tineo",5],["Povoa de Varzim",4],["Roma",3],["Ponferrada. C.Inv.",3],["La Bañeza",3],["Cataluña",3],["La Rioja",2],["A Guarda",2],["San Sebastian",2],["San Juan de Ortega",2],["Resto Galicia",1],["Finlandia",1],["Dinamarca",1],["Irlanda",1],["Reino Unido",1]],"startingRegions":[["Lugo",10353],["León",5840],["France",3494],["Navarra",2261],["Portugal",1627],["Asturias",1530],["Pontevedra",1386],["Gipuzkoa",669],["Burgos",594],["A Coruña",553],["Ourense",431],["Cantabria",240],["La Rioja",208],["Sevilla",199],["Zamora",198],["Vizcaya",171],["Madrid",145],["Holland",139],["Germany",97],["Salamanca",91],["Palencia",83],["Belgium",72],["Huesca",68],["Barcelona",64],["Huelva",63],["Valencia",47],["Switzerland",40],["Badajoz",31],["Zaragoza",25],["Albacete",22],["Cáceres",17],["Austria",11],["Porgugal",11],["Valladolid",10],["Europe Other",9],["Italy",9],["Granada",8],["Poland",6],["Málaga",6],["Córdoba",6],["Finland",1],["Denmark",1],["Ireland",1],["UK",1]],"caminos":[["Frances-Camino de",22417],["Portugues-Camino",3013],["Norte-Camino de",2661],["Via de la Plata",1093],["Primitivo-Camino",1050],["Ingles-Camino",525],["Otros caminos",51],["Muxia-Finisterre",28]]},"8":{"year":"2011","month":"8","pilgrims":41488,"gender":[["Hombre",23665],["Mujer",17823]],"transport":[["Pie",34063],["Bicicleta",7383],["Caballo",41],["Silla de ruedas",1]],"age":[["30 - 60",24702],["< 30",14767],["> 60",2019]],"motivation":[["Religioso y otros",21038],["Religioso",17498],["No religioso",2952]],"spanishFrom":[["Cataluña",4592],["Andalucía",4477],["Madrid",4261],["Comunidad Valenciana",3756],["Pais Vasco",1666],["Galicia",1421],["Castilla León",1341],["Castilla la Mancha",1316],["Murcia",911],["Extremadura",731],["Aragón",614],["Asturias",397],["Canarias",373],["Navarra",310],["Cantabria",232],["Baleares",186],["La Rioja",161],["Otra",65],["Ceuta",49],["Melilla",15]],"byCountry":[["España",26874],["Italia",4472],["Alemania",1862],["Portugal",1480],["Francia",1115],["Estados Unidos",499],["Polonia",420],["Irlanda",355],["México",334],["Reino Unido",324],["República Checa",271],["Eslovaquia",268],["Holanda",255],["Belgica",243],["Corea",230],["Hungría",218],["Canadá",217],["Austria",217],["Brasil",187],["Eslovenia",171],["Dinamarca",156],["Argentina",106],["Venezuela",99],["Suiza",97],["Suecia",96],["Japón",95],["Australia",90],["Colombia",89],["Rumania",57],["Sudáfrica",44],["Noruega",43],["Chile",39],["Ecuador",36],["Rusia",31],["Perú",28],["Uruguay",28],["Lituania",24],["Grecia",21],["Nueva Zelanda",19],["Malasia",19],["Bulgaria",19],["China",13],["Finlandia",13],["Rep. Dominicana",13],["Ucrania",11],["Andorra",11],["Taiwán",10],["Estonia",10],["Israel",10],["Cuba",10],["El Salvador",10],["Luxemburgo",9],["Líbano",8],["Bolivia",8],["Filipinas",7],["Croacia",7],["Letonia",6],["Costa Rica",6],["India",6],["Irán",5],["Puerto Rico",5],["Libia",5],["Islandia",5],["Paraguay",4],["Singapur",4],["Honduras",4],["Nicaragua",3],["Turquía",3],["Guatemala",2],["Nepal",2],["Chipre",2],["Panamá",2],["Indonesia",2],["Moldavia",2],["Siria",2],["Guinea Ecuatorial",2],["Serbia",1],["Marruecos",1],["Senegal",1],["Irak",1],["Bosnia",1],["Pakistán",1],["Vietnam",1],["Swazilandia",1],["Cabo Verde",1],["Bielorrusia",1],["Angola",1],["Georgia",1],["Bangladesh",1],["Haití",1],["Argelia",1],["Túnez",1],["Tanzania",1],["Macedonia",1]],"professions":[["Empleados",10071],["Estudiantes",8738],["Tecnicos",5901],["Profesores",4814],["Liberales",4488],["Obreros",1741],["Funcionarios",1688],["Jubilados",1448],["Amas de Casa",788],["Parados",744],["Artistas",365],["Directivos",235],["Sacerdotes",209],["Agricultores",105],["Religiosas",98],["Marinos",33],["Deportistas",20],["Oikoten",2]],"startingCities":[["Sarria",10248],["S. Jean P. Port",3166],["Cebreiro",2492],["León",2375],["Roncesvalles",2333],["Ponferrada",2094],["Tui",2017],["Astorga",1194],["Oviedo - C.P.",944],["Burgos",916],["Vilafranca",882],["Oporto",842],["Ferrol",715],["Irún",662],["Pamplona",657],["Resto Portugal",616],["Valença do Minho",538],["Ourense",530],["Triacastela",490],["Resto Asturias",403],["Resto C. León",391],["Le Puy",369],["Santander",351],["Lugo - C.P.",343],["Ribadeo",339],["Oviedo",292],["Francia",252],["Gijón",241],["Sevilla",224],["Logroño",224],["Ponte de Lima",213],["Samos",213],["Bilbao",195],["Resto País Vasco",165],["Avilés",160],["Vilalba",159],["Somport",147],["Alemania",127],["Resto Cantabria",116],["Salamanca",116],["San Sebastián",105],["Lisboa",101],["Zamora",99],["Resto Asturias - C.P.",89],["Holanda",86],["Sahagún",84],["Carrión de los Condes",77],["Jaca",74],["Madrid - C.F.",74],["Puebla de Sanabria",72],["Vega de Valcarce",64],["Abadin",63],["Sto. Domingo de la Calzada",59],["Suiza",58],["Baamonde",55],["Braga",54],["Frómista",53],["Lourdes",46],["Gudiña",43],["Madrid",42],["Mérida",42],["Resto C. León - V.P.",42],["Cataluña",40],["Navarra",40],["Zaragoza",39],["Bélgica",39],["Hendaya",37],["Granja de Moreruela",36],["Lourenzá",35],["Mondoñedo",35],["Hospital de Orbigo",35],["Fonsagrada - C.P.",33],["Montserrat",33],["Neda",32],["Com. Valenciana",32],["Rabanal del Camino",31],["Puente la Reina",30],["Resto de Extremadura",27],["Grandas de Salime - C.P.",25],["Barcelona",25],["Porriño",25],["Finisterra",24],["Muxia",23],["R.Pais Vasco",23],["Verín",22],["Italia",21],["Estella",21],["Grandas de Salime",20],["Francia",20],["Molinaseca",20],["Cáceres",19],["Xunqueira de Ambia",19],["Castilla la Mancha",18],["Tineo - C.P.",18],["Canfranc",17],["La Rioja",16],["Cast. la Mancha",16],["Vezelay",15],["Arles",15],["Fonsagrada",14],["Resto Andalucia",14],["San Sebastian",14],["Valencia",13],["Chaves-Portugal",13],["Laza",13],["Austria",13],["París",12],["Valladolid",12],["Tineo",11],["Nájera",11],["Castilla La Mancha",10],["Roma",8],["Castrojeriz",8],["Badajoz",8],["Com. Valenciana",8],["Huelva",8],["Vigo",8],["Benavente",7],["Granada",7],["Resto Europa",6],["Salas",5],["Vilabade",5],["Cataluña",5],["A Guarda",4],["Povoa de Varzim",4],["Córdoba",4],["Fonfría",4],["La Bañeza",4],["Malaga",3],["Murcia",3],["Polonia",3],["Viveiro",3],["Cadavo",2],["Ortigueira",2],["Baiona",2],["Vegadeo",2],["Dinamarca",1],["Reino Unido",1],["Luxemburgo",1],["Allariz",1],["La Rioja",1],["Inglaterra",1]],"startingRegions":[["Lugo",14533],["León",7216],["France",4079],["Navarra",3081],["Portugal",2368],["Asturias",2210],["Pontevedra",2056],["Gipuzkoa",969],["Burgos",924],["A Coruña",796],["Ourense",628],["Cantabria",467],["La Rioja",311],["Sevilla",238],["Zamora",214],["Vizcaya",195],["Palencia",130],["Germany",127],["Salamanca",116],["Madrid",116],["Barcelona",103],["Huesca",91],["Holland",86],["Badajoz",77],["Switzerland",58],["Valencia",53],["Albacete",44],["Zaragoza",39],["Belgium",39],["Italy",29],["Cáceres",19],["Porgugal",13],["Austria",13],["Valladolid",12],["Huelva",8],["Granada",7],["Europe Other",6],["Córdoba",4],["Málaga",3],["Murcia",3],["Poland",3],["UK",2],["Denmark",1],["Luxembourg",1]],"caminos":[["Frances-Camino de",29795],["Portugues-Camino",4424],["Norte-Camino de",3501],["Primitivo-Camino",1464],["Via de la Plata",1437],["Ingles-Camino",749],["Otros caminos",71],["Muxia-Finisterre",47]]},"9":{"year":"2011","month":"9","pilgrims":26022,"gender":[["Hombre",14545],["Mujer",11477]],"transport":[["Pie",21517],["Bicicleta",4446],["Caballo",59]],"age":[["30 - 60",15090],["< 30",6252],["> 60",4680]],"motivation":[["Religioso y otros",12855],["Religioso",11537],["No religioso",1630]],"spanishFrom":[["Madrid",2279],["Andalucía",2173],["Cataluña",1664],["Comunidad Valenciana",1361],["Castilla León",1007],["Galicia",879],["Castilla la Mancha",597],["Pais Vasco",570],["Canarias",357],["Murcia",310],["Aragón",295],["Extremadura",290],["Asturias",280],["Navarra",185],["Baleares",155],["Cantabria",140],["La Rioja",78],["Otra",36],["Melilla",32],["Ceuta",15]],"byCountry":[["España",12703],["Alemania",3055],["Italia",1506],["Francia",1400],["Portugal",982],["Irlanda",640],["Reino Unido",497],["Canadá",424],["Holanda",372],["Polonia",371],["Estados Unidos",361],["Dinamarca",356],["Brasil",346],["Belgica",314],["Austria",251],["Suecia",240],["Australia",233],["República Checa",188],["Suiza",156],["Noruega",148],["México",134],["Argentina",116],["Sudáfrica",114],["Finlandia",109],["Japón",107],["Corea",102],["Eslovaquia",90],["Hungría",83],["Eslovenia",71],["Venezuela",69],["Colombia",51],["Nueva Zelanda",41],["Rusia",35],["Israel",30],["Uruguay",27],["Estonia",24],["Perú",19],["Rumania",19],["Ecuador",18],["Luxemburgo",17],["Bulgaria",15],["Chile",14],["Andorra",12],["Costa Rica",11],["Puerto Rico",10],["Bielorrusia",9],["Guatemala",8],["Paraguay",8],["Letonia",8],["Lituania",8],["Croacia",8],["Ucrania",7],["China",6],["Turquía",6],["Rep. Dominicana",6],["Cuba",6],["Grecia",5],["Bolivia",4],["Chipre",4],["Islandia",4],["Mozambique",4],["Taiwán",3],["Panamá",3],["Serbia",3],["Filipinas",3],["Vietnam",3],["Timor Oriental",3],["Irán",2],["Singapur",2],["India",2],["Malta",2],["Dominica",1],["Zimbabwe",1],["Bosnia",1],["Marruecos",1],["Honduras",1],["Tailandia",1],["Egipto",1],["Tanzania",1],["Nigeria",1],["Kenya",1],["Argelia",1],["Kazajistán",1],["Islas Feroe",1],["Trinidad y Tobago",1]],"professions":[["Empleados",6573],["Tecnicos",3915],["Jubilados",3657],["Estudiantes",3362],["Liberales",3004],["Funcionarios",1503],["Obreros",1084],["Profesores",1039],["Amas de Casa",622],["Parados",542],["Directivos",242],["Artistas",197],["Sacerdotes",121],["Agricultores",76],["Religiosas",45],["Marinos",23],["Deportistas",15],["Oikoten",2]],"startingCities":[["Sarria",5220],["S. Jean P. Port",2711],["León",1901],["Cebreiro",1390],["Roncesvalles",1292],["Ponferrada",1267],["Tui",1105],["Oporto",1095],["Astorga",855],["Pamplona",675],["Le Puy",626],["Burgos",598],["Oviedo - C.P.",571],["Vilafranca",399],["Valença do Minho",382],["Irún",363],["Ferrol",339],["Francia",318],["Sevilla",242],["Ourense",206],["Resto Portugal",201],["Samos",200],["Resto C. León",195],["Triacastela",190],["Resto Asturias",173],["Bilbao",165],["Ribadeo",163],["Lugo - C.P.",154],["Alemania",146],["Santander",146],["Ponte de Lima",140],["Logroño",129],["Somport",109],["Vilalba",101],["Holanda",98],["Gijón",89],["Oviedo",85],["Lisboa",82],["Sahagún",76],["Salamanca",73],["Zamora",72],["Avilés",70],["Resto Asturias - C.P.",66],["Madrid - C.F.",65],["Bélgica",63],["Resto Cantabria",56],["San Sebastián",51],["Puebla de Sanabria",47],["Mondoñedo",45],["Resto País Vasco",42],["Frómista",41],["Suiza",39],["Vega de Valcarce",35],["Jaca",33],["Carrión de los Condes",32],["Lourdes",32],["Cataluña",32],["Muxia",31],["Allariz",27],["Granja de Moreruela",27],["Sto. Domingo de la Calzada",25],["Austria",25],["Baamonde",25],["Hospital de Orbigo",25],["Hendaya",24],["Barcelona",24],["Rabanal del Camino",23],["Vigo",23],["Francia",22],["Arles",22],["Madrid",21],["Braga",21],["Vezelay",21],["Puente la Reina",20],["Tineo - C.P.",19],["Zaragoza",19],["Fonsagrada - C.P.",18],["Mérida",18],["Montserrat",17],["Resto C. León - V.P.",17],["Gudiña",15],["Valencia",14],["Povoa de Varzim",13],["Molinaseca",13],["Abadin",13],["Resto Andalucia",12],["Estella",12],["Laza",11],["Porriño",11],["Com. Valenciana",11],["Com. Valenciana",11],["Lourenzá",11],["A Guarda",11],["Navarra",10],["A Rúa",10],["Salas",10],["Cadavo",10],["Roma",10],["Italia",10],["Castilla La Mancha",9],["París",9],["La Rioja",9],["Córdoba",9],["Cáceres",8],["Verín",8],["Grandas de Salime",8],["Grandas de Salime - C.P.",8],["R.Pais Vasco",7],["Xunqueira de Ambia",7],["Cast. la Mancha",7],["Finisterra",7],["Huelva",6],["Fonsagrada",6],["Castilla la Mancha",6],["San Sebastian",6],["Nájera",5],["Canfranc",5],["Valladolid",5],["Granada",5],["Tineo",5],["Chaves-Portugal",5],["Resto Europa",4],["Republica Checa",4],["Murcia",4],["Fonfría",3],["Ponferrada. C.Inv.",3],["Viveiro",3],["Resto de Extremadura",3],["Neda",3],["Malaga",2],["La Bañeza",2],["Cataluña",2],["Resto Galicia",2],["San Juan de Ortega",2],["Badajoz",2],["Castrojeriz",2],["Finlandia",1],["Benavente",1],["Polonia",1],["Reino Unido",1],["Grado",1],["Monforte de Lemos",1],["Baiona",1],["Rábade",1]],"startingRegions":[["Lugo",7553],["León",4811],["France",3894],["Navarra",2009],["Portugal",1934],["Pontevedra",1151],["Asturias",1105],["Burgos",602],["Gipuzkoa",469],["A Coruña",382],["Ourense",284],["Sevilla",254],["Cantabria",202],["La Rioja",168],["Vizcaya",165],["Zamora",147],["Germany",146],["Holland",98],["Madrid",86],["Barcelona",75],["Salamanca",73],["Palencia",73],["Belgium",63],["Switzerland",39],["Huesca",38],["Valencia",36],["Austria",25],["Badajoz",23],["Albacete",22],["Italy",20],["Zaragoza",19],["Córdoba",9],["Cáceres",8],["Huelva",7],["Valladolid",5],["Porgugal",5],["Granada",5],["Europe Other",4],["Czech Republic",4],["Murcia",4],["Málaga",2],["Poland",1],["UK",1],["Finland",1]],"caminos":[["Frances-Camino de",19111],["Portugues-Camino",3085],["Norte-Camino de",1676],["Via de la Plata",860],["Primitivo-Camino",857],["Ingles-Camino",342],["Otros caminos",53],["Muxia-Finisterre",38]]},"10":{"year":"2011","month":"10","pilgrims":16243,"gender":[["Hombre",9436],["Mujer",6807]],"transport":[["Pie",14187],["Bicicleta",2009],["Caballo",42],["Silla de ruedas",5]],"age":[["30 - 60",9602],["< 30",3324],["> 60",3317]],"motivation":[["Religioso y otros",8483],["Religioso",6745],["No religioso",1015]],"spanishFrom":[["Madrid",1270],["Andalucía",921],["Cataluña",909],["Galicia",835],["Comunidad Valenciana",693],["Castilla León",459],["Asturias",304],["Pais Vasco",300],["Castilla la Mancha",298],["Canarias",255],["Baleares",164],["Aragón",123],["Extremadura",114],["Navarra",108],["Murcia",102],["Cantabria",57],["La Rioja",41],["Otra",23],["Melilla",7],["Ceuta",6]],"byCountry":[["España",6989],["Alemania",1658],["Francia",1010],["Portugal",768],["Italia",663],["Canadá",504],["Estados Unidos",474],["Brasil",347],["Reino Unido",328],["Australia",303],["Corea",249],["Japón",231],["Holanda",223],["Dinamarca",213],["Suiza",210],["Irlanda",198],["Suecia",180],["Noruega",175],["Polonia",141],["Austria",141],["México",129],["Belgica",110],["Argentina",99],["Finlandia",85],["Hungría",73],["Sudáfrica",73],["República Checa",65],["Colombia",59],["Israel",52],["Venezuela",43],["Nueva Zelanda",38],["Perú",36],["Eslovaquia",29],["Chile",29],["China",28],["Rumania",27],["Rusia",21],["Ecuador",21],["Eslovenia",18],["Taiwán",15],["Uruguay",14],["Luxemburgo",13],["Letonia",12],["Estonia",11],["Bolivia",11],["Filipinas",9],["Costa Rica",9],["Bulgaria",9],["Rep. Dominicana",8],["Singapur",7],["Lituania",7],["Croacia",6],["India",6],["Puerto Rico",6],["Malasia",5],["Grecia",5],["Ucrania",5],["Islandia",4],["Panamá",3],["Liechtensein",3],["Paraguay",3],["Cabo Verde",2],["Egipto",2],["Emiratos Arabes Unidos",2],["Marruecos",2],["Guatemala",2],["Irán",2],["Líbano",2],["Tailandia",1],["Indonesia",1],["Cuba",1],["Malta",1],["Argelia",1],["Mali",1],["El Salvador",1],["Albania",1],["Angola",1],["Nicaragua",1],["Dominica",1],["Chipre",1],["Bermudas",1],["Nigeria",1],["Andorra",1],["Turquía",1],["Jamaica",1],["Camerún",1]],"professions":[["Empleados",3750],["Jubilados",2677],["Tecnicos",2339],["Liberales",2062],["Estudiantes",1734],["Funcionarios",916],["Profesores",686],["Obreros",622],["Parados",508],["Amas de Casa",346],["Directivos",189],["Artistas",157],["Sacerdotes",86],["Agricultores",64],["Marinos",49],["Deportistas",29],["Religiosas",29]],"startingCities":[["Sarria",2958],["S. Jean P. Port",2762],["Cebreiro",981],["Roncesvalles",829],["León",798],["Oporto",661],["Tui",653],["Ponferrada",585],["Le Puy",450],["Astorga",431],["Pamplona",391],["Burgos",337],["Oviedo - C.P.",275],["Francia",256],["Sevilla",253],["Resto Portugal",236],["Irún",228],["Vilafranca",223],["Valença do Minho",183],["Ferrol",178],["Ourense",158],["Samos",134],["Resto C. León",94],["Triacastela",88],["Somport",87],["Alemania",83],["Lisboa",80],["Ponte de Lima",80],["Logroño",79],["Lugo - C.P.",76],["Salamanca",73],["Bilbao",69],["Vilalba",63],["Suiza",56],["Santander",49],["Avilés",46],["Resto Asturias",45],["Gijón",45],["Holanda",42],["Rabanal del Camino",40],["Resto País Vasco",38],["Zamora",37],["Ribadeo",33],["Jaca",33],["Puebla de Sanabria",33],["Frómista",31],["Sahagún",30],["Porriño",30],["Vezelay",27],["Oviedo",26],["Madrid - C.F.",25],["Lourdes",24],["Bélgica",24],["Puente la Reina",24],["Francia",21],["Carrión de los Condes",21],["Baamonde",20],["Arles",20],["Resto Cantabria",19],["Xunqueira de Ambia",19],["Chaves-Portugal",17],["Madrid",16],["Resto Asturias - C.P.",16],["Valencia",16],["Vega de Valcarce",15],["Mérida",15],["Granja de Moreruela",15],["Gudiña",15],["Cataluña",15],["Laza",15],["Grandas de Salime - C.P.",15],["Austria",15],["San Sebastián",14],["Hospital de Orbigo",14],["Zaragoza",13],["Fonfría",13],["Resto Andalucia",12],["Hendaya",12],["Mondoñedo",12],["Povoa de Varzim",11],["Sto. Domingo de la Calzada",11],["Com. Valenciana",10],["Ponferrada. C.Inv.",10],["Resto C. León - V.P.",10],["Resto de Extremadura",9],["Braga",9],["París",9],["Fonsagrada - C.P.",9],["Neda",8],["Barcelona",8],["Tineo",7],["Murcia",7],["Cáceres",7],["Luxemburgo",7],["Lourenzá",7],["Montserrat",6],["Grandas de Salime",6],["Granada",6],["Tineo - C.P.",6],["Nájera",5],["Navarra",5],["Estella",5],["Benavente",5],["Canfranc",5],["Córdoba",5],["San Sebastian",5],["La Rioja",4],["R.Pais Vasco",4],["Valladolid",4],["Muxia",4],["Verín",4],["Vigo",4],["Polonia",3],["Resto Europa",3],["Reino Unido",3],["Cadavo",3],["Allariz",3],["Castilla La Mancha",3],["Italia",3],["Malaga",3],["Com. Valenciana",3],["Molinaseca",3],["Huelva",3],["Dinamarca",3],["Roma",2],["Cast. la Mancha",2],["La Rioja",2],["Castilla la Mancha",2],["Salas",2],["Fonsagrada",2],["Andorra",1],["Castrojeriz",1],["San Juan de Ortega",1],["Republica Checa",1],["A Guarda",1],["Inglaterra",1],["La Mesa",1],["Cataluña",1]],"startingRegions":[["Lugo",4399],["France",3668],["León",2253],["Portugal",1260],["Navarra",1254],["Pontevedra",688],["Asturias",490],["Burgos",339],["Gipuzkoa",289],["Sevilla",265],["Ourense",214],["A Coruña",190],["La Rioja",101],["Zamora",90],["Germany",83],["Salamanca",73],["Vizcaya",69],["Cantabria",68],["Switzerland",56],["Palencia",52],["Holland",42],["Madrid",41],["Huesca",38],["Barcelona",30],["Valencia",29],["Belgium",24],["Badajoz",24],["Porgugal",17],["Austria",15],["Zaragoza",13],["Luxembourg",7],["Murcia",7],["Cáceres",7],["Albacete",7],["Granada",6],["Italy",5],["Córdoba",5],["UK",4],["Valladolid",4],["Europe Other",3],["Poland",3],["Málaga",3],["Huelva",3],["Denmark",3],["Andorra",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",12136],["Portugues-Camino",1948],["Norte-Camino de",780],["Via de la Plata",740],["Primitivo-Camino",403],["Ingles-Camino",186],["Otros caminos",46],["Muxia-Finisterre",4]]},"11":{"year":"2011","month":"11","pilgrims":3597,"gender":[["Hombre",2251],["Mujer",1346]],"transport":[["Pie",3270],["Bicicleta",318],["Caballo",9]],"age":[["30 - 60",2154],["< 30",991],["> 60",452]],"motivation":[["Religioso y otros",2047],["Religioso",1307],["No religioso",243]],"spanishFrom":[["Galicia",333],["Andalucía",285],["Madrid",284],["Cataluña",249],["Comunidad Valenciana",150],["Baleares",98],["Asturias",97],["Castilla León",79],["Pais Vasco",56],["Castilla la Mancha",55],["Murcia",35],["Canarias",34],["Extremadura",27],["Aragón",27],["Navarra",16],["Cantabria",14],["La Rioja",13],["Otra",7],["Melilla",2],["Ceuta",1]],"byCountry":[["España",1862],["Alemania",251],["Francia",152],["Corea",143],["Italia",126],["Portugal",106],["Estados Unidos",103],["Belgica",82],["Canadá",81],["Brasil",69],["Australia",60],["Reino Unido",58],["Japón",52],["Irlanda",46],["Suiza",45],["Holanda",39],["Austria",33],["Argentina",27],["Dinamarca",27],["México",24],["Suecia",21],["Hungría",19],["Polonia",18],["Nueva Zelanda",12],["Chile",12],["República Checa",12],["Finlandia",11],["Venezuela",8],["Colombia",7],["Eslovaquia",6],["Rusia",6],["Sudáfrica",6],["Andorra",5],["Bulgaria",5],["Uruguay",5],["Israel",4],["Ucrania",4],["Malta",4],["Puerto Rico",3],["Malasia",3],["Eslovenia",3],["Rumania",3],["Lituania",3],["Estonia",3],["Noruega",3],["Perú",2],["China",2],["Guatemala",2],["Ecuador",2],["Filipinas",2],["Paraguay",1],["Costa Rica",1],["Indonesia",1],["Luxemburgo",1],["Croacia",1],["Nicaragua",1],["Panamá",1],["Singapur",1],["Mauricio",1],["Cuba",1],["Albania",1],["Rep. Dominicana",1],["Grecia",1],["Taiwán",1],["Letonia",1]],"professions":[["Empleados",962],["Tecnicos",480],["Estudiantes",462],["Liberales",420],["Jubilados",340],["Funcionarios",195],["Parados",193],["Obreros",162],["Profesores",159],["Amas de Casa",76],["Artistas",62],["Directivos",33],["Marinos",15],["Sacerdotes",13],["Agricultores",12],["Deportistas",8],["Religiosas",5]],"startingCities":[["Sarria",688],["S. Jean P. Port",631],["Cebreiro",186],["Ponferrada",179],["Tui",160],["Roncesvalles",159],["León",142],["Pamplona",90],["Astorga",82],["Oviedo - C.P.",79],["Le Puy",79],["Ourense",77],["Sevilla",76],["Vilafranca",69],["Oporto",68],["Burgos",60],["Irún",58],["Francia",57],["Resto Portugal",55],["Samos",39],["Ferrol",38],["Valença do Minho",34],["Triacastela",27],["Lugo - C.P.",26],["Suiza",25],["Somport",23],["Logroño",17],["Bilbao",16],["Oviedo",16],["Resto C. León",15],["Alemania",14],["Ponte de Lima",13],["Jaca",13],["Santander",11],["Lisboa",11],["Zamora",11],["Salamanca",10],["Lourdes",10],["Ribadeo",9],["Bélgica",9],["Mérida",9],["Vezelay",8],["Holanda",7],["Gijón",7],["Vilalba",7],["Arles",6],["Barcelona",6],["Cataluña",6],["Finisterra",6],["Resto Andalucia",5],["París",5],["Valencia",5],["Resto Asturias",5],["Rabanal del Camino",5],["Resto Europa",5],["Vega de Valcarce",4],["Navarra",4],["Canfranc",4],["Sto. Domingo de la Calzada",4],["Resto País Vasco",4],["Resto C. León - V.P.",4],["San Sebastián",4],["Zaragoza",4],["Neda",4],["Porriño",4],["Sahagún",4],["Francia",4],["Puente la Reina",3],["Granada",3],["Resto Cantabria",3],["Grandas de Salime - C.P.",3],["Muxia",3],["Madrid - C.F.",3],["Chaves-Portugal",3],["Montserrat",3],["Madrid",3],["Polonia",3],["Avilés",3],["Ponferrada. C.Inv.",3],["Fonfría",2],["Castilla la Mancha",2],["Cast. la Mancha",2],["Italia",2],["Quiroga",2],["Hendaya",2],["Malaga",2],["Puebla de Sanabria",2],["Lourenzá",2],["Frómista",2],["Fonsagrada",2],["Finlandia",1],["Reino Unido",1],["Braga",1],["Resto de Extremadura",1],["R.Pais Vasco",1],["Carrión de los Condes",1],["San Sebastian",1],["Estella",1],["Inglaterra",1],["Granja de Moreruela",1],["Abadin",1],["Grado",1],["Com. Valenciana",1],["Com. Valenciana",1],["Resto Asturias - C.P.",1],["Badajoz",1],["Grecia",1]],"startingRegions":[["Lugo",991],["France",825],["León",507],["Navarra",257],["Portugal",182],["Pontevedra",164],["Asturias",115],["Sevilla",81],["Ourense",77],["Gipuzkoa",68],["Burgos",60],["A Coruña",51],["Switzerland",25],["La Rioja",21],["Huesca",17],["Vizcaya",16],["Barcelona",15],["Germany",14],["Cantabria",14],["Zamora",14],["Badajoz",11],["Salamanca",10],["Belgium",9],["Holland",7],["Valencia",7],["Madrid",6],["Europe Other",5],["Zaragoza",4],["Albacete",4],["Poland",3],["Granada",3],["Porgugal",3],["Palencia",3],["Málaga",2],["Italy",2],["UK",2],["Finland",1],["Greece",1]],"caminos":[["Frances-Camino de",2712],["Portugues-Camino",346],["Via de la Plata",208],["Norte-Camino de",157],["Primitivo-Camino",110],["Ingles-Camino",42],["Otros caminos",13],["Muxia-Finisterre",9]]},"12":{"year":"2011","month":"12","pilgrims":1498,"gender":[["Hombre",1074],["Mujer",424]],"transport":[["Pie",1328],["Bicicleta",170]],"age":[["30 - 60",1040],["< 30",380],["> 60",78]],"motivation":[["Religioso y otros",843],["Religioso",542],["No religioso",113]],"spanishFrom":[["Galicia",272],["Madrid",167],["Cataluña",118],["Andalucía",79],["Comunidad Valenciana",73],["Castilla León",54],["Pais Vasco",48],["Baleares",45],["Castilla la Mancha",27],["Asturias",18],["Aragón",17],["Canarias",15],["Murcia",12],["Navarra",11],["Cantabria",8],["Extremadura",8],["La Rioja",7],["Melilla",1],["Ceuta",1],["Otra",1]],"byCountry":[["España",982],["Portugal",78],["Alemania",63],["Francia",50],["Corea",43],["Italia",40],["Estados Unidos",32],["Reino Unido",20],["Japón",20],["Suiza",19],["Belgica",17],["Brasil",17],["Holanda",17],["Dinamarca",10],["Argentina",9],["Canadá",9],["Irlanda",7],["República Checa",6],["Austria",6],["Venezuela",5],["México",5],["Suecia",4],["Guatemala",4],["Uruguay",3],["China",3],["Colombia",3],["Australia",2],["Rusia",2],["Polonia",2],["Perú",2],["Chile",1],["Noruega",1],["Sudáfrica",1],["Senegal",1],["Cuba",1],["Hungría",1],["Grecia",1],["Letonia",1],["Andorra",1],["Bolivia",1],["Ecuador",1],["Luxemburgo",1],["Eslovaquia",1],["Nueva Zelanda",1],["Nepal",1],["Cabo Verde",1],["Finlandia",1],["Ucrania",1]],"professions":[["Empleados",348],["Tecnicos",235],["Liberales",215],["Estudiantes",166],["Obreros",133],["Parados",89],["Funcionarios",86],["Profesores",79],["Jubilados",60],["Amas de Casa",28],["Artistas",20],["Directivos",17],["Marinos",9],["Agricultores",7],["Sacerdotes",6]],"startingCities":[["Sarria",279],["S. Jean P. Port",157],["Cebreiro",103],["Tui",97],["Roncesvalles",76],["Ponferrada",72],["León",45],["Resto Portugal",41],["Oporto",39],["Pamplona",38],["Ferrol",31],["Oviedo - C.P.",29],["Valença do Minho",26],["Vilafranca",23],["Burgos",23],["Francia",22],["Lugo - C.P.",21],["Ourense",18],["Sevilla",18],["Vilalba",18],["Astorga",17],["Le Puy",14],["Triacastela",13],["Irún",11],["Resto Asturias",11],["Logroño",10],["Ponte de Lima",10],["Alemania",10],["Suiza",10],["Resto C. León",9],["Neda",8],["Sahagún",8],["Oviedo",8],["Somport",8],["Grandas de Salime",8],["Fonsagrada - C.P.",7],["Ribadeo",7],["R.Pais Vasco",6],["Granja de Moreruela",6],["Vigo",6],["Bélgica",5],["A Guarda",5],["Montserrat",5],["Vega de Valcarce",5],["Navarra",5],["Bilbao",5],["Cataluña",5],["Santander",5],["Frómista",4],["San Sebastián",4],["Jaca",4],["Resto País Vasco",4],["Gijón",4],["Quiroga",4],["Madrid - C.F.",4],["Madrid",4],["Salamanca",3],["Carrión de los Condes",3],["Laza",3],["Resto Andalucia",3],["Lisboa",3],["Samos",3],["Austria",3],["Vezelay",2],["Republica Checa",2],["Lourdes",2],["Puebla de Sanabria",2],["Hendaya",2],["Avilés",2],["Resto Asturias - C.P.",2],["Fonsagrada",2],["Holanda",2],["Muxia",2],["Arles",2],["Zamora",2],["Puente la Reina",1],["Huelva",1],["Cataluña",1],["Resto C. León - V.P.",1],["Finisterra",1],["Baamonde",1],["Estella",1],["Gudiña",1],["Resto Cantabria",1],["Baiona",1],["París",1],["Granada",1],["Valencia",1],["Com. Valenciana",1],["Benavente",1],["Valladolid",1],["Roma",1],["Hospital de Orbigo",1]],"startingRegions":[["Lugo",458],["France",210],["León",181],["Navarra",121],["Portugal",119],["Pontevedra",109],["Asturias",64],["A Coruña",42],["Gipuzkoa",25],["Burgos",23],["Ourense",22],["Sevilla",21],["Zamora",11],["Barcelona",11],["Switzerland",10],["La Rioja",10],["Germany",10],["Madrid",8],["Palencia",7],["Cantabria",6],["Vizcaya",5],["Belgium",5],["Huesca",4],["Austria",3],["Salamanca",3],["Czech Republic",2],["Holland",2],["Valencia",2],["Huelva",1],["Granada",1],["Valladolid",1],["Italy",1]],"caminos":[["Frances-Camino de",1004],["Portugues-Camino",228],["Norte-Camino de",93],["Via de la Plata",65],["Primitivo-Camino",59],["Ingles-Camino",39],["Otros caminos",7],["Muxia-Finisterre",3]]},"all":{"year":"2011","month":"","pilgrims":183366,"gender":[["Hombre",105832],["Mujer",77534]],"transport":[["Pie",153069],["Bicicleta",29945],["Caballo",341],["Silla de ruedas",11]],"age":[["30 - 60",105736],["< 30",52142],["> 60",25488]],"motivation":[["Religioso y otros",93147],["Religioso",78969],["No religioso",11250]],"spanishFrom":[["Madrid",16946],["Andalucía",15959],["Cataluña",14362],["Comunidad Valenciana",11243],["Galicia",7002],["Castilla León",6614],["Pais Vasco",5662],["Castilla la Mancha",4736],["Extremadura",2673],["Murcia",2383],["Canarias",2378],["Aragón",2260],["Asturias",2044],["Baleares",1465],["Navarra",1305],["Cantabria",935],["La Rioja",493],["Otra",284],["Ceuta",153],["Melilla",88]],"byCountry":[["España",98985],["Alemania",16385],["Italia",12023],["Portugal",8559],["Francia",8047],["Estados Unidos",3670],["Irlanda",2641],["Holanda",2375],["Reino Unido",2351],["Canadá",2330],["Brasil",1960],["Austria",1897],["Polonia",1786],["Corea",1723],["Belgica",1655],["Dinamarca",1635],["Australia",1326],["Suecia",1250],["Suiza",1212],["México",1169],["República Checa",958],["Noruega",890],["Japón",865],["Hungría",757],["Argentina",713],["Finlandia",646],["Eslovaquia",605],["Sudáfrica",509],["Eslovenia",502],["Venezuela",425],["Colombia",415],["Rusia",244],["Nueva Zelanda",233],["Rumania",195],["Chile",184],["Ecuador",169],["Uruguay",166],["Perú",147],["Israel",125],["Lituania",112],["China",110],["Estonia",85],["Bulgaria",81],["Luxemburgo",73],["Puerto Rico",70],["Andorra",67],["Croacia",64],["Rep. Dominicana",62],["Taiwán",58],["Grecia",54],["Ucrania",46],["Filipinas",45],["Costa Rica",42],["Bolivia",40],["Guatemala",35],["Letonia",34],["Cuba",34],["Islandia",33],["Paraguay",31],["Malasia",31],["Panamá",29],["Singapur",29],["El Salvador",28],["Malta",23],["India",22],["Turquía",19],["Líbano",17],["Nicaragua",14],["Marruecos",14],["Honduras",13],["Irán",12],["Bielorrusia",12],["Argelia",12],["Liechtensein",11],["Serbia",10],["Indonesia",10],["Chipre",8],["Namibia",8],["Macedonia",7],["Islas Feroe",7],["Tailandia",7],["Cabo Verde",7],["Moldavia",7],["Dominica",7],["Vietnam",6],["Albania",6],["Nigeria",5],["Bosnia",5],["Libia",5],["Egipto",4],["Angola",4],["Camerún",4],["Mozambique",4],["Sri Lanka",3],["Trinidad y Tobago",3],["Siria",3],["Timor Oriental",3],["Nepal",3],["Senegal",2],["Haití",2],["Emiratos Arabes Unidos",2],["Georgia",2],["Tanzania",2],["Seychelles",2],["Guinea Ecuatorial",2],["Zimbabwe",2],["Armenia",2],["Pakistán",2],["Bhután",1],["Afganistán",1],["Costa de Marfil",1],["Antillas Holandesas",1],["Irak",1],["Swazilandia",1],["Bangladesh",1],["Túnez",1],["Jordania",1],["Belice",1],["Madagascar",1],["Kenya",1],["Kazajistán",1],["Ghana",1],["Mali",1],["Bermudas",1],["Jamaica",1],["Mauricio",1]],"professions":[["Empleados",43596],["Estudiantes",31839],["Tecnicos",25082],["Jubilados",20399],["Liberales",18862],["Profesores",13886],["Funcionarios",9434],["Obreros",6861],["Parados",4230],["Amas de Casa",4040],["Artistas",1529],["Directivos",1475],["Sacerdotes",827],["Agricultores",563],["Religiosas",362],["Marinos",232],["Deportistas",119],["Oikoten",30]],"startingCities":[["Sarria",39158],["S. Jean P. Port",19416],["León",10662],["Cebreiro",10168],["Roncesvalles",9348],["Ponferrada",8141],["Tui",7720],["Oporto",6539],["Astorga",5955],["Pamplona",4237],["Burgos",3926],["Oviedo - C.P.",3474],["Le Puy",3263],["Vilafranca",2931],["Resto Portugal",2832],["Valença do Minho",2815],["Irún",2553],["Ferrol",2468],["Sevilla",2308],["Ourense",2231],["Francia",2174],["Triacastela",1818],["Resto C. León",1520],["Resto Asturias",1218],["Lugo - C.P.",1211],["Samos",1124],["Ribadeo",1116],["Logroño",949],["Santander",934],["Oviedo",898],["Somport",879],["Bilbao",855],["Ponte de Lima",828],["Alemania",756],["Holanda",711],["Salamanca",669],["Vilalba",663],["Gijón",652],["Lisboa",647],["Avilés",504],["Zamora",453],["Sahagún",440],["Resto País Vasco",438],["Madrid - C.F.",395],["Bélgica",359],["Resto Asturias - C.P.",349],["Suiza",345],["Puebla de Sanabria",332],["Resto Cantabria",315],["San Sebastián",311],["Jaca",311],["Frómista",278],["Vega de Valcarce",276],["Carrión de los Condes",259],["Braga",255],["Neda",247],["Baamonde",243],["Lourdes",242],["Gudiña",235],["Cataluña",232],["Sto. Domingo de la Calzada",203],["Granja de Moreruela",198],["Madrid",196],["Puente la Reina",194],["Rabanal del Camino",185],["Fonsagrada - C.P.",184],["Porriño",183],["Com. Valenciana",174],["Mondoñedo",172],["Vezelay",172],["Mérida",168],["Vigo",161],["Arles",159],["Hospital de Orbigo",156],["Chaves-Portugal",149],["Lourenzá",142],["Zaragoza",141],["Navarra",136],["Hendaya",135],["Muxia",130],["Resto C. León - V.P.",128],["Cáceres",117],["Abadin",113],["Laza",113],["Valencia",110],["R.Pais Vasco",109],["Barcelona",107],["Montserrat",104],["Estella",104],["Grandas de Salime - C.P.",103],["Verín",101],["Austria",97],["Resto Andalucia",97],["Resto de Extremadura",82],["Xunqueira de Ambia",81],["Tineo - C.P.",80],["Finisterra",72],["Grandas de Salime",70],["Canfranc",69],["Molinaseca",68],["París",66],["Resto Europa",64],["La Rioja",63],["Granada",63],["Italia",61],["Fonsagrada",59],["Rábade",58],["Cast. la Mancha",54],["Castilla la Mancha",54],["Castilla La Mancha",53],["Allariz",49],["Cadavo",48],["Valladolid",46],["Malaga",43],["Tineo",42],["Povoa de Varzim",41],["Huelva",41],["San Sebastian",40],["Fonfría",39],["Nájera",38],["Salas",38],["Benavente",37],["Roma",34],["Córdoba",32],["La Mesa",30],["A Guarda",28],["Castrojeriz",28],["Badajoz",27],["Murcia",26],["Ponferrada. C.Inv.",23],["Vegadeo",20],["Polonia",19],["Reino Unido",14],["Grado",14],["Baiona",13],["La Bañeza",12],["Vilabade",12],["Resto Galicia",11],["Republica Checa",11],["A Rúa",10],["Luxemburgo",8],["San Juan de Ortega",8],["Dinamarca",8],["Quiroga",6],["Viveiro",6],["Monforte de Lemos",3],["Finlandia",3],["Hungría",3],["Ortigueira",3],["Inglaterra",3],["Gonzar",1],["Valcarlos",1],["Andorra",1],["Irlanda",1],["Grecia",1]],"startingRegions":[["Lugo",56286],["León",30497],["France",26506],["Navarra",14020],["Portugal",13957],["Pontevedra",8105],["Asturias",7492],["Burgos",3962],["Gipuzkoa",3451],["A Coruña",2931],["Ourense",2820],["Sevilla",2405],["La Rioja",1253],["Cantabria",1249],["Zamora",1020],["Vizcaya",855],["Germany",756],["Holland",711],["Salamanca",669],["Madrid",591],["Palencia",537],["Barcelona",443],["Huesca",380],["Belgium",359],["Switzerland",345],["Valencia",284],["Badajoz",277],["Albacete",161],["Porgugal",149],["Zaragoza",141],["Cáceres",117],["Huelva",99],["Austria",97],["Italy",95],["Europe Other",64],["Granada",63],["Valladolid",46],["Málaga",43],["Córdoba",32],["Murcia",26],["Poland",19],["UK",17],["Czech Republic",11],["Denmark",8],["Luxembourg",8],["Hungary",3],["Finland",3],["Ireland",1],["Andorra",1],["Greece",1]],"caminos":[["Frances-Camino de",132652],["Portugues-Camino",22062],["Norte-Camino de",11729],["Via de la Plata",8061],["Primitivo-Camino",5544],["Ingles-Camino",2720],["Otros caminos",396],["Muxia-Finisterre",202]]}},"2012":{"1":{"year":"2012","month":"1","pilgrims":872,"gender":[["Hombre",577],["Mujer",295]],"transport":[["Pie",810],["Bicicleta",62]],"age":[["30 - 60",526],["< 30",289],["> 60",57]],"motivation":[["Religioso y otros",442],["Religioso",382],["No religioso",48]],"spanishFrom":[["Madrid",132],["Galicia",81],["Cataluña",58],["Comunidad Valenciana",40],["Asturias",40],["Andalucía",35],["Castilla León",31],["Pais Vasco",20],["Castilla la Mancha",12],["Aragón",8],["Baleares",6],["Murcia",5],["Ceuta",4],["Extremadura",4],["Canarias",3],["Cantabria",2],["Otra",1],["Navarra",1]],"byCountry":[["España",483],["Corea",103],["Italia",49],["Estados Unidos",36],["Alemania",33],["Portugal",19],["Brasil",19],["Canadá",11],["México",11],["Francia",10],["Japón",10],["Colombia",9],["Reino Unido",8],["Holanda",7],["Argentina",7],["Australia",6],["Austria",5],["Irlanda",5],["Hungría",5],["Rusia",5],["Polonia",3],["Ecuador",3],["Belgica",3],["Chile",2],["Nueva Zelanda",2],["China",2],["Venezuela",2],["Dinamarca",2],["Suiza",2],["Panamá",1],["República Checa",1],["Luxemburgo",1],["Croacia",1],["Rumania",1],["Ucrania",1],["Liechtensein",1],["Sudáfrica",1],["Suecia",1],["Bolivia",1]],"professions":[["Estudiantes",219],["Empleados",165],["Tecnicos",104],["Liberales",97],["Profesores",58],["Obreros",57],["Funcionarios",50],["Parados",41],["Jubilados",36],["Artistas",14],["Amas de Casa",12],["Agricultores",7],["Directivos",6],["Religiosas",3],["Deportistas",2],["Sacerdotes",1]],"startingCities":[["Sarria",196],["León",82],["S. Jean P. Port",76],["Cebreiro",64],["Ponferrada",50],["Oviedo - C.P.",49],["Oporto",34],["Tui",32],["Roncesvalles",30],["Astorga",29],["Ferrol",23],["Burgos",22],["Pamplona",21],["Valença do Minho",14],["Montserrat",13],["Vilafranca",12],["Braga",9],["Resto Portugal",9],["Sevilla",8],["Zamora",8],["Ourense",6],["Alemania",5],["Lugo - C.P.",4],["Irún",4],["Tineo - C.P.",3],["Sahagún",3],["Somport",3],["Finisterra",3],["Resto Asturias",3],["Frómista",3],["Porriño",3],["Resto C. León",3],["Fonsagrada",3],["Cáceres",2],["Valladolid",2],["Ribadeo",2],["Resto Asturias - C.P.",2],["Ponte de Lima",2],["Mondoñedo",2],["Oviedo",2],["Povoa de Varzim",2],["Resto C. León - V.P.",2],["Bilbao",2],["Castrojeriz",2],["Vigo",1],["Bélgica",1],["Com. Valenciana",1],["Sto. Domingo de la Calzada",1],["Republica Checa",1],["Le Puy",1],["Arles",1],["Avilés",1],["Navarra",1],["Gijón",1],["Fonsagrada - C.P.",1],["Resto Cantabria",1],["Triacastela",1],["Polonia",1],["Benavente",1],["Huelva",1],["Samos",1],["Jaca",1],["Madrid",1],["A Rúa",1],["Cataluña",1],["Muxia",1],["Barcelona",1]],"startingRegions":[["Lugo",274],["León",181],["France",81],["Portugal",70],["Asturias",61],["Navarra",52],["Pontevedra",36],["A Coruña",27],["Burgos",24],["Barcelona",15],["Zamora",9],["Sevilla",8],["Ourense",7],["Germany",5],["Gipuzkoa",4],["Palencia",3],["Valladolid",2],["Vizcaya",2],["Cáceres",2],["Belgium",1],["Cantabria",1],["Madrid",1],["La Rioja",1],["Czech Republic",1],["Poland",1],["Huelva",1],["Huesca",1],["Valencia",1]],"caminos":[["Frances-Camino de",627],["Portugues-Camino",106],["Primitivo-Camino",59],["Via de la Plata",31],["Ingles-Camino",23],["Norte-Camino de",21],["Muxia-Finisterre",4],["Otros caminos",1]]},"2":{"year":"2012","month":"2","pilgrims":1305,"gender":[["Hombre",821],["Mujer",484]],"transport":[["Pie",1221],["Bicicleta",78],["Caballo",6]],"age":[["30 - 60",653],["< 30",584],["> 60",68]],"motivation":[["Religioso y otros",760],["Religioso",488],["No religioso",57]],"spanishFrom":[["Madrid",118],["Castilla León",88],["Andalucía",84],["Galicia",70],["Cataluña",56],["Comunidad Valenciana",43],["Canarias",30],["Aragón",20],["Castilla la Mancha",18],["Baleares",15],["Extremadura",13],["Pais Vasco",11],["Murcia",9],["Navarra",3],["Asturias",3],["La Rioja",3],["Ceuta",2],["Otra",1]],"byCountry":[["España",587],["Portugal",322],["Alemania",62],["Corea",55],["Reino Unido",34],["Brasil",26],["Italia",23],["Estados Unidos",19],["Francia",19],["Japón",15],["México",13],["Belgica",12],["Holanda",10],["Chile",10],["Austria",9],["Argentina",9],["Irlanda",8],["Ecuador",8],["Suiza",7],["Polonia",7],["Canadá",4],["Nueva Zelanda",4],["Colombia",4],["Eslovaquia",3],["Rumania",3],["Bolivia",3],["Dinamarca",3],["Sudáfrica",2],["Grecia",2],["Venezuela",2],["Rusia",2],["Hungría",2],["República Checa",2],["Australia",2],["Perú",1],["Noruega",1],["Estonia",1],["Cuba",1],["Lituania",1],["Finlandia",1],["Honduras",1],["Croacia",1],["Malasia",1],["Taiwán",1],["Suecia",1],["China",1]],"professions":[["Estudiantes",465],["Empleados",219],["Tecnicos",145],["Liberales",109],["Profesores",97],["Obreros",73],["Parados",55],["Jubilados",54],["Funcionarios",34],["Directivos",11],["Amas de Casa",11],["Artistas",9],["Sacerdotes",8],["Agricultores",7],["Marinos",4],["Religiosas",3],["Deportistas",1]],"startingCities":[["Sarria",323],["Cebreiro",200],["S. Jean P. Port",97],["Tui",80],["Valença do Minho",70],["Oporto",67],["Roncesvalles",55],["León",42],["Ponferrada",32],["Oviedo - C.P.",30],["Astorga",24],["Ferrol",21],["Samos",20],["Resto Portugal",19],["Pamplona",19],["Burgos",17],["Sevilla",16],["Irún",14],["Vilafranca",13],["Ourense",10],["Lugo - C.P.",8],["Logroño",8],["Triacastela",7],["Francia",7],["Puebla de Sanabria",6],["Madrid - C.F.",6],["Fonsagrada - C.P.",6],["Braga",5],["Resto Asturias",5],["Somport",5],["Zamora",5],["Ponte de Lima",4],["Lisboa",4],["Resto C. León",4],["Jaca",3],["Granja de Moreruela",2],["Chaves-Portugal",2],["Verín",2],["Oviedo",2],["Suiza",2],["París",2],["Sto. Domingo de la Calzada",2],["Vega de Valcarce",2],["Carrión de los Condes",2],["Vegadeo",2],["Allariz",2],["Polonia",2],["Vigo",2],["Malaga",2],["Neda",2],["Vilalba",2],["Frómista",2],["Resto País Vasco",1],["Le Puy",1],["San Sebastián",1],["Puente la Reina",1],["Sahagún",1],["Resto C. León - V.P.",1],["Granada",1],["Roma",1],["Murcia",1],["Com. Valenciana",1],["Gijón",1],["Ponferrada. C.Inv.",1],["Resto de Extremadura",1],["Resto Cantabria",1],["Resto Asturias - C.P.",1],["Baamonde",1],["Francia",1],["Montserrat",1],["Bilbao",1]],"startingRegions":[["Lugo",567],["Portugal",169],["León",120],["France",113],["Pontevedra",82],["Navarra",75],["Asturias",41],["A Coruña",23],["Burgos",17],["Sevilla",16],["Gipuzkoa",16],["Ourense",14],["Zamora",13],["La Rioja",10],["Madrid",6],["Palencia",4],["Huesca",3],["Switzerland",2],["Poland",2],["Málaga",2],["Porgugal",2],["Valencia",1],["Vizcaya",1],["Italy",1],["Murcia",1],["Badajoz",1],["Cantabria",1],["Barcelona",1],["Granada",1]],"caminos":[["Frances-Camino de",901],["Portugues-Camino",251],["Via de la Plata",50],["Primitivo-Camino",45],["Norte-Camino de",32],["Ingles-Camino",23],["Otros caminos",3]]},"3":{"year":"2012","month":"3","pilgrims":3260,"gender":[["Hombre",2006],["Mujer",1254]],"transport":[["Pie",2932],["Bicicleta",324],["Caballo",4]],"age":[["30 - 60",1614],["< 30",1336],["> 60",310]],"motivation":[["Religioso y otros",1703],["Religioso",1385],["No religioso",172]],"spanishFrom":[["Madrid",322],["Andalucía",318],["Galicia",210],["Cataluña",158],["Comunidad Valenciana",157],["Castilla León",150],["Castilla la Mancha",117],["Canarias",67],["Pais Vasco",50],["Baleares",38],["Extremadura",31],["Murcia",27],["Asturias",27],["Aragón",26],["Navarra",19],["Cantabria",7],["La Rioja",6],["Melilla",1],["Otra",1]],"byCountry":[["España",1732],["Alemania",327],["Portugal",229],["Estados Unidos",112],["Italia",111],["Irlanda",93],["Francia",90],["Reino Unido",58],["Corea",49],["Japón",42],["Canadá",39],["Australia",37],["Brasil",35],["Holanda",31],["Polonia",24],["México",23],["Belgica",23],["Austria",22],["Suiza",18],["Dinamarca",15],["Noruega",13],["Suecia",12],["Finlandia",12],["Argentina",11],["Hungría",10],["Chile",8],["Uruguay",8],["Rusia",8],["Venezuela",7],["Sudáfrica",6],["Colombia",5],["Israel",4],["Lituania",3],["República Checa",3],["Andorra",3],["China",3],["Letonia",3],["Nueva Zelanda",3],["Ucrania",3],["Eslovaquia",2],["Taiwán",2],["Rumania",2],["India",2],["Nigeria",1],["Bosnia",1],["Luxemburgo",1],["Estonia",1],["Croacia",1],["Bulgaria",1],["Islas Feroe",1],["Chipre",1],["Turquía",1],["Paraguay",1],["Rep. Dominicana",1],["Perú",1],["Malasia",1],["Serbia",1],["Ecuador",1],["Nepal",1],["Grecia",1]],"professions":[["Estudiantes",959],["Empleados",692],["Tecnicos",340],["Liberales",320],["Jubilados",254],["Obreros",171],["Funcionarios",137],["Profesores",117],["Parados",117],["Amas de Casa",57],["Artistas",24],["Directivos",23],["Agricultores",18],["Sacerdotes",15],["Marinos",8],["Deportistas",4],["Religiosas",3],["Oikoten",1]],"startingCities":[["Sarria",978],["S. Jean P. Port",223],["Oporto",172],["Tui",163],["León",147],["Cebreiro",132],["Ponferrada",128],["Valença do Minho",120],["Roncesvalles",113],["Pamplona",67],["Sevilla",64],["Oviedo - C.P.",63],["Astorga",62],["Samos",61],["Burgos",55],["Ferrol",51],["Vilafranca",42],["Ourense",40],["Resto Portugal",39],["Lugo - C.P.",37],["Le Puy",29],["Ponte de Lima",28],["Irún",28],["Porriño",28],["Lisboa",25],["Resto C. León",21],["Francia",20],["Logroño",15],["Avilés",11],["Santander",10],["Gijón",10],["Resto Asturias",10],["Mérida",10],["Alemania",9],["Oviedo",9],["Braga",9],["Resto Andalucia",9],["Bilbao",9],["Resto de Extremadura",8],["Zamora",8],["Sahagún",8],["Salamanca",8],["Cadavo",8],["San Sebastián",7],["Ribadeo",6],["Estella",6],["Madrid - C.F.",6],["Grandas de Salime",6],["Vigo",5],["Vezelay",5],["Resto Asturias - C.P.",5],["Triacastela",5],["Bélgica",5],["Rabanal del Camino",5],["Suiza",4],["Granja de Moreruela",4],["Jaca",4],["Vega de Valcarce",4],["Cataluña",4],["La Bañeza",4],["Somport",4],["Hendaya",4],["Montserrat",4],["Lourdes",3],["Resto Europa",3],["Laza",3],["Carrión de los Condes",3],["A Guarda",3],["Canfranc",3],["Hospital de Orbigo",3],["Resto C. León - V.P.",3],["Gudiña",3],["Malaga",3],["Resto Cantabria",3],["Sto. Domingo de la Calzada",3],["Fonsagrada",2],["Baiona",2],["Barcelona",2],["Frómista",2],["Abadin",2],["Ponferrada. C.Inv.",2],["Chaves-Portugal",2],["Povoa de Varzim",2],["Puente la Reina",1],["Huelva",1],["Madrid",1],["Benavente",1],["Reino Unido",1],["La Rioja",1],["Granada",1],["R.Pais Vasco",1],["Fonsagrada - C.P.",1],["Com. Valenciana",1],["Castilla La Mancha",1],["San Sebastian",1],["Molinaseca",1],["Castilla la Mancha",1],["Grandas de Salime - C.P.",1],["Cáceres",1],["Nájera",1],["Puebla de Sanabria",1],["La Mesa",1],["Francia",1],["Finisterra",1],["Arles",1],["Valcarlos",1],["Valencia",1]],"startingRegions":[["Lugo",1232],["León",430],["Portugal",395],["France",290],["Pontevedra",201],["Navarra",188],["Asturias",116],["Sevilla",73],["Burgos",55],["A Coruña",52],["Ourense",46],["Gipuzkoa",37],["La Rioja",20],["Badajoz",18],["Zamora",14],["Cantabria",13],["Barcelona",10],["Germany",9],["Vizcaya",9],["Salamanca",8],["Madrid",7],["Huesca",7],["Belgium",5],["Palencia",5],["Switzerland",4],["Europe Other",3],["Málaga",3],["Porgugal",2],["Valencia",2],["Albacete",2],["Huelva",1],["UK",1],["Granada",1],["Cáceres",1]],"caminos":[["Frances-Camino de",2196],["Portugues-Camino",596],["Via de la Plata",176],["Norte-Camino de",119],["Primitivo-Camino",116],["Ingles-Camino",51],["Otros caminos",5],["Muxia-Finisterre",1]]},"4":{"year":"2012","month":"4","pilgrims":14751,"gender":[["Hombre",8262],["Mujer",6489]],"transport":[["Pie",12755],["Bicicleta",1953],["Caballo",43]],"age":[["30 - 60",8200],["< 30",4738],["> 60",1813]],"motivation":[["Religioso y otros",8031],["Religioso",5680],["No religioso",1040]],"spanishFrom":[["Madrid",1372],["Cataluña",963],["Galicia",933],["Comunidad Valenciana",775],["Andalucía",754],["Castilla León",657],["Castilla la Mancha",347],["Pais Vasco",315],["Extremadura",177],["Canarias",171],["Murcia",162],["Navarra",151],["Asturias",135],["Baleares",130],["Aragón",110],["Cantabria",101],["La Rioja",38],["Otra",18],["Ceuta",17],["Melilla",6]],"byCountry":[["España",7332],["Portugal",1591],["Alemania",1325],["Francia",593],["Italia",512],["Estados Unidos",385],["Reino Unido",277],["Irlanda",276],["Canadá",173],["Holanda",165],["Corea",153],["Belgica",147],["Brasil",142],["Austria",126],["Dinamarca",123],["Suiza",118],["Finlandia",111],["México",102],["Noruega",100],["Australia",100],["Japón",83],["Polonia",82],["Suecia",81],["Sudáfrica",59],["Venezuela",57],["Colombia",48],["Argentina",42],["República Checa",32],["China",31],["Rusia",30],["Hungría",28],["Eslovaquia",26],["Chile",25],["Rumania",20],["Filipinas",20],["Ecuador",18],["Andorra",15],["Uruguay",14],["Eslovenia",13],["Nueva Zelanda",13],["Perú",11],["Grecia",11],["Estonia",10],["Puerto Rico",8],["Rep. Dominicana",8],["Luxemburgo",7],["Ucrania",7],["Taiwán",6],["Islandia",6],["Bulgaria",6],["Paraguay",5],["Israel",5],["Malta",4],["Costa Rica",4],["Letonia",4],["India",4],["Lituania",4],["Croacia",3],["Islas Feroe",3],["Bolivia",3],["Guatemala",3],["Nicaragua",2],["Panamá",2],["Marruecos",2],["Líbano",2],["Moldavia",2],["Kazajistán",2],["Guinea Ecuatorial",2],["Turquía",2],["Tailandia",2],["Cuba",2],["Egipto",2],["Singapur",2],["El Salvador",2],["Jordania",1],["Kenya",1],["Santo Tomé y Príncipe",1],["Togo",1],["Mozambique",1],["Liechtensein",1],["Tanzania",1],["Honduras",1],["Malasia",1],["Albania",1],["Cabo Verde",1],["Indonesia",1],["Nigeria",1],["Argelia",1],["Macedonia",1]],"professions":[["Empleados",3297],["Estudiantes",2987],["Tecnicos",2099],["Liberales",1430],["Jubilados",1341],["Profesores",1291],["Funcionarios",659],["Obreros",552],["Parados",407],["Amas de Casa",348],["Directivos",111],["Artistas",86],["Sacerdotes",52],["Agricultores",39],["Religiosas",31],["Marinos",12],["Deportistas",8],["Oikoten",1]],"startingCities":[["Sarria",3936],["Oporto",962],["S. Jean P. Port",943],["Cebreiro",793],["León",670],["Tui",602],["Ponferrada",584],["Roncesvalles",583],["Valença do Minho",481],["Resto Portugal",346],["Astorga",342],["Ourense",337],["Ferrol",320],["Burgos",248],["Triacastela",230],["Oviedo - C.P.",224],["Pamplona",224],["Sevilla",220],["Le Puy",207],["Vilafranca",198],["Samos",168],["Lugo - C.P.",153],["Irún",116],["Baamonde",112],["Ponte de Lima",109],["Francia",97],["Lisboa",90],["Resto C. León",73],["Vilalba",59],["Ribadeo",54],["Logroño",52],["Santander",52],["A Guarda",49],["Puebla de Sanabria",49],["Chaves-Portugal",46],["Resto Asturias",44],["Somport",41],["Sahagún",40],["Madrid - C.F.",39],["Zamora",34],["Salamanca",32],["Bilbao",32],["Oviedo",31],["Gijón",30],["Avilés",28],["Gudiña",26],["Braga",25],["Alemania",25],["Muxia",21],["Rabanal del Camino",20],["Jaca",20],["Verín",19],["Sto. Domingo de la Calzada",17],["Laza",17],["Fonsagrada - C.P.",16],["Vega de Valcarce",16],["Resto País Vasco",15],["Resto Andalucia",15],["Navarra",14],["Puente la Reina",14],["Holanda",12],["Povoa de Varzim",12],["Monforte de Lemos",11],["Cáceres",11],["Porriño",10],["Frómista",10],["Estella",10],["San Sebastián",10],["Vezelay",10],["Resto Asturias - C.P.",10],["Xunqueira de Ambia",10],["Suiza",10],["Cadavo",9],["Vigo",9],["Barcelona",9],["Madrid",8],["Valencia",8],["Bélgica",8],["Tineo - C.P.",8],["Carrión de los Condes",8],["Allariz",7],["Arles",7],["Lourdes",7],["Neda",7],["Grandas de Salime - C.P.",7],["Francia",6],["Molinaseca",6],["Finisterra",6],["Baiona",6],["Zaragoza",6],["Hospital de Orbigo",6],["La Rioja",5],["Fonsagrada",5],["Mérida",5],["Nájera",5],["Huelva",5],["Grandas de Salime",5],["Granja de Moreruela",5],["Mondoñedo",5],["Castilla La Mancha",5],["Malaga",5],["Com. Valenciana",5],["Cataluña",5],["R.Pais Vasco",4],["París",4],["Vincios",4],["Resto C. León - V.P.",4],["Castilla la Mancha",3],["Republica Checa",3],["Resto de Extremadura",3],["Ponferrada. C.Inv.",3],["Montserrat",3],["Cast. la Mancha",3],["Austria",3],["Resto Cantabria",3],["Canfranc",3],["Peñaseita",3],["Abadin",2],["Hendaya",2],["Benavente",2],["Murcia",2],["Tineo",2],["La Mesa",2],["La Rioja",1],["Lourenzá",1],["Grado",1],["Salas",1],["Italia",1],["Polonia",1],["Córdoba",1],["San Sebastian",1],["Com. Valenciana",1]],"startingRegions":[["Lugo",5554],["Portugal",2025],["León",1962],["France",1324],["Navarra",845],["Pontevedra",680],["Ourense",416],["Asturias",396],["A Coruña",354],["Burgos",248],["Sevilla",235],["Gipuzkoa",146],["Zamora",90],["La Rioja",80],["Cantabria",55],["Madrid",47],["Porgugal",46],["Vizcaya",32],["Salamanca",32],["Germany",25],["Huesca",23],["Palencia",18],["Barcelona",17],["Valencia",14],["Holland",12],["Cáceres",11],["Albacete",11],["Switzerland",10],["Badajoz",8],["Belgium",8],["Zaragoza",6],["Huelva",5],["Málaga",5],["Czech Republic",3],["Austria",3],["Murcia",2],["Italy",1],["Poland",1],["Córdoba",1]],"caminos":[["Frances-Camino de",9749],["Portugues-Camino",2705],["Via de la Plata",866],["Norte-Camino de",615],["Primitivo-Camino",434],["Ingles-Camino",327],["Otros caminos",28],["Muxia-Finisterre",27]]},"5":{"year":"2012","month":"5","pilgrims":21775,"gender":[["Hombre",12354],["Mujer",9421]],"transport":[["Pie",18597],["Bicicleta",3147],["Caballo",31]],"age":[["30 - 60",13015],["> 60",5812],["< 30",2948]],"motivation":[["Religioso y otros",11401],["Religioso",9375],["No religioso",999]],"spanishFrom":[["Madrid",1471],["Cataluña",1224],["Andalucía",854],["Galicia",773],["Comunidad Valenciana",614],["Castilla León",489],["Pais Vasco",409],["Canarias",234],["Castilla la Mancha",227],["Aragón",181],["Asturias",150],["Extremadura",134],["Baleares",119],["Murcia",89],["Navarra",83],["Cantabria",49],["La Rioja",40],["Otra",31],["Ceuta",10],["Melilla",6]],"byCountry":[["España",7187],["Alemania",2901],["Francia",1383],["Italia",1251],["Portugal",1102],["Estados Unidos",937],["Irlanda",841],["Holanda",644],["Reino Unido",531],["Canadá",460],["Austria",405],["Brasil",402],["Australia",318],["Suecia",306],["Corea",285],["Belgica",280],["Suiza",275],["Dinamarca",266],["Polonia",242],["Noruega",178],["Finlandia",164],["Argentina",138],["República Checa",119],["México",114],["Sudáfrica",111],["Rusia",104],["Japón",98],["Hungría",95],["Eslovenia",85],["Eslovaquia",62],["Venezuela",54],["Nueva Zelanda",50],["Colombia",40],["Chile",25],["Perú",24],["Malta",23],["Bulgaria",22],["Rumania",21],["Puerto Rico",20],["Lituania",18],["Uruguay",18],["Estonia",16],["Israel",15],["China",13],["Luxemburgo",10],["Ucrania",9],["Ecuador",9],["Costa Rica",6],["Islandia",6],["Croacia",6],["Grecia",6],["Rep. Dominicana",6],["Panamá",6],["Andorra",6],["Singapur",6],["Letonia",5],["Cuba",4],["Turquía",4],["Honduras",3],["Malasia",3],["Namibia",3],["Nicaragua",3],["Bosnia",3],["Taiwán",2],["Antigua y Barbuda",2],["Bolivia",2],["Marruecos",2],["Filipinas",2],["Paraguay",2],["El Salvador",2],["Indonesia",1],["Serbia",1],["Angola",1],["Armenia",1],["Tailandia",1],["Congo",1],["Irán",1],["Líbano",1],["India",1],["Guatemala",1],["Vietnam",1],["Nigeria",1],["Groenlandia",1],["Jamaica",1]],"professions":[["Empleados",5520],["Jubilados",4650],["Tecnicos",3209],["Liberales",2569],["Estudiantes",1307],["Funcionarios",1041],["Profesores",858],["Amas de Casa",649],["Obreros",646],["Parados",635],["Directivos",266],["Artistas",174],["Sacerdotes",88],["Agricultores",76],["Religiosas",42],["Deportistas",25],["Marinos",20]],"startingCities":[["Sarria",4057],["S. Jean P. Port",3054],["León",1297],["Oporto",1247],["Roncesvalles",1053],["Cebreiro",912],["Tui",706],["Ponferrada",688],["Pamplona",676],["Le Puy",606],["Sevilla",593],["Astorga",560],["Burgos",539],["Oviedo - C.P.",391],["Resto Portugal",377],["Ferrol",344],["Valença do Minho",312],["Francia",310],["Irún",260],["Vilafranca",226],["Ourense",208],["Lisboa",165],["Triacastela",163],["Holanda",146],["Logroño",129],["Samos",124],["Ponte de Lima",115],["Alemania",108],["Lugo - C.P.",108],["Resto C. León",105],["Bilbao",92],["Salamanca",89],["Santander",87],["Somport",85],["Resto Asturias",76],["Madrid - C.F.",72],["Zamora",67],["Oviedo",61],["Sahagún",49],["Gijón",48],["Ribadeo",45],["Avilés",45],["Resto Andalucia",43],["Jaca",42],["Resto Asturias - C.P.",41],["Suiza",40],["Vega de Valcarce",39],["Bélgica",38],["Frómista",37],["Resto País Vasco",37],["Puebla de Sanabria",35],["Vilalba",33],["Lourdes",33],["Muxia",32],["Arles",32],["Chaves-Portugal",31],["Vezelay",30],["San Sebastián",29],["Carrión de los Condes",28],["Valencia",26],["Francia",24],["Montserrat",23],["Baamonde",22],["Cáceres",22],["Braga",22],["Resto Cantabria",21],["Puente la Reina",21],["Mérida",20],["Sto. Domingo de la Calzada",20],["Resto C. León - V.P.",19],["Vigo",18],["Fonfría",18],["Madrid",18],["Hospital de Orbigo",18],["Porriño",17],["Hendaya",17],["Huelva",16],["Fonsagrada - C.P.",15],["Cataluña",15],["Granada",15],["Finisterra",15],["Vegadeo",15],["Italia",13],["Com. Valenciana",13],["Granja de Moreruela",13],["Grandas de Salime",12],["Com. Valenciana",12],["Gudiña",11],["Austria",11],["Badajoz",11],["Resto de Extremadura",11],["Malaga",11],["Castilla la Mancha",10],["Fonsagrada",10],["Estella",9],["Abadin",9],["Córdoba",9],["Baiona",9],["Grandas de Salime - C.P.",8],["París",8],["Rabanal del Camino",7],["Navarra",7],["Zaragoza",6],["Povoa de Varzim",6],["Castilla La Mancha",6],["Molinaseca",6],["Barcelona",6],["Monforte de Lemos",5],["Laza",5],["San Juan de Ortega",5],["Castrojeriz",5],["Tineo",5],["Roma",5],["Canfranc",5],["Lourenzá",5],["Neda",5],["Nájera",5],["Tineo - C.P.",5],["Irlanda",4],["Resto Europa",4],["R.Pais Vasco",4],["A Guarda",4],["Mondoñedo",3],["Cast. la Mancha",3],["Murcia",2],["Reino Unido",2],["Verín",2],["Cadavo",2],["Republica Checa",2],["San Sebastian",2],["Ponferrada. C.Inv.",2],["Cataluña",2],["Salas",2],["Benavente",2],["Valcarlos",2],["Irlanda C. Ing",1],["Coimbra",1],["Valladolid",1],["La Mesa",1],["La Rioja",1],["Las Médulas",1],["Pontedeume",1],["Rates, S. Pedro",1],["La Rioja",1],["Guitiriz",1]],"startingRegions":[["Lugo",5532],["France",4199],["León",3017],["Portugal",2246],["Navarra",1768],["Pontevedra",754],["Asturias",710],["Sevilla",636],["Burgos",549],["A Coruña",397],["Gipuzkoa",332],["Ourense",226],["La Rioja",156],["Holland",146],["Zamora",117],["Germany",108],["Cantabria",108],["Vizcaya",92],["Madrid",90],["Salamanca",89],["Palencia",65],["Valencia",51],["Huesca",47],["Barcelona",46],["Badajoz",42],["Switzerland",40],["Belgium",38],["Porgugal",31],["Cáceres",22],["Albacete",19],["Italy",18],["Huelva",16],["Granada",15],["Málaga",11],["Austria",11],["Córdoba",9],["Zaragoza",6],["Ireland",5],["Europe Other",4],["Murcia",2],["UK",2],["Czech Republic",2],["Valladolid",1]],"caminos":[["Frances-Camino de",15508],["Portugues-Camino",3000],["Via de la Plata",1258],["Norte-Camino de",977],["Primitivo-Camino",573],["Ingles-Camino",351],["Otros caminos",61],["Muxia-Finisterre",47]]},"6":{"year":"2012","month":"6","pilgrims":25518,"gender":[["Hombre",14948],["Mujer",10570]],"transport":[["Pie",20854],["Bicicleta",4631],["Caballo",32],["Silla de ruedas",1]],"age":[["30 - 60",15005],["> 60",5871],["< 30",4642]],"motivation":[["Religioso y otros",12590],["Religioso",11623],["No religioso",1305]],"spanishFrom":[["Madrid",1948],["Cataluña",1512],["Andalucía",1482],["Comunidad Valenciana",1021],["Castilla León",955],["Galicia",655],["Pais Vasco",595],["Castilla la Mancha",490],["Asturias",384],["Canarias",305],["Extremadura",292],["Aragón",260],["Murcia",205],["Navarra",118],["Cantabria",105],["Baleares",104],["La Rioja",52],["Otra",42],["Ceuta",19],["Melilla",7]],"byCountry":[["España",10551],["Alemania",2741],["Italia",1658],["Portugal",1445],["Francia",1398],["Estados Unidos",1235],["Holanda",640],["Reino Unido",603],["Irlanda",531],["Canadá",460],["Brasil",411],["Corea",344],["Austria",341],["Australia",292],["Belgica",272],["Suiza",217],["Polonia",212],["Dinamarca",202],["Japón",178],["Suecia",175],["México",150],["Noruega",139],["Sudáfrica",134],["Hungría",129],["Argentina",121],["Finlandia",121],["República Checa",103],["Nueva Zelanda",66],["Eslovenia",57],["Venezuela",49],["Colombia",45],["Rusia",42],["Rumania",37],["Eslovaquia",37],["Ecuador",27],["Lituania",25],["Bulgaria",24],["Puerto Rico",24],["Uruguay",22],["Croacia",19],["China",19],["Israel",17],["Chile",16],["Andorra",14],["Perú",13],["Malasia",13],["Estonia",12],["Costa Rica",11],["Grecia",10],["Letonia",9],["India",9],["Filipinas",9],["Singapur",8],["Luxemburgo",8],["Cuba",7],["Bolivia",7],["Guatemala",6],["Ucrania",5],["Taiwán",5],["Islandia",5],["Serbia",4],["El Salvador",3],["Paraguay",3],["Líbano",2],["Mozambique",2],["Bielorrusia",2],["Tailandia",2],["Groenlandia",2],["Irán",2],["Nigeria",1],["Benin",1],["Rep. Dominicana",1],["Egipto",1],["Panamá",1],["Arabia Saudita",1],["Malta",1],["Honduras",1],["Senegal",1],["Vietnam",1],["Turquía",1],["Libia",1],["Bosnia",1],["Indonesia",1],["Marruecos",1],["Liechtensein",1]],"professions":[["Empleados",6262],["Jubilados",4843],["Tecnicos",3335],["Liberales",2711],["Estudiantes",2647],["Funcionarios",1559],["Profesores",1117],["Obreros",842],["Amas de Casa",705],["Parados",704],["Directivos",279],["Artistas",187],["Sacerdotes",106],["Agricultores",76],["Religiosas",67],["Marinos",43],["Deportistas",30],["Oikoten",5]],"startingCities":[["Sarria",4362],["S. Jean P. Port",3870],["León",1528],["Roncesvalles",1393],["Oporto",1065],["Cebreiro",1008],["Tui",975],["Ponferrada",869],["Pamplona",735],["Astorga",633],["Le Puy",630],["Burgos",588],["Resto Portugal",578],["Irún",440],["Oviedo - C.P.",436],["Sevilla",431],["Francia",423],["Ferrol",317],["Valença do Minho",287],["Ourense",281],["Vilafranca",280],["Holanda",249],["Resto C. León",208],["Resto Asturias",154],["Santander",151],["Bilbao",149],["Lugo - C.P.",133],["Lisboa",131],["Logroño",131],["Triacastela",131],["Somport",122],["Alemania",120],["Samos",115],["Ponte de Lima",99],["Salamanca",97],["Bélgica",95],["Zamora",91],["Oviedo",89],["Ribadeo",83],["Gijón",82],["Chaves-Portugal",78],["Madrid - C.F.",67],["Avilés",59],["Braga",58],["Suiza",57],["Puebla de Sanabria",56],["Resto País Vasco",54],["Resto Asturias - C.P.",52],["Lourdes",52],["Vilalba",52],["Jaca",51],["Resto Cantabria",49],["Sahagún",46],["Mondoñedo",43],["A Guarda",41],["Vezelay",37],["Cataluña",37],["Muxia",36],["Arles",36],["Vega de Valcarce",31],["Puente la Reina",31],["Frómista",30],["Hospital de Orbigo",30],["Sto. Domingo de la Calzada",30],["San Sebastián",30],["Fonsagrada - C.P.",27],["Mérida",24],["Barcelona",24],["Granja de Moreruela",23],["Montserrat",23],["Zaragoza",22],["Hendaya",22],["Francia",21],["Madrid",21],["Gudiña",21],["Resto C. León - V.P.",20],["Verín",20],["Fonsagrada",18],["Resto Andalucia",17],["Com. Valenciana",17],["Barcelos",16],["Ponferrada. C.Inv.",15],["Baamonde",15],["Carrión de los Condes",15],["Rabanal del Camino",15],["Valencia",15],["Canfranc",14],["París",14],["Cáceres",14],["Resto de Extremadura",13],["Italia",13],["Navarra",12],["Fatima",12],["Laza",11],["Austria",11],["R.Pais Vasco",11],["Porriño",11],["Quiroga",11],["Valladolid",11],["Estella",10],["Cadavo",10],["Rates, S. Pedro",9],["Castilla La Mancha",9],["Córdoba",8],["Finisterra",8],["Grandas de Salime",8],["Castilla la Mancha",8],["Cast. la Mancha",8],["Tineo - C.P.",8],["Tineo",8],["Coimbra",8],["Granada",7],["Benavente",7],["Abadin",6],["Grandas de Salime - C.P.",6],["Xunqueira de Ambia",6],["Lourenzá",6],["Faro",6],["Povoa de Varzim",6],["Molinaseca",5],["Castrojeriz",5],["Cataluña",5],["Vigo",5],["La Rioja",5],["Nájera",4],["San Sebastian",4],["Murcia",4],["Esposende",4],["Polonia",4],["Baiona",3],["Com. Valenciana",3],["Viana do Castelo",3],["Roma",3],["Resto Europa",3],["Allariz",3],["Badajoz",2],["Guimaraes",2],["La Bañeza",2],["El Escamplero",2],["Grado",2],["Reino Unido",2],["San Juan de Ortega",2],["Finlandia",2],["Dinamarca",2],["Fonfría",1],["Andorra",1],["Malaga",1],["Irlanda",1],["Resto Galicia",1],["Huelva",1],["Vilabade",1],["O Barco de Valdeorras",1],["La Mesa",1],["Valcarlos",1],["Jerusalem",1],["Inglaterra",1],["Rábade",1],["Salas",1]],"startingRegions":[["Lugo",6022],["France",5227],["León",3682],["Portugal",2280],["Navarra",2182],["Pontevedra",1035],["Asturias",908],["Burgos",595],["Gipuzkoa",539],["Sevilla",448],["A Coruña",362],["Ourense",347],["Holland",249],["Cantabria",200],["Zamora",177],["La Rioja",170],["Vizcaya",149],["Germany",120],["Salamanca",97],["Belgium",95],["Barcelona",89],["Madrid",88],["Porgugal",78],["Huesca",65],["Switzerland",57],["Palencia",45],["Badajoz",39],["Valencia",35],["Albacete",25],["Zaragoza",22],["Italy",16],["Cáceres",14],["Valladolid",11],["Austria",11],["Córdoba",8],["Granada",7],["Poland",4],["Murcia",4],["Europe Other",3],["UK",3],["Finland",2],["Denmark",2],["Huelva",2],["Málaga",1],["Ireland",1],["Andorra",1],["Israel",1]],"caminos":[["Frances-Camino de",18262],["Portugues-Camino",3319],["Norte-Camino de",1545],["Via de la Plata",1275],["Primitivo-Camino",679],["Ingles-Camino",317],["Otros caminos",77],["Muxia-Finisterre",44]]},"7":{"year":"2012","month":"7","pilgrims":32823,"gender":[["Hombre",17744],["Mujer",15079]],"transport":[["Pie",28694],["Bicicleta",4096],["Caballo",28],["Silla de ruedas",5]],"age":[["30 - 60",16308],["< 30",13951],["> 60",2564]],"motivation":[["Religioso y otros",16965],["Religioso",13666],["No religioso",2192]],"spanishFrom":[["Madrid",3894],["Andalucía",3672],["Comunidad Valenciana",2178],["Cataluña",2002],["Castilla León",1372],["Castilla la Mancha",1045],["Pais Vasco",1029],["Galicia",964],["Extremadura",704],["Aragón",702],["Murcia",673],["Canarias",542],["Asturias",418],["Navarra",344],["Baleares",214],["Cantabria",213],["La Rioja",92],["Otra",61],["Ceuta",32],["Melilla",8]],"byCountry":[["España",20159],["Italia",1777],["Alemania",1512],["Portugal",1278],["Estados Unidos",1255],["Francia",975],["Irlanda",542],["Polonia",508],["Reino Unido",439],["Holanda",389],["Dinamarca",319],["Canadá",303],["Belgica",298],["Corea",294],["Brasil",214],["Australia",176],["República Checa",175],["Suecia",173],["Austria",169],["México",161],["Suiza",148],["Hungría",128],["Sudáfrica",112],["Eslovaquia",111],["Noruega",109],["Japón",98],["Argentina",92],["Colombia",69],["Finlandia",67],["Eslovenia",60],["Rusia",58],["Nueva Zelanda",52],["Lituania",47],["Venezuela",44],["China",41],["Rumania",41],["Bulgaria",31],["Ecuador",27],["Estonia",23],["Puerto Rico",23],["Andorra",23],["Perú",21],["Chile",20],["Uruguay",19],["Ucrania",16],["Croacia",13],["Israel",12],["Paraguay",12],["Filipinas",11],["Cuba",10],["Rep. Dominicana",10],["Costa Rica",9],["Grecia",9],["Marruecos",8],["Taiwán",7],["India",7],["Letonia",7],["Luxemburgo",6],["Panamá",6],["Nicaragua",6],["Líbano",6],["Argelia",6],["Angola",5],["Islandia",5],["Serbia",4],["Irán",4],["Honduras",3],["Kenya",3],["Singapur",3],["Vietnam",3],["Turquía",3],["Moldavia",3],["Guatemala",3],["El Salvador",3],["Macedonia",3],["Ghana",2],["Malta",2],["Tailandia",2],["Mali",2],["Bolivia",2],["Túnez",2],["Zimbabwe",2],["Egipto",2],["Pakistán",2],["Costa de Marfil",1],["Guinea Ecuatorial",1],["Bielorrusia",1],["Namibia",1],["Mauritania",1],["Bahamas",1],["Bosnia",1],["España",1],["Malasia",1],["Nigeria",1],["Guyana",1],["Bermudas",1],["Camerún",1],["Indonesia",1],["Siria",1],["Georgia",1],["Chipre",1],["Congo",1],["Chad",1]],"professions":[["Estudiantes",10827],["Empleados",5482],["Profesores",4179],["Tecnicos",3293],["Liberales",2507],["Jubilados",1974],["Funcionarios",1268],["Obreros",924],["Parados",711],["Amas de Casa",638],["Sacerdotes",319],["Directivos",220],["Artistas",210],["Religiosas",108],["Agricultores",92],["Deportistas",33],["Marinos",32],["Oikoten",6]],"startingCities":[["Sarria",7160],["S. Jean P. Port",2818],["Cebreiro",2075],["Tui",1672],["Astorga",1523],["León",1522],["Ponferrada",1390],["Roncesvalles",1177],["Oporto",868],["Oviedo - C.P.",645],["Burgos",612],["Vilafranca",605],["Irún",542],["Resto Portugal",534],["Ferrol",532],["Valença do Minho",531],["Triacastela",482],["Pamplona",472],["Ourense",448],["Le Puy",398],["Ribadeo",362],["Vilalba",335],["Lugo - C.P.",316],["Francia",291],["Resto Asturias",282],["Resto C. León",252],["Samos",221],["Sevilla",212],["Santander",204],["Mondoñedo",182],["Oviedo",162],["Lisboa",152],["Gijón",152],["Logroño",142],["Bilbao",135],["Holanda",123],["Neda",121],["Vega de Valcarce",120],["Somport",116],["Ponte de Lima",106],["Avilés",105],["Rates, S. Pedro",87],["Gudiña",84],["Resto País Vasco",84],["Muxia",83],["Bélgica",83],["Salamanca",77],["Lourenzá",75],["Allariz",74],["Sahagún",71],["Alemania",67],["Frómista",67],["Laza",65],["Madrid - C.F.",63],["Xunqueira de Ambia",62],["San Sebastián",62],["Puebla de Sanabria",62],["Resto Asturias - C.P.",60],["Viana do Castelo",60],["Zamora",47],["Porriño",46],["Chaves-Portugal",45],["Carrión de los Condes",44],["Resto Cantabria",43],["Jaca",42],["Braga",42],["Suiza",42],["Lourdes",41],["Barcelos",36],["Vezelay",35],["Valencia",35],["Fonsagrada - C.P.",35],["Granja de Moreruela",34],["Fonsagrada",33],["A Guarda",33],["Rabanal del Camino",32],["Guimaraes",31],["Resto C. León - V.P.",27],["Cadavo",25],["Puente la Reina",25],["Austria",24],["Las Médulas",23],["Sto. Domingo de la Calzada",23],["Arles",23],["Baamonde",23],["Navarra",21],["Verín",21],["Cataluña",20],["Francia",19],["Abadin",18],["Mérida",18],["Grandas de Salime - C.P.",17],["Zaragoza",17],["R.Pais Vasco",17],["Hendaya",16],["Resto Andalucia",14],["Italia",14],["Hospital de Orbigo",14],["Granada",12],["Finisterra",12],["Povoa de Varzim",12],["Fatima",12],["Madrid",12],["Tineo - C.P.",12],["Cast. la Mancha",11],["Tineo",11],["Resto de Extremadura",11],["Cáceres",11],["Montserrat",11],["Grandas de Salime",10],["Barcelona",10],["Vigo",10],["París",9],["Benavente",9],["Estella",9],["Castilla la Mancha",9],["Roma",8],["Coimbra",8],["Badajoz",7],["La Rioja",7],["Huelva",7],["Nájera",6],["Ponferrada. C.Inv.",6],["Molinaseca",6],["Reino Unido",6],["Com. Valenciana",6],["Canfranc",5],["Castilla La Mancha",5],["Com. Valenciana",5],["Valladolid",5],["Murcia",4],["Castrojeriz",4],["Polonia",4],["San Sebastian",3],["Córdoba",3],["Grado",3],["Republica Checa",3],["Resto Galicia",2],["Resto Europa",2],["Dinamarca",2],["Faro",2],["Salas",2],["Jerusalem",1],["Ortigueira",1],["Malaga",1],["Reino Unido C.Ing",1],["Hungría",1],["Quiroga",1],["Fonfría",1],["Cataluña",1],["Luxemburgo",1],["La Rioja",1],["mirallos",1]],"startingRegions":[["Lugo",11345],["León",5591],["France",3766],["Portugal",2481],["Pontevedra",1761],["Navarra",1704],["Asturias",1461],["Ourense",754],["A Coruña",751],["Gipuzkoa",708],["Burgos",616],["Cantabria",247],["Sevilla",226],["La Rioja",179],["Zamora",152],["Vizcaya",135],["Holland",123],["Palencia",111],["Belgium",83],["Salamanca",77],["Madrid",75],["Germany",67],["Huesca",47],["Valencia",46],["Porgugal",45],["Switzerland",42],["Barcelona",42],["Badajoz",36],["Albacete",25],["Austria",24],["Italy",22],["Zaragoza",17],["Granada",12],["Cáceres",11],["Huelva",7],["UK",7],["Valladolid",5],["Murcia",4],["Poland",4],["Córdoba",3],["Czech Republic",3],["Europe Other",2],["Denmark",2],["Israel",1],["Málaga",1],["Hungary",1],["Luxembourg",1]],"caminos":[["Frances-Camino de",22397],["Portugues-Camino",4242],["Norte-Camino de",2859],["Via de la Plata",1373],["Primitivo-Camino",1115],["Ingles-Camino",655],["Muxia-Finisterre",95],["Otros caminos",87]]},"8":{"year":"2012","month":"8","pilgrims":41096,"gender":[["Hombre",23176],["Mujer",17920]],"transport":[["Pie",34557],["Bicicleta",6480],["Caballo",56],["Silla de ruedas",3]],"age":[["30 - 60",24066],["< 30",14972],["> 60",2058]],"motivation":[["Religioso y otros",21288],["Religioso",16563],["No religioso",3245]],"spanishFrom":[["Madrid",4437],["Andalucía",4068],["Cataluña",3936],["Comunidad Valenciana",3706],["Castilla León",1499],["Pais Vasco",1498],["Castilla la Mancha",1426],["Galicia",1411],["Murcia",693],["Extremadura",643],["Aragón",480],["Canarias",393],["Asturias",365],["Navarra",332],["Baleares",211],["Cantabria",208],["La Rioja",145],["Otra",60],["Ceuta",40],["Melilla",20]],"byCountry":[["España",25571],["Italia",4688],["Portugal",1833],["Alemania",1736],["Francia",1042],["Estados Unidos",562],["Polonia",562],["Irlanda",464],["Reino Unido",423],["Holanda",387],["Corea",376],["Belgica",300],["Eslovaquia",255],["Hungría",226],["Austria",218],["Canadá",216],["República Checa",173],["Dinamarca",171],["Brasil",158],["Australia",132],["Argentina",118],["Suiza",115],["México",114],["Rusia",103],["Colombia",92],["Japón",85],["Suecia",80],["Eslovenia",68],["Noruega",64],["Rumania",62],["Bulgaria",57],["Venezuela",57],["Sudáfrica",54],["Finlandia",42],["Perú",38],["Ecuador",33],["Lituania",32],["Nueva Zelanda",28],["Chile",28],["Bolivia",23],["Uruguay",22],["Estonia",20],["Paraguay",16],["Luxemburgo",16],["Ucrania",16],["Rep. Dominicana",14],["Filipinas",13],["Croacia",11],["Letonia",11],["China",11],["Israel",10],["Líbano",10],["Grecia",10],["Andorra",9],["Turquía",8],["Taiwán",8],["Malta",8],["Singapur",6],["Cuba",6],["Puerto Rico",6],["Guatemala",6],["Nicaragua",6],["El Salvador",5],["India",4],["Serbia",4],["Marruecos",4],["Guinea Ecuatorial",4],["Bielorrusia",3],["Albania",3],["Indonesia",3],["Malasia",3],["Costa Rica",3],["Mozambique",2],["Georgia",2],["Panamá",2],["Siria",2],["Angola",2],["Irak",2],["Honduras",2],["Macedonia",2],["Eritrea",1],["Libia",1],["Bosnia",1],["Burkina Faso",1],["Vietnam",1],["Congo",1],["Sri Lanka",1],["Liechtensein",1],["Arabia Saudita",1],["Haití",1],["Egipto",1],["Islandia",1],["Islas Feroe",1],["Namibia",1],["Trinidad y Tobago",1]],"professions":[["Empleados",9398],["Estudiantes",9395],["Tecnicos",5282],["Liberales",4813],["Profesores",4501],["Obreros",1962],["Funcionarios",1447],["Jubilados",1412],["Parados",925],["Amas de Casa",735],["Artistas",322],["Sacerdotes",310],["Directivos",288],["Religiosas",118],["Agricultores",110],["Marinos",45],["Deportistas",30],["Oikoten",3]],"startingCities":[["Sarria",9474],["S. Jean P. Port",3473],["Cebreiro",2367],["León",2229],["Tui",2181],["Ponferrada",2011],["Roncesvalles",1815],["Oporto",1067],["Ferrol",1058],["Astorga",1048],["Oviedo - C.P.",1025],["Irún",819],["Burgos",708],["Vilafranca",688],["Pamplona",671],["Valença do Minho",651],["Triacastela",574],["Ourense",541],["Lugo - C.P.",429],["Ribadeo",389],["Resto Asturias",375],["Santander",355],["Le Puy",349],["Resto C. León",341],["Resto Portugal",329],["Francia",270],["Vilalba",245],["Bilbao",242],["Sevilla",239],["Ponte de Lima",239],["Gijón",234],["Samos",228],["Oviedo",225],["Logroño",219],["Avilés",182],["Lisboa",149],["Resto País Vasco",141],["Holanda",122],["Mondoñedo",121],["Resto Asturias - C.P.",103],["Resto Cantabria",100],["Somport",99],["Madrid - C.F.",99],["San Sebastián",90],["Barcelos",87],["Alemania",82],["Salamanca",81],["Braga",79],["Sahagún",78],["Rates, S. Pedro",77],["Zamora",73],["Finisterra",70],["Abadin",66],["Lourenzá",65],["Vega de Valcarce",63],["Fatima",59],["Puebla de Sanabria",55],["Jaca",53],["Sto. Domingo de la Calzada",53],["Baamonde",52],["Xunqueira de Ambia",51],["Muxia",50],["Lourdes",48],["Carrión de los Condes",46],["Bélgica",45],["Puente la Reina",44],["Porriño",43],["Frómista",41],["Rabanal del Camino",39],["Neda",37],["Gudiña",37],["Hendaya",37],["Montserrat",36],["Resto C. León - V.P.",36],["Chaves-Portugal",36],["A Guarda",36],["Fonsagrada - C.P.",35],["Fonsagrada",33],["R.Pais Vasco",33],["Madrid",32],["Cataluña",30],["Monforte de Lemos",30],["Tineo - C.P.",30],["Mérida",30],["Suiza",28],["Estella",27],["Granja de Moreruela",26],["Zaragoza",25],["Cadavo",23],["Barcelona",22],["Navarra",22],["Grandas de Salime",21],["Castilla la Mancha",20],["Resto Andalucia",20],["Grandas de Salime - C.P.",19],["Italia",19],["Hospital de Orbigo",19],["Cáceres",19],["Resto de Extremadura",19],["Com. Valenciana",18],["Coimbra",18],["Vezelay",17],["Guimaraes",17],["Guitiriz",16],["Tineo",16],["Austria",15],["Molinaseca",15],["Cast. la Mancha",15],["Verín",15],["Arles",14],["París",13],["Francia",13],["Allariz",13],["Vigo",12],["Laza",12],["Castilla La Mancha",12],["San Sebastian",12],["Valencia",11],["Nájera",11],["Badajoz",11],["La Rioja",10],["Viana do Castelo",9],["Benavente",9],["Canfranc",8],["Granada",8],["Polonia",8],["Vegadeo",5],["Povoa de Varzim",5],["Murcia",5],["Castrojeriz",5],["Cataluña",5],["Com. Valenciana",5],["Baiona",5],["Huelva",4],["Córdoba",4],["Resto Europa",4],["Fonfría",4],["Valladolid",4],["Viseu",4],["Salas",4],["La Rioja",4],["La Bañeza",3],["San Juan de Ortega",3],["Esposende",3],["Aveiro",3],["La Mesa",3],["Ponferrada. C.Inv.",2],["Roma",2],["Rábade",2],["Hungría",2],["Reino Unido",2],["El Escamplero",1],["Vilabade",1],["Republica Checa",1],["Jerusalem",1],["Resto Galicia",1]],"startingRegions":[["Lugo",14152],["León",6572],["France",4333],["Portugal",2793],["Navarra",2579],["Pontevedra",2277],["Asturias",2243],["A Coruña",1216],["Gipuzkoa",1095],["Burgos",716],["Ourense",672],["Cantabria",455],["La Rioja",297],["Sevilla",259],["Vizcaya",242],["Zamora",163],["Madrid",131],["Holland",122],["Barcelona",93],["Palencia",87],["Germany",82],["Salamanca",81],["Huesca",61],["Badajoz",60],["Albacete",47],["Belgium",45],["Porgugal",36],["Valencia",34],["Switzerland",28],["Zaragoza",25],["Italy",21],["Cáceres",19],["Austria",15],["Poland",8],["Granada",8],["Huelva",6],["Murcia",5],["Córdoba",4],["Europe Other",4],["Valladolid",4],["Hungary",2],["UK",2],["Czech Republic",1],["Israel",1]],"caminos":[["Frances-Camino de",27793],["Portugues-Camino",5073],["Norte-Camino de",3860],["Primitivo-Camino",1673],["Via de la Plata",1390],["Ingles-Camino",1095],["Muxia-Finisterre",120],["Otros caminos",92]]},"9":{"year":"2012","month":"9","pilgrims":27322,"gender":[["Hombre",14857],["Mujer",12465]],"transport":[["Pie",23267],["Bicicleta",4023],["Caballo",28],["Silla de ruedas",4]],"age":[["30 - 60",15729],["< 30",6327],["> 60",5266]],"motivation":[["Religioso y otros",14731],["Religioso",10945],["No religioso",1646]],"spanishFrom":[["Madrid",2281],["Andalucía",2012],["Cataluña",1653],["Comunidad Valenciana",1291],["Castilla León",1005],["Galicia",852],["Castilla la Mancha",564],["Pais Vasco",486],["Asturias",413],["Canarias",302],["Extremadura",298],["Murcia",287],["Aragón",220],["Cantabria",163],["Navarra",160],["Baleares",105],["La Rioja",70],["Otra",50],["Melilla",18],["Ceuta",10]],"byCountry":[["España",12240],["Alemania",2698],["Francia",1418],["Italia",1389],["Portugal",1265],["Estados Unidos",1008],["Reino Unido",797],["Irlanda",782],["Canadá",455],["Polonia",430],["Brasil",422],["Holanda",392],["Belgica",363],["Dinamarca",333],["Australia",299],["Austria",265],["Suecia",234],["Corea",216],["Noruega",195],["Suiza",187],["México",176],["Argentina",146],["República Checa",135],["Hungría",129],["Sudáfrica",114],["Finlandia",103],["Venezuela",96],["Japón",84],["Eslovaquia",81],["Rusia",75],["Colombia",73],["Eslovenia",66],["Malta",59],["Nueva Zelanda",56],["Israel",45],["Ecuador",38],["Rumania",35],["Filipinas",35],["Bulgaria",34],["China",32],["Islandia",27],["Perú",25],["Chile",24],["Uruguay",24],["Luxemburgo",23],["Andorra",16],["Puerto Rico",15],["El Salvador",10],["Lituania",10],["Ucrania",9],["Bolivia",8],["Estonia",8],["Emiratos Arabes Unidos",8],["Singapur",8],["Líbano",8],["Panamá",7],["Costa Rica",7],["Letonia",7],["Croacia",7],["India",7],["Taiwán",5],["Honduras",5],["Paraguay",5],["Guatemala",5],["Bielorrusia",4],["Rep. Dominicana",3],["Bosnia",3],["Islas Feroe",3],["Malasia",3],["Armenia",2],["Cuba",2],["Senegal",2],["Trinidad y Tobago",2],["Grecia",2],["Liechtensein",2],["Siria",1],["Turquía",1],["Irán",1],["Albania",1],["Guyana",1],["Argelia",1],["Arabia Saudita",1],["Nigeria",1],["Zimbabwe",1],["Ghana",1],["Angola",1],["Marruecos",1],["Islas Caimán",1],["Tailandia",1],["Jordania",1],["Etiopía",1]],"professions":[["Empleados",6420],["Jubilados",3988],["Tecnicos",3858],["Liberales",3727],["Estudiantes",3591],["Funcionarios",1353],["Profesores",1071],["Obreros",1041],["Amas de Casa",705],["Parados",667],["Directivos",298],["Artistas",182],["Sacerdotes",139],["Agricultores",115],["Marinos",93],["Religiosas",47],["Deportistas",16],["Oikoten",11]],"startingCities":[["Sarria",6074],["S. Jean P. Port",2883],["León",1767],["Cebreiro",1537],["Ponferrada",1214],["Tui",1164],["Roncesvalles",1146],["Oporto",1093],["Astorga",838],["Oviedo - C.P.",676],["Le Puy",642],["Pamplona",618],["Burgos",591],["Irún",542],["Ferrol",398],["Vilafranca",384],["Valença do Minho",368],["Francia",308],["Triacastela",296],["Ourense",244],["Lugo - C.P.",212],["Samos",200],["Resto C. León",200],["Resto Portugal",198],["Sevilla",181],["Bilbao",173],["Santander",167],["Resto Asturias",148],["Logroño",141],["Lisboa",132],["Gijón",112],["Alemania",105],["Ribadeo",102],["Somport",97],["Ponte de Lima",90],["Holanda",90],["Vilalba",87],["Avilés",75],["Sahagún",74],["Madrid - C.F.",70],["Puebla de Sanabria",68],["Oviedo",67],["Bélgica",64],["Salamanca",61],["Rates, S. Pedro",61],["Resto Cantabria",60],["Barcelos",59],["Zamora",57],["Lourdes",49],["Resto País Vasco",49],["Braga",46],["Allariz",44],["Frómista",42],["Suiza",40],["Jaca",35],["San Sebastián",33],["Porriño",32],["Resto Asturias - C.P.",31],["Viana do Castelo",31],["Cataluña",29],["Francia",28],["Baiona",28],["Austria",27],["Baamonde",26],["Fonsagrada - C.P.",25],["Granja de Moreruela",24],["Estella",23],["Madrid",22],["Resto C. León - V.P.",21],["Grandas de Salime - C.P.",21],["Carrión de los Condes",21],["Resto Andalucia",20],["Rabanal del Camino",20],["Hospital de Orbigo",20],["Finisterra",19],["Mérida",19],["Arles",19],["Sto. Domingo de la Calzada",18],["Vega de Valcarce",18],["Navarra",18],["Hendaya",18],["Com. Valenciana",17],["Gudiña",17],["Muxia",17],["Puente la Reina",17],["Chaves-Portugal",16],["Montserrat",16],["Mondoñedo",15],["Grandas de Salime",14],["Vezelay",14],["Zaragoza",14],["Neda",12],["Resto Europa",11],["Fonsagrada",11],["A Guarda",11],["Abadin",11],["Eslovaquia",10],["Resto de Extremadura",10],["Coimbra",10],["Molinaseca",9],["Fatima",9],["Cáceres",9],["Polonia",8],["Monforte de Lemos",8],["Valencia",8],["Canfranc",8],["Verín",8],["Barcelona",8],["Ponferrada. C.Inv.",7],["Vigo",7],["R.Pais Vasco",6],["Lourenzá",6],["Tineo - C.P.",6],["Castilla La Mancha",6],["Castilla la Mancha",6],["Cadavo",6],["Povoa de Varzim",6],["París",6],["Com. Valenciana",5],["Republica Checa",5],["Hungría",4],["Malaga",4],["Benavente",4],["Roma",4],["Laza",4],["Guimaraes",4],["Tineo",4],["Salas",3],["Vegadeo",3],["Castrojeriz",3],["Nájera",3],["Irlanda",3],["Murcia",3],["Grado",3],["Italia",3],["Córdoba",3],["Viseu",2],["Xunqueira de Ambia",2],["Huelva",2],["Cataluña",2],["Esposende",2],["Reino Unido",2],["Luxemburgo",1],["Aveiro",1],["Cast. la Mancha",1],["Egipto",1],["Leyre",1],["Finlandia",1],["San Juan de Ortega",1],["Gándara",1],["San Sebastian",1],["Valladolid",1],["Guitiriz",1],["La Rioja",1],["Granada",1],["La Bañeza",1],["Quiroga",1]],"startingRegions":[["Lugo",8618],["León",4573],["France",4064],["Portugal",2110],["Navarra",1823],["Pontevedra",1243],["Asturias",1163],["Gipuzkoa",631],["Burgos",595],["A Coruña",446],["Ourense",321],["Cantabria",227],["Sevilla",201],["Vizcaya",173],["La Rioja",163],["Zamora",153],["Germany",105],["Madrid",92],["Holland",90],["Belgium",64],["Palencia",63],["Salamanca",61],["Barcelona",55],["Huesca",43],["Switzerland",40],["Valencia",30],["Badajoz",29],["Austria",27],["Porgugal",16],["Zaragoza",14],["Albacete",13],["Europe Other",11],["Slovakia",10],["Cáceres",9],["Poland",8],["Italy",7],["Czech Republic",5],["Málaga",4],["Hungary",4],["Córdoba",3],["Ireland",3],["Murcia",3],["Huelva",2],["UK",2],["Egypt",1],["Finland",1],["Luxembourg",1],["Valladolid",1],["Granada",1]],"caminos":[["Frances-Camino de",19884],["Portugues-Camino",3354],["Norte-Camino de",1753],["Primitivo-Camino",984],["Via de la Plata",849],["Ingles-Camino",410],["Otros caminos",52],["Muxia-Finisterre",36]]},"10":{"year":"2012","month":"10","pilgrims":18092,"gender":[["Hombre",10412],["Mujer",7680]],"transport":[["Pie",15898],["Bicicleta",2140],["Caballo",46],["Silla de ruedas",8]],"age":[["30 - 60",10597],["> 60",4002],["< 30",3493]],"motivation":[["Religioso y otros",9819],["Religioso",7447],["No religioso",826]],"spanishFrom":[["Madrid",1270],["Andalucía",980],["Cataluña",826],["Galicia",788],["Comunidad Valenciana",603],["Castilla León",539],["Pais Vasco",329],["Castilla la Mancha",271],["Canarias",176],["Murcia",157],["Aragón",147],["Baleares",132],["Extremadura",132],["Asturias",129],["Navarra",105],["Cantabria",79],["La Rioja",28],["Otra",25],["Ceuta",17],["Melilla",2]],"byCountry":[["España",6735],["Alemania",1986],["Estados Unidos",1255],["Francia",931],["Portugal",919],["Italia",695],["Canadá",641],["Reino Unido",476],["Australia",416],["Corea",328],["Brasil",325],["Holanda",275],["Irlanda",252],["Dinamarca",222],["Belgica",217],["Suecia",192],["Polonia",170],["Noruega",166],["Suiza",164],["Austria",161],["México",131],["Hungría",122],["Japón",110],["Sudáfrica",105],["Argentina",92],["Nueva Zelanda",91],["Finlandia",84],["República Checa",69],["Colombia",59],["Venezuela",56],["Rusia",53],["Rumania",50],["Eslovaquia",48],["Israel",44],["Filipinas",34],["Bulgaria",32],["Luxemburgo",30],["Estonia",26],["Perú",24],["Puerto Rico",23],["Lituania",23],["Uruguay",21],["China",21],["Ucrania",18],["Eslovenia",18],["Taiwán",17],["Ecuador",16],["Letonia",12],["Singapur",12],["Rep. Dominicana",11],["Cuba",11],["Costa Rica",11],["Chile",9],["El Salvador",8],["Andorra",8],["Islandia",5],["Guatemala",5],["Malasia",5],["Croacia",4],["Líbano",4],["Grecia",4],["Armenia",3],["Bolivia",3],["India",3],["Marruecos",3],["Paraguay",3],["Malta",3],["Irán",2],["Mauritania",2],["Arabia Saudita",2],["Nicaragua",2],["Senegal",1],["Panamá",1],["Angola",1],["Sri Lanka",1],["Vietnam",1],["Santo Tomé y Príncipe",1],["Samoa Occidental",1],["Guinea Ecuatorial",1],["Camerún",1],["Bosnia",1],["Pakistán",1],["Bielorrusia",1],["Zimbabwe",1],["Honduras",1]],"professions":[["Empleados",4285],["Jubilados",3051],["Liberales",2637],["Tecnicos",2384],["Estudiantes",1704],["Funcionarios",911],["Profesores",818],["Obreros",587],["Parados",585],["Amas de Casa",398],["Directivos",239],["Artistas",195],["Sacerdotes",102],["Marinos",70],["Agricultores",66],["Religiosas",45],["Deportistas",13],["Oikoten",2]],"startingCities":[["S. Jean P. Port",3655],["Sarria",3359],["León",908],["Cebreiro",888],["Oporto",887],["Roncesvalles",813],["Tui",614],["Ponferrada",592],["Pamplona",537],["Astorga",486],["Le Puy",430],["Burgos",369],["Oviedo - C.P.",337],["Francia",296],["Irún",288],["Sevilla",220],["Ferrol",211],["Valença do Minho",178],["Vilafranca",154],["Resto Portugal",153],["Samos",133],["Resto C. León",125],["Ourense",111],["Lisboa",101],["Triacastela",101],["Rates, S. Pedro",97],["Santander",95],["Lugo - C.P.",95],["Logroño",87],["Ponte de Lima",80],["Somport",69],["Alemania",61],["Resto Asturias",61],["Bilbao",60],["Salamanca",60],["Zamora",54],["Baamonde",48],["Sahagún",47],["Resto País Vasco",46],["Gijón",43],["Baiona",40],["Madrid - C.F.",38],["Avilés",37],["Holanda",34],["Ribadeo",34],["Oviedo",33],["San Sebastián",33],["Barcelos",32],["Braga",32],["Jaca",31],["Chaves-Portugal",31],["Suiza",29],["Bélgica",27],["Puebla de Sanabria",27],["Lourdes",25],["Vilalba",25],["Frómista",24],["Mérida",22],["Sto. Domingo de la Calzada",21],["Vega de Valcarce",21],["Gudiña",20],["Vezelay",20],["Arles",19],["Francia",18],["Estella",16],["Muxia",14],["Navarra",14],["Canfranc",14],["Cataluña",13],["Austria",13],["Valencia",13],["Rabanal del Camino",12],["Hendaya",12],["Neda",12],["Puente la Reina",12],["Zaragoza",11],["A Guarda",11],["Resto Asturias - C.P.",10],["Fatima",10],["Hospital de Orbigo",10],["Resto C. León - V.P.",10],["Laza",9],["Granja de Moreruela",9],["Vigo",9],["Resto Andalucia",9],["R.Pais Vasco",9],["Madrid",9],["París",8],["Cáceres",8],["Carrión de los Condes",8],["Verín",8],["Fonsagrada - C.P.",7],["Porriño",6],["Fonsagrada",6],["Resto de Extremadura",6],["Barcelona",6],["Reino Unido",6],["Molinaseca",6],["Guimaraes",6],["Resto Cantabria",5],["Cadavo",5],["Com. Valenciana",5],["Tineo - C.P.",5],["Grandas de Salime",5],["Granada",5],["Roma",5],["Lourenzá",5],["Castilla la Mancha",4],["Grandas de Salime - C.P.",4],["Nájera",4],["Montserrat",4],["Huelva",4],["Badajoz",3],["Finlandia",3],["Eslovaquia",3],["Viana do Castelo",3],["Povoa de Varzim",3],["Com. Valenciana",3],["Malaga",3],["Castrojeriz",3],["Ponferrada. C.Inv.",3],["Valladolid",3],["Finisterra",3],["Polonia",3],["Mondoñedo",2],["Republica Checa",2],["Tineo",2],["Italia",2],["Luxemburgo",2],["Resto Galicia",2],["Viseu",2],["Cataluña",2],["Castilla La Mancha",2],["Cast. la Mancha",2],["La Rioja",2],["Dinamarca",1],["San Juan de Ortega",1],["La Mesa",1],["Grado",1],["Irlanda",1],["San Sebastian",1],["Hungría",1],["Benavente",1],["Coimbra",1],["Leyre",1]],"startingRegions":[["Lugo",4708],["France",4552],["León",2374],["Portugal",1585],["Navarra",1393],["Pontevedra",680],["Asturias",539],["Gipuzkoa",377],["Burgos",373],["A Coruña",242],["Sevilla",229],["Ourense",148],["La Rioja",114],["Cantabria",100],["Zamora",91],["Germany",61],["Vizcaya",60],["Salamanca",60],["Madrid",47],["Huesca",45],["Holland",34],["Palencia",32],["Porgugal",31],["Badajoz",31],["Switzerland",29],["Belgium",27],["Barcelona",25],["Valencia",21],["Austria",13],["Zaragoza",11],["Cáceres",8],["Albacete",8],["Italy",7],["UK",6],["Granada",5],["Huelva",4],["Finland",3],["Poland",3],["Málaga",3],["Slovakia",3],["Valladolid",3],["Czech Republic",2],["Luxembourg",2],["Denmark",1],["Ireland",1],["Hungary",1]],"caminos":[["Frances-Camino de",13602],["Portugues-Camino",2265],["Norte-Camino de",859],["Via de la Plata",634],["Primitivo-Camino",465],["Ingles-Camino",223],["Otros caminos",27],["Muxia-Finisterre",17]]},"11":{"year":"2012","month":"11","pilgrims":4173,"gender":[["Hombre",2647],["Mujer",1526]],"transport":[["Pie",3781],["Bicicleta",389],["Caballo",3]],"age":[["30 - 60",2638],["< 30",1051],["> 60",484]],"motivation":[["Religioso y otros",2608],["Religioso",1358],["No religioso",207]],"spanishFrom":[["Galicia",331],["Cataluña",284],["Madrid",263],["Andalucía",257],["Comunidad Valenciana",208],["Castilla León",103],["Baleares",93],["Pais Vasco",66],["Castilla la Mancha",55],["Murcia",42],["Asturias",38],["Canarias",32],["Aragón",29],["Extremadura",21],["Cantabria",13],["Navarra",8],["La Rioja",6],["Otra",4],["Melilla",2]],"byCountry":[["España",1855],["Alemania",243],["Portugal",241],["Estados Unidos",241],["Corea",207],["Francia",198],["Italia",184],["Canadá",118],["Reino Unido",90],["Australia",82],["Brasil",62],["Polonia",56],["Holanda",50],["Suiza",48],["Japón",45],["Austria",43],["Irlanda",43],["Argentina",33],["México",32],["Belgica",30],["Rusia",19],["Dinamarca",19],["Venezuela",18],["Suecia",18],["República Checa",17],["Uruguay",15],["Andorra",13],["Nueva Zelanda",12],["Colombia",11],["Sudáfrica",11],["Finlandia",10],["Eslovaquia",10],["Chile",8],["Hungría",7],["Rumania",7],["Eslovenia",6],["Malta",6],["Israel",6],["Malasia",5],["Grecia",4],["Noruega",4],["China",4],["Ucrania",4],["Perú",3],["Croacia",3],["Lituania",3],["Taiwán",3],["Filipinas",2],["Bolivia",2],["Ecuador",2],["Puerto Rico",2],["Estonia",2],["Paraguay",2],["Bulgaria",2],["Camboya",1],["Irán",1],["Serbia",1],["Bielorrusia",1],["India",1],["Costa Rica",1],["Letonia",1],["Turquía",1],["Rep. Dominicana",1],["Singapur",1],["Timor Oriental",1],["Angola",1]],"professions":[["Empleados",1029],["Liberales",606],["Tecnicos",542],["Estudiantes",432],["Jubilados",375],["Obreros",279],["Parados",241],["Profesores",205],["Funcionarios",200],["Amas de Casa",87],["Directivos",63],["Artistas",49],["Agricultores",19],["Sacerdotes",17],["Marinos",17],["Religiosas",8],["Deportistas",3],["Oikoten",1]],"startingCities":[["S. Jean P. Port",896],["Sarria",597],["Cebreiro",222],["Roncesvalles",202],["Tui",177],["León",168],["Ponferrada",150],["Oporto",131],["Le Puy",113],["Pamplona",100],["Francia",92],["Astorga",92],["Burgos",88],["Sevilla",80],["Irún",69],["Resto Portugal",66],["Oviedo - C.P.",60],["Lugo - C.P.",51],["Valença do Minho",51],["Ourense",47],["Vilafranca",47],["Ferrol",44],["Resto Asturias",30],["Samos",28],["Resto C. León",24],["Lisboa",23],["Fonsagrada - C.P.",21],["Suiza",21],["Ponte de Lima",18],["Gijón",15],["Lourdes",15],["Somport",15],["Logroño",14],["Ribadeo",14],["Zamora",13],["Alemania",12],["Puebla de Sanabria",12],["Rates, S. Pedro",11],["Santander",11],["Madrid - C.F.",11],["Francia",10],["La Mesa",10],["Xunqueira de Ambia",10],["A Guarda",10],["Avilés",9],["San Sebastián",9],["Grandas de Salime - C.P.",9],["Jaca",9],["Vezelay",9],["Oviedo",9],["Triacastela",9],["Fonsagrada",8],["Finisterra",7],["Cataluña",7],["Resto Andalucia",7],["Montserrat",7],["Resto Asturias - C.P.",7],["Salamanca",6],["Sahagún",6],["París",6],["Holanda",6],["Bilbao",6],["Braga",6],["Mérida",5],["Bélgica",5],["Hendaya",5],["Vega de Valcarce",5],["Arles",5],["Córdoba",5],["Austria",5],["Resto Cantabria",4],["Gudiña",4],["Laza",4],["R.Pais Vasco",4],["Ponferrada. C.Inv.",3],["Murcia",3],["Granada",3],["Vigo",3],["Roma",3],["Baamonde",3],["Viana do Castelo",3],["Frómista",3],["Cadavo",3],["Com. Valenciana",3],["Resto País Vasco",3],["Chaves-Portugal",3],["Puente la Reina",3],["Barcelos",3],["Huelva",2],["Italia",2],["Hospital de Orbigo",2],["Com. Valenciana",2],["Malaga",2],["Fatima",2],["Cáceres",2],["Canfranc",2],["Resto C. León - V.P.",2],["Republica Checa",2],["Resto de Extremadura",2],["Valencia",2],["Molinaseca",2],["Vilalba",2],["Barcelona",1],["Reino Unido",1],["Verín",1],["San Juan de Ortega",1],["Rabanal del Camino",1],["Quiroga",1],["Mondoñedo",1],["Carrión de los Condes",1],["Coimbra",1],["Sto. Domingo de la Calzada",1],["Polonia",1],["Castilla la Mancha",1],["Badajoz",1],["Baiona",1],["Muxia",1],["Cataluña",1],["Zaragoza",1],["Dinamarca",1],["Nájera",1]],"startingRegions":[["France",1166],["Lugo",960],["León",502],["Portugal",315],["Navarra",305],["Pontevedra",191],["Asturias",149],["Burgos",89],["Sevilla",87],["Gipuzkoa",85],["Ourense",66],["A Coruña",52],["Zamora",25],["Switzerland",21],["Barcelona",16],["La Rioja",16],["Cantabria",15],["Germany",12],["Madrid",11],["Huesca",11],["Badajoz",8],["Valencia",7],["Vizcaya",6],["Salamanca",6],["Holland",6],["Austria",5],["Italy",5],["Belgium",5],["Córdoba",5],["Palencia",4],["Murcia",3],["Granada",3],["Porgugal",3],["Huelva",2],["Málaga",2],["Cáceres",2],["Czech Republic",2],["UK",1],["Poland",1],["Albacete",1],["Zaragoza",1],["Denmark",1]],"caminos":[["Frances-Camino de",3021],["Portugues-Camino",506],["Via de la Plata",211],["Norte-Camino de",208],["Primitivo-Camino",161],["Ingles-Camino",44],["Otros caminos",14],["Muxia-Finisterre",8]]},"12":{"year":"2012","month":"12","pilgrims":1501,"gender":[["Hombre",1006],["Mujer",495]],"transport":[["Pie",1412],["Bicicleta",84],["Caballo",4],["Silla de ruedas",1]],"age":[["30 - 60",958],["< 30",400],["> 60",143]],"motivation":[["Religioso y otros",832],["Religioso",579],["No religioso",90]],"spanishFrom":[["Galicia",195],["Madrid",152],["Cataluña",91],["Andalucía",76],["Pais Vasco",57],["Baleares",42],["La Rioja",39],["Comunidad Valenciana",38],["Castilla León",29],["Navarra",23],["Asturias",20],["Canarias",17],["Castilla la Mancha",16],["Aragón",14],["Extremadura",14],["Murcia",10],["Cantabria",6],["Otra",3]],"byCountry":[["España",842],["Portugal",85],["Corea",82],["Italia",67],["Francia",64],["Alemania",57],["Estados Unidos",26],["Australia",25],["Holanda",25],["Canadá",24],["Reino Unido",22],["México",20],["Brasil",13],["Argentina",13],["Japón",12],["Polonia",11],["Belgica",10],["Suiza",9],["Austria",8],["China",8],["Irlanda",7],["Dinamarca",7],["Finlandia",5],["Hungría",4],["Rusia",4],["República Checa",3],["Chile",3],["Luxemburgo",3],["Lituania",3],["Ucrania",3],["Israel",2],["Croacia",2],["Suecia",2],["Costa Rica",2],["Rumania",2],["Sudáfrica",2],["Camerún",2],["Venezuela",2],["Taiwán",2],["Uruguay",2],["Bulgaria",2],["Cuba",1],["Perú",1],["Eslovaquia",1],["Colombia",1],["Filipinas",1],["Letonia",1],["Rep. Dominicana",1],["Guatemala",1],["Togo",1],["Ecuador",1],["Estonia",1],["Indonesia",1],["Andorra",1],["Serbia",1]],"professions":[["Empleados",300],["Liberales",253],["Estudiantes",214],["Tecnicos",163],["Obreros",121],["Jubilados",116],["Funcionarios",92],["Profesores",88],["Parados",80],["Amas de Casa",23],["Artistas",19],["Directivos",14],["Agricultores",6],["Marinos",6],["Deportistas",2],["Sacerdotes",2],["Religiosas",2]],"startingCities":[["S. Jean P. Port",225],["Sarria",218],["Cebreiro",117],["Roncesvalles",88],["Tui",70],["Ponferrada",57],["Ferrol",55],["Oporto",48],["León",46],["Valença do Minho",34],["Pamplona",32],["Astorga",29],["Burgos",27],["La Rioja",27],["Le Puy",27],["Triacastela",25],["Sevilla",23],["Irún",20],["Oviedo - C.P.",20],["Lugo - C.P.",19],["Muxia",18],["Vilafranca",18],["Francia",16],["Resto Portugal",12],["Barcelos",12],["Ponte de Lima",11],["Madrid - C.F.",10],["Oviedo",9],["Alemania",9],["Resto Cantabria",8],["Somport",8],["Vigo",6],["La Rioja",6],["Lourdes",6],["Lisboa",5],["Vilalba",5],["Ourense",4],["Jaca",4],["Hendaya",4],["Montserrat",4],["Gudiña",4],["Holanda",4],["Mérida",4],["Fonsagrada - C.P.",4],["Suiza",4],["San Sebastián",4],["Salamanca",4],["Bilbao",4],["Ponferrada. C.Inv.",3],["Gijón",3],["Esposende",3],["Sahagún",3],["Neda",3],["Abadin",3],["Barcelona",3],["Navarra",3],["Baamonde",3],["Viseu",3],["Faro",3],["Ribadeo",3],["Santander",3],["Logroño",3],["Cataluña",3],["Cataluña",3],["Monforte de Lemos",2],["Resto Asturias - C.P.",2],["Vezelay",2],["Italia",2],["Viana do Castelo",2],["Cáceres",2],["Resto de Extremadura",2],["Sto. Domingo de la Calzada",2],["Resto C. León",2],["Zamora",2],["San Sebastian",2],["Castrojeriz",1],["Benavente",1],["Samos",1],["Resto Asturias",1],["París",1],["Austria",1],["Resto Europa",1],["Granada",1],["Madrid",1],["Arles",1],["Resto C. León - V.P.",1],["Valencia",1],["Guimaraes",1],["Rabanal del Camino",1],["Bélgica",1],["Porriño",1],["Valladolid",1]],"startingRegions":[["Lugo",400],["France",290],["León",160],["Portugal",131],["Navarra",123],["Pontevedra",77],["A Coruña",76],["La Rioja",38],["Asturias",35],["Burgos",28],["Gipuzkoa",26],["Sevilla",23],["Barcelona",13],["Madrid",11],["Cantabria",11],["Ourense",11],["Germany",9],["Badajoz",6],["Holland",4],["Huesca",4],["Switzerland",4],["Salamanca",4],["Vizcaya",4],["Zamora",3],["Italy",2],["Cáceres",2],["Austria",1],["Europe Other",1],["Granada",1],["Valencia",1],["Belgium",1],["Valladolid",1]],"caminos":[["Frances-Camino de",1038],["Portugues-Camino",211],["Norte-Camino de",72],["Ingles-Camino",58],["Via de la Plata",50],["Primitivo-Camino",45],["Muxia-Finisterre",18],["Otros caminos",9]]},"all":{"year":"2012","month":"","pilgrims":192488,"gender":[["Hombre",108810],["Mujer",83678]],"transport":[["Pie",164778],["Bicicleta",27407],["Caballo",281],["Silla de ruedas",22]],"age":[["30 - 60",109309],["< 30",54731],["> 60",28448]],"motivation":[["Religioso y otros",101170],["Religioso",79491],["No religioso",11827]],"spanishFrom":[["Madrid",17660],["Andalucía",14592],["Cataluña",12763],["Comunidad Valenciana",10674],["Galicia",7263],["Castilla León",6917],["Pais Vasco",4865],["Castilla la Mancha",4588],["Extremadura",2463],["Murcia",2359],["Canarias",2272],["Aragón",2197],["Asturias",2122],["Navarra",1347],["Baleares",1209],["Cantabria",946],["La Rioja",519],["Otra",297],["Ceuta",151],["Melilla",70]],"byCountry":[["España",95275],["Alemania",15621],["Italia",12404],["Portugal",10329],["Francia",8121],["Estados Unidos",7071],["Irlanda",3844],["Reino Unido",3758],["Holanda",3015],["Canadá",2904],["Corea",2492],["Polonia",2307],["Brasil",2229],["Belgica",1955],["Australia",1885],["Austria",1772],["Dinamarca",1682],["Suiza",1308],["Suecia",1275],["México",1047],["Noruega",969],["Hungría",885],["Japón",860],["República Checa",832],["Argentina",822],["Finlandia",720],["Sudáfrica",711],["Eslovaquia",636],["Rusia",503],["Colombia",456],["Venezuela",444],["Nueva Zelanda",377],["Eslovenia",373],["Rumania",281],["Bulgaria",211],["China",186],["Ecuador",183],["Chile",178],["Lituania",169],["Uruguay",165],["Perú",162],["Israel",160],["Filipinas",127],["Puerto Rico",121],["Estonia",120],["Andorra",108],["Malta",106],["Luxemburgo",105],["Ucrania",91],["Croacia",71],["Letonia",60],["Grecia",59],["Taiwán",58],["Rep. Dominicana",56],["Islandia",55],["Costa Rica",54],["Bolivia",54],["Paraguay",49],["Singapur",46],["Cuba",44],["India",38],["Malasia",36],["El Salvador",33],["Líbano",33],["Guatemala",30],["Panamá",26],["Marruecos",21],["Turquía",21],["Nicaragua",19],["Honduras",17],["Serbia",16],["Bielorrusia",12],["Irán",11],["Bosnia",11],["Angola",11],["Islas Feroe",8],["Argelia",8],["Guinea Ecuatorial",8],["Emiratos Arabes Unidos",8],["Tailandia",8],["Indonesia",8],["Vietnam",7],["Liechtensein",6],["Macedonia",6],["Armenia",6],["Egipto",6],["Nigeria",6],["Albania",5],["Namibia",5],["Arabia Saudita",5],["Moldavia",5],["Mozambique",5],["Zimbabwe",4],["Camerún",4],["Senegal",4],["Siria",4],["Kenya",4],["Congo",3],["Groenlandia",3],["Trinidad y Tobago",3],["Ghana",3],["Pakistán",3],["Georgia",3],["Mauritania",3],["Togo",2],["Santo Tomé y Príncipe",2],["Libia",2],["Guyana",2],["Mali",2],["Túnez",2],["Jordania",2],["Chipre",2],["Sri Lanka",2],["Irak",2],["Kazajistán",2],["Antigua y Barbuda",2],["Tanzania",1],["Bermudas",1],["Nepal",1],["Costa de Marfil",1],["Chad",1],["Benin",1],["Eritrea",1],["Burkina Faso",1],["Bahamas",1],["Haití",1],["Jamaica",1],["Cabo Verde",1],["Islas Caimán",1],["Etiopía",1],["Samoa Occidental",1],["Camboya",1],["Timor Oriental",1]],"professions":[["Empleados",43069],["Estudiantes",34747],["Tecnicos",24754],["Jubilados",22094],["Liberales",21779],["Profesores",14400],["Funcionarios",8751],["Obreros",7255],["Parados",5168],["Amas de Casa",4368],["Directivos",1818],["Artistas",1471],["Sacerdotes",1159],["Agricultores",631],["Religiosas",477],["Marinos",350],["Deportistas",167],["Oikoten",30]],"startingCities":[["Sarria",40734],["S. Jean P. Port",22213],["León",10406],["Cebreiro",10315],["Roncesvalles",8468],["Tui",8436],["Ponferrada",7765],["Oporto",7641],["Astorga",5666],["Pamplona",4172],["Oviedo - C.P.",3956],["Burgos",3864],["Le Puy",3433],["Ferrol",3374],["Irún",3142],["Valença do Minho",3097],["Vilafranca",2667],["Resto Portugal",2660],["Sevilla",2287],["Ourense",2277],["Francia",2271],["Triacastela",2024],["Lugo - C.P.",1565],["Resto C. León",1358],["Samos",1300],["Resto Asturias",1189],["Santander",1135],["Ribadeo",1094],["Lisboa",977],["Logroño",941],["Bilbao",905],["Ponte de Lima",901],["Vilalba",845],["Holanda",786],["Gijón",731],["Oviedo",699],["Somport",664],["Alemania",603],["Avilés",552],["Salamanca",515],["Madrid - C.F.",481],["Zamora",459],["Resto País Vasco",430],["Sahagún",426],["Mondoñedo",374],["Bélgica",372],["Puebla de Sanabria",371],["Rates, S. Pedro",343],["Braga",333],["Resto Asturias - C.P.",324],["Vega de Valcarce",319],["San Sebastián",308],["Baamonde",305],["Resto Cantabria",298],["Jaca",295],["Chaves-Portugal",290],["Lourdes",279],["Suiza",277],["Muxia",273],["Frómista",261],["Barcelos",245],["Gudiña",227],["Neda",199],["A Guarda",198],["Porriño",197],["Fonsagrada - C.P.",193],["Sto. Domingo de la Calzada",191],["Cataluña",185],["Vezelay",179],["Carrión de los Condes",176],["Puente la Reina",169],["Lourenzá",163],["Arles",158],["Mérida",157],["Resto Andalucia",154],["Rabanal del Camino",152],["Resto C. León - V.P.",146],["Montserrat",145],["Finisterra",144],["Allariz",143],["Xunqueira de Ambia",141],["Granja de Moreruela",140],["Hendaya",137],["Laza",130],["Fonsagrada",129],["Madrid",125],["Com. Valenciana",123],["Hospital de Orbigo",122],["Valencia",120],["Abadin",117],["Navarra",112],["Viana do Castelo",111],["Austria",110],["Estella",110],["Fatima",104],["Zaragoza",102],["Cáceres",101],["Verín",96],["Baiona",94],["Barcelona",92],["Grandas de Salime - C.P.",92],["Cadavo",91],["R.Pais Vasco",89],["Vigo",87],["Resto de Extremadura",86],["Grandas de Salime",81],["Tineo - C.P.",77],["La Rioja",72],["París",71],["Italia",69],["Canfranc",62],["Castilla la Mancha",62],["Guimaraes",61],["Monforte de Lemos",56],["Molinaseca",56],["Granada",54],["Povoa de Varzim",54],["Tineo",48],["Ponferrada. C.Inv.",47],["Coimbra",47],["Castilla La Mancha",46],["Huelva",43],["Cast. la Mancha",43],["Nájera",40],["Benavente",37],["Badajoz",35],["Córdoba",33],["Malaga",32],["Polonia",32],["Roma",31],["Castrojeriz",28],["Valladolid",28],["Resto Europa",28],["San Sebastian",27],["Vegadeo",25],["Murcia",24],["Las Médulas",24],["Fonfría",24],["Reino Unido",22],["La Mesa",19],["Republica Checa",19],["Guitiriz",18],["Quiroga",14],["San Juan de Ortega",13],["Eslovaquia",13],["Salas",13],["Esposende",12],["Viseu",11],["Faro",11],["La Bañeza",10],["Grado",10],["Irlanda",9],["Hungría",8],["Finlandia",6],["Dinamarca",6],["Resto Galicia",6],["Luxemburgo",4],["Valcarlos",4],["Aveiro",4],["Vincios",4],["El Escamplero",3],["Jerusalem",3],["Rábade",3],["Peñaseita",3],["Vilabade",2],["Leyre",2],["Ortigueira",1],["Reino Unido C.Ing",1],["Andorra",1],["A Rúa",1],["mirallos",1],["Pontedeume",1],["Irlanda C. Ing",1],["Inglaterra",1],["Egipto",1],["O Barco de Valdeorras",1],["Gándara",1]],"startingRegions":[["Lugo",59364],["France",29405],["León",29164],["Portugal",16600],["Navarra",13037],["Pontevedra",9017],["Asturias",7822],["A Coruña",3998],["Gipuzkoa",3996],["Burgos",3905],["Ourense",3028],["Sevilla",2441],["Cantabria",1433],["La Rioja",1244],["Zamora",1007],["Vizcaya",905],["Holland",786],["Madrid",606],["Germany",603],["Salamanca",515],["Palencia",437],["Barcelona",422],["Belgium",372],["Huesca",357],["Porgugal",290],["Badajoz",278],["Switzerland",277],["Valencia",243],["Albacete",151],["Austria",110],["Zaragoza",102],["Cáceres",101],["Italy",100],["Granada",54],["Huelva",46],["Córdoba",33],["Málaga",32],["Poland",32],["Europe Other",28],["Valladolid",28],["Murcia",24],["UK",24],["Czech Republic",19],["Slovakia",13],["Ireland",10],["Hungary",8],["Finland",6],["Denmark",6],["Luxembourg",4],["Israel",3],["Andorra",1],["Egypt",1]],"caminos":[["Frances-Camino de",134978],["Portugues-Camino",25628],["Norte-Camino de",12920],["Via de la Plata",8163],["Primitivo-Camino",6349],["Ingles-Camino",3577],["Otros caminos",456],["Muxia-Finisterre",417]]}},"2013":{"1":{"year":"2013","month":"1","pilgrims":806,"gender":[["Hombre",559],["Mujer",247]],"transport":[["Pie",760],["Bicicleta",44],["Caballo",2]],"age":[["30 - 60",512],["< 30",248],["> 60",46]],"motivation":[["Religioso y otros",396],["Religioso",353],["No religioso",57]],"spanishFrom":[["Andalucía",62],["Madrid",61],["Comunidad Valenciana",57],["Galicia",45],["Cataluña",41],["Baleares",27],["Extremadura",25],["Castilla León",16],["Pais Vasco",12],["Castilla la Mancha",11],["Cantabria",9],["Canarias",8],["Aragón",5],["Asturias",4],["Murcia",3],["Otra",2],["Ceuta",1],["Navarra",1]],"byCountry":[["España",390],["Corea",118],["Portugal",47],["Alemania",35],["Italia",31],["Estados Unidos",30],["Brasil",19],["Australia",16],["Japón",14],["Francia",14],["República Checa",11],["Holanda",9],["Reino Unido",6],["Argentina",6],["Sudáfrica",5],["Venezuela",5],["Hungría",5],["Canadá",5],["Belgica",4],["Chile",3],["Irlanda",3],["Dinamarca",3],["Nueva Zelanda",3],["Croacia",2],["Indonesia",2],["Perú",2],["Taiwán",2],["México",2],["Rusia",2],["China",2],["Uruguay",2],["Austria",2],["Suiza",1],["Guatemala",1],["Líbano",1],["Eslovaquia",1],["Turquía",1],["Cuba",1]],"professions":[["Estudiantes",164],["Empleados",151],["Liberales",119],["Tecnicos",87],["Profesores",67],["Obreros",57],["Funcionarios",52],["Parados",34],["Jubilados",27],["Amas de Casa",16],["Agricultores",12],["Directivos",6],["Artistas",6],["Sacerdotes",4],["Marinos",3],["Deportistas",1]],"startingCities":[["Sarria",159],["S. Jean P. Port",120],["León",47],["Tui",45],["Cebreiro",39],["Oporto",34],["Pamplona",31],["Roncesvalles",31],["Ponferrada",28],["Gudiña",24],["Ferrol",20],["Burgos",18],["Astorga",18],["Vilafranca",15],["Resto Portugal",15],["Resto Asturias",11],["Oviedo - C.P.",11],["Valença do Minho",10],["Ourense",9],["Lisboa",8],["Irún",7],["Ribadeo",5],["Vega de Valcarce",5],["Oviedo",4],["Navarra",4],["Sevilla",4],["Le Puy",4],["Alemania",4],["Finisterra",4],["Logroño",3],["Fatima",3],["Francia - C.F.",3],["Carrión de los Condes",3],["Sahagún",3],["Jaca",3],["Resto C. León",3],["Braga",2],["Holanda",2],["Samos",2],["Santander",2],["Bélgica",2],["Madrid - C.F.",2],["Roma",2],["Resto Andalucia",2],["Lugo - C.P.",2],["Mondoñedo",2],["Faro",1],["Viseu",1],["Puebla de Sanabria",1],["Abadin",1],["Granja de Moreruela",1],["Gijón",1],["Bilbao",1],["Laza",1],["Castilla la Mancha otros",1],["Resto Asturias - C.P.",1],["Avilés",1],["Com. Valenciana - C.F.",1],["La Bañeza",1],["Ponferrada. C.Inv.",1],["Lourdes",1],["Puente la Reina",1],["Muxia",1],["Canfranc",1],["Reino Unido C.Ing",1],["Madrid - V.P.",1],["Triacastela",1],["Cast. la Mancha - C.F.",1],["Com. Valenciana - O.C.",1],["Zaragoza",1],["Viana do Castelo",1],["Vezelay",1],["Estella",1],["Zamora",1],["Andorra",1],["París",1],["Lourenzá",1]],"startingRegions":[["Lugo",212],["France",130],["León",121],["Portugal",75],["Navarra",68],["Pontevedra",45],["Ourense",34],["Asturias",29],["A Coruña",25],["Burgos",18],["Gipuzkoa",7],["Sevilla",6],["Germany",4],["Huesca",4],["Palencia",3],["La Rioja",3],["Zamora",3],["Madrid",3],["Belgium",2],["Cantabria",2],["Italy",2],["Holland",2],["Albacete",2],["Valencia",2],["Vizcaya",1],["UK",1],["Zaragoza",1],["Andorra",1]],"caminos":[["Frances-Camino de",562],["Portugues-Camino",120],["Via de la Plata",45],["Norte-Camino de",36],["Ingles-Camino",21],["Primitivo-Camino",14],["Muxia-Finisterre",5],["Otros caminos",3]]},"2":{"year":"2013","month":"2","pilgrims":1382,"gender":[["Hombre",873],["Mujer",509]],"transport":[["Pie",1260],["Bicicleta",112],["Caballo",9],["Silla de ruedas",1]],"age":[["< 30",716],["30 - 60",613],["> 60",53]],"motivation":[["Religioso y otros",806],["Religioso",514],["No religioso",62]],"spanishFrom":[["Madrid",111],["Galicia",93],["Castilla León",81],["Andalucía",65],["Comunidad Valenciana",61],["Castilla la Mancha",46],["Cataluña",41],["Baleares",27],["Canarias",24],["Extremadura",17],["Aragón",11],["Murcia",8],["Pais Vasco",8],["Asturias",5],["Navarra",4],["La Rioja",2]],"byCountry":[["España",604],["Portugal",284],["Corea",94],["Irlanda",76],["Alemania",55],["Estados Unidos",34],["Italia",26],["Francia",24],["Japón",12],["México",12],["Brasil",11],["Reino Unido",11],["Holanda",11],["Suiza",10],["Argentina",9],["Canadá",8],["Ecuador",7],["Polonia",7],["Australia",7],["Belgica",7],["China",6],["Austria",6],["Eslovenia",5],["Chile",5],["Dinamarca",5],["Rumania",4],["Bolivia",4],["Uruguay",3],["Finlandia",3],["Hungría",3],["Colombia",3],["Suecia",2],["Croacia",2],["Egipto",2],["Ucrania",2],["Rusia",2],["República Checa",2],["Perú",2],["Sudáfrica",2],["Letonia",2],["Venezuela",1],["Grecia",1],["Nueva Zelanda",1],["Jordania",1],["Argelia",1],["El Salvador",1],["Israel",1],["Paraguay",1]],"professions":[["Estudiantes",542],["Empleados",278],["Tecnicos",111],["Liberales",108],["Obreros",80],["Profesores",64],["Parados",51],["Funcionarios",44],["Jubilados",30],["Directivos",18],["Agricultores",15],["Artistas",14],["Sacerdotes",9],["Amas de Casa",9],["Marinos",4],["Religiosas",3],["Deportistas",2]],"startingCities":[["Sarria",478],["S. Jean P. Port",119],["Tui",96],["Cebreiro",67],["Oporto",63],["Ourense",51],["Roncesvalles",50],["León",48],["Valença do Minho",46],["Ponferrada",33],["Astorga",28],["Resto Portugal",27],["Burgos",20],["Triacastela",19],["Ferrol",19],["Pamplona",17],["Vilafranca",17],["Oviedo - C.P.",16],["Sevilla",11],["Irún",8],["Bilbao",7],["Francia - C.F.",7],["Lisboa",6],["Jaca",6],["Porriño",6],["Le Puy",6],["Allariz",6],["Lugo - C.P.",6],["Resto C. León C.F.",6],["Santander",6],["Neda",5],["Braga",5],["Salamanca",4],["Finisterra",3],["Gudiña",3],["Somport",3],["Ponte de Lima",3],["Chaves-Portugal",3],["Cataluña - C.F.",3],["San Sebastián",3],["Barcelona",2],["Oviedo - C.N.",2],["Tineo - C.P.",2],["Resto Europa",2],["Vigo",2],["Mérida",2],["Avilés",2],["Granada",2],["Resto País Vasco - C.N.",2],["Samos",2],["Valencia O.C.",2],["Puebla de Sanabria",2],["Sahagún",2],["Francia - C.N",2],["Viana do Castelo",2],["Muxia",1],["Sto. Domingo de la Calzada",1],["Barcelos",1],["Zaragoza",1],["Hendaya",1],["Fatima",1],["Resto Asturias - C.N",1],["Resto C. León - V.P.",1],["Lourdes",1],["Vega de Valcarce",1],["Gijón",1],["Logroño",1],["A Rúa",1],["Canfranc",1],["Cáceres",1],["Alemania",1],["Madrid - C.F.",1],["Suiza",1],["Carrión de los Condes",1],["Ribadeo",1],["Montserrat",1],["Resto de Extremadura",1]],"startingRegions":[["Lugo",573],["Portugal",154],["France",139],["León",136],["Pontevedra",104],["Navarra",67],["Ourense",61],["A Coruña",28],["Asturias",24],["Burgos",20],["Gipuzkoa",13],["Sevilla",11],["Vizcaya",7],["Huesca",7],["Cantabria",6],["Barcelona",6],["Salamanca",4],["Porgugal",3],["Badajoz",3],["Europe Other",2],["La Rioja",2],["Valencia",2],["Zamora",2],["Granada",2],["Cáceres",1],["Germany",1],["Madrid",1],["Switzerland",1],["Palencia",1],["Zaragoza",1]],"caminos":[["Frances-Camino de",946],["Portugues-Camino",258],["Via de la Plata",87],["Norte-Camino de",36],["Ingles-Camino",24],["Primitivo-Camino",24],["Muxia-Finisterre",4],["Otros caminos",3]]},"3":{"year":"2013","month":"3","pilgrims":7229,"gender":[["Hombre",3871],["Mujer",3358]],"transport":[["Pie",6682],["Bicicleta",477],["Caballo",68],["Silla de ruedas",2]],"age":[["30 - 60",3570],["< 30",3209],["> 60",450]],"motivation":[["Religioso y otros",3894],["Religioso",2820],["No religioso",515]],"spanishFrom":[["Madrid",1141],["Andalucía",700],["Galicia",597],["Cataluña",423],["Comunidad Valenciana",332],["Castilla León",282],["Castilla la Mancha",242],["Pais Vasco",144],["Extremadura",132],["Murcia",113],["Canarias",101],["Baleares",56],["Navarra",49],["Asturias",45],["Aragón",31],["Melilla",21],["Cantabria",17],["La Rioja",10],["Otra",3]],"byCountry":[["España",4439],["Portugal",808],["Alemania",455],["Estados Unidos",237],["Italia",139],["Reino Unido",114],["Francia",73],["Irlanda",72],["Corea",71],["Brasil",66],["China",61],["Noruega",57],["Austria",57],["México",45],["Canadá",43],["Venezuela",40],["Australia",34],["Japón",33],["Colombia",30],["Dinamarca",30],["Suiza",29],["Argentina",28],["Holanda",27],["Rusia",16],["Ecuador",15],["Polonia",14],["Rumania",14],["Belgica",14],["Hungría",12],["Singapur",12],["Finlandia",10],["Uruguay",10],["Sudáfrica",8],["Perú",8],["Ucrania",7],["República Checa",7],["Eslovaquia",6],["Israel",6],["Malta",5],["Bulgaria",5],["Chile",5],["Suecia",5],["Costa Rica",5],["Lituania",4],["Bangladesh",3],["Grecia",3],["Turquía",3],["Cuba",3],["Filipinas",3],["India",3],["Estonia",3],["Irán",3],["El Salvador",2],["Puerto Rico",2],["Bolivia",2],["Nicaragua",2],["Rep. Dominicana",2],["Luxemburgo",2],["Indonesia",2],["Taiwán",1],["Honduras",1],["Pakistán",1],["Angola",1],["Liechtensein",1],["Jamaica",1],["Guatemala",1],["Guinea",1],["Vietnam",1],["Eslovenia",1],["Namibia",1],["Letonia",1],["Tanzania",1],["Serbia",1],["Jordania",1]],"professions":[["Estudiantes",2313],["Empleados",1290],["Tecnicos",782],["Liberales",768],["Profesores",549],["Jubilados",320],["Funcionarios",302],["Obreros",279],["Parados",172],["Amas de Casa",169],["Directivos",110],["Artistas",58],["Marinos",35],["Sacerdotes",25],["Agricultores",24],["Religiosas",23],["Deportistas",10]],"startingCities":[["Sarria",2625],["Tui",578],["Cebreiro",426],["Valença do Minho",369],["Ferrol",303],["S. Jean P. Port",272],["Ponferrada",268],["Oporto",261],["Roncesvalles",216],["León",187],["Astorga",155],["Ourense",130],["Lugo - C.P.",102],["Pamplona",95],["Vilafranca",84],["Triacastela",72],["Burgos",70],["Resto Portugal",67],["Samos",55],["Oviedo - C.P.",52],["Resto C. León C.F.",43],["Porriño",43],["Sevilla",40],["Lisboa",38],["Ponte de Lima",37],["Ribadeo",31],["Irún",29],["Oviedo - C.N.",23],["Resto Asturias - C.N",21],["Barcelos",19],["Salamanca",19],["Cáceres",19],["Le Puy",17],["Braga",17],["Lourenzá",17],["Logroño",16],["Chaves-Portugal",15],["Vilalba",14],["Finisterra",14],["Muxia",14],["Avilés",13],["Baamonde",12],["Neda",12],["A Guarda",11],["Resto Asturias - C.P.",11],["Francia - C.F.",11],["Verín",10],["Bilbao",10],["Vega de Valcarce",9],["Aveiro",9],["Resto de Extremadura",8],["Gijón",8],["Resto Andalucia",8],["Rates, S. Pedro",8],["Sto. Domingo de la Calzada",7],["Fonsagrada - C.P.",7],["Vigo",7],["Puebla de Sanabria",7],["Xunqueira de Ambia",6],["Resto C. León - V.P.",6],["Viana do Castelo",6],["Zamora",6],["San Sebastián",6],["Sahagún",6],["Monforte de Lemos",6],["Jaca",5],["La Rioja",5],["Cataluña - C.F.",5],["Baiona",5],["Navarra",5],["Mérida",5],["Madrid - C.F.",5],["Tineo - C.P.",4],["R.Pais Vasco C.F.",4],["Grandas de Salime - C.P.",4],["Guimaraes",4],["Suiza",4],["Santander",4],["Lourdes",4],["Vezelay",4],["Nájera",3],["Fatima",3],["Estella",3],["Resto País Vasco - C.N.",3],["Alemania",3],["Puente la Reina",3],["Resto Cantabria",3],["Rabanal del Camino",3],["Gudiña",3],["Valladolid",3],["Valencia O.C.",3],["Hospital de Orbigo",3],["Coimbra",2],["Povoa de Varzim",2],["Fonfría",2],["Córdoba",2],["Laza",2],["Cadavo",2],["Granada",2],["Castrojeriz",2],["Badajoz",2],["Francia - C.N",2],["Malaga",2],["Allariz",1],["Roma",1],["Somport",1],["Valcarlos",1],["Madrid - V.P.",1],["Castilla La Mancha VP",1],["Mondoñedo",1],["Ponferrada. C.Inv.",1],["Cast. la Mancha - C.F.",1],["Frómista",1],["Barcelona",1],["Zaragoza",1],["Montserrat",1],["Luxemburgo",1],["Hendaya",1],["Faro",1],["Com. Valenciana - O.C.",1],["Resto Europa",1],["Betanzos",1],["Carrión de los Condes",1],["Arles",1]],"startingRegions":[["Lugo",3372],["Portugal",843],["León",765],["Pontevedra",644],["A Coruña",344],["Navarra",323],["France",313],["Ourense",152],["Asturias",136],["Burgos",72],["Sevilla",48],["Gipuzkoa",42],["La Rioja",31],["Salamanca",19],["Cáceres",19],["Porgugal",15],["Badajoz",15],["Zamora",13],["Vizcaya",10],["Barcelona",7],["Cantabria",7],["Madrid",6],["Huesca",5],["Switzerland",4],["Valencia",4],["Germany",3],["Valladolid",3],["Córdoba",2],["Granada",2],["Málaga",2],["Palencia",2],["Albacete",2],["Italy",1],["Zaragoza",1],["Luxembourg",1],["Europe Other",1]],"caminos":[["Frances-Camino de",4707],["Portugues-Camino",1487],["Ingles-Camino",316],["Via de la Plata",298],["Norte-Camino de",200],["Primitivo-Camino",182],["Muxia-Finisterre",28],["Otros caminos",11]]},"4":{"year":"2013","month":"4","pilgrims":11533,"gender":[["Hombre",6589],["Mujer",4944]],"transport":[["Pie",9866],["Bicicleta",1600],["Caballo",63],["Silla de ruedas",4]],"age":[["30 - 60",6646],["< 30",2988],["> 60",1899]],"motivation":[["Religioso y otros",6315],["Religioso",4582],["No religioso",636]],"spanishFrom":[["Comunidad Valenciana",800],["Madrid",587],["Castilla León",513],["Andalucía",452],["Cataluña",425],["Galicia",379],["Castilla la Mancha",255],["Pais Vasco",206],["Extremadura",147],["Canarias",122],["Baleares",115],["Murcia",99],["Aragón",97],["Asturias",70],["Cantabria",68],["Navarra",56],["Ceuta",39],["La Rioja",29],["Otra",18],["Melilla",1]],"byCountry":[["España",4478],["Portugal",1281],["Alemania",1201],["Estados Unidos",549],["Irlanda",511],["Italia",487],["Francia",398],["Reino Unido",315],["Canadá",184],["Australia",171],["Holanda",149],["Dinamarca",143],["Corea",135],["Brasil",130],["Belgica",129],["Austria",113],["Suiza",94],["Noruega",87],["Venezuela",86],["Finlandia",83],["México",77],["Suecia",73],["Polonia",55],["Argentina",54],["Japón",48],["Sudáfrica",40],["Colombia",38],["China",38],["República Checa",29],["Eslovaquia",26],["Nueva Zelanda",24],["Rusia",23],["Malta",21],["Hungría",20],["Lituania",20],["Filipinas",20],["Eslovenia",16],["Rumania",15],["Bulgaria",14],["Singapur",13],["Ecuador",11],["Chile",11],["Estonia",11],["Andorra",11],["Uruguay",10],["Malasia",10],["Letonia",10],["Grecia",9],["Perú",8],["Costa Rica",8],["Croacia",5],["Luxemburgo",4],["Puerto Rico",4],["Ucrania",4],["Bolivia",4],["Guatemala",3],["Líbano",3],["Israel",3],["Pakistán",2],["Paraguay",2],["Taiwán",2],["Panamá",2],["Túnez",1],["Serbia",1],["Cuba",1],["Santa Lucía",1],["India",1],["El Salvador",1],["Tailandia",1],["Albania",1]],"professions":[["Empleados",2732],["Estudiantes",1825],["Liberales",1498],["Jubilados",1465],["Tecnicos",1236],["Profesores",740],["Funcionarios",593],["Obreros",452],["Parados",283],["Amas de Casa",221],["Directivos",188],["Artistas",114],["Sacerdotes",69],["Agricultores",55],["Religiosas",28],["Deportistas",20],["Marinos",12],["Oikoten",2]],"startingCities":[["Sarria",3269],["S. Jean P. Port",1033],["Oporto",827],["León",565],["Cebreiro",500],["Ponferrada",418],["Roncesvalles",413],["Tui",346],["Valença do Minho",316],["Pamplona",284],["Astorga",266],["Ferrol",218],["Oviedo - C.P.",199],["Resto Portugal",197],["Sevilla",176],["Burgos",157],["Ourense",149],["Le Puy",149],["Lugo - C.P.",131],["Irún",116],["Samos",114],["Vilafranca",107],["Rates, S. Pedro",101],["Triacastela",99],["Resto C. León C.F.",73],["Ponte de Lima",72],["Francia - C.F.",58],["Lisboa",55],["Logroño",50],["Braga",49],["Resto Asturias - C.N",43],["Oviedo - C.N.",42],["Ribadeo",42],["Santander",38],["Avilés",36],["Vilalba",32],["Chaves-Portugal",29],["Salamanca",28],["Bilbao",28],["Finisterra",27],["Sahagún",26],["Zamora",25],["Resto País Vasco - C.N.",24],["Somport",23],["Xunqueira de Ambia",20],["Alemania",19],["Gijón",19],["Resto Asturias - C.P.",17],["Fonsagrada - C.P.",16],["Guimaraes",16],["Navarra",16],["Frómista",14],["Suiza",14],["Jaca",13],["Hendaya",13],["Resto Europa",13],["Esposende",12],["Vezelay",12],["Granja de Moreruela",12],["Gudiña",11],["Puebla de Sanabria",11],["Com. Valenciana - C.F.",10],["La Mesa",10],["Barcelos",10],["Resto Cantabria",10],["Carrión de los Condes",10],["Mérida",10],["Puente la Reina",9],["Aveiro",9],["San Sebastián",8],["Laza",8],["Resto C. León - V.P.",8],["Arles",7],["Hospital de Orbigo",7],["Mondoñedo",7],["Madrid - C.F.",7],["Resto Andalucia",7],["Grandas de Salime - C.P.",7],["Coimbra",7],["Viana do Castelo",7],["Lourdes",7],["Muxia",6],["Malaga",6],["Madrid - V.P.",6],["Verín",6],["Cataluña - C.F.",6],["Cadavo",5],["Holanda",5],["Tineo - C.P.",5],["Resto de Extremadura",5],["Barcelona",5],["Neda",5],["Porriño",5],["Rabanal del Camino",5],["Estella",4],["Povoa de Varzim",4],["Viseu",4],["Sto. Domingo de la Calzada",4],["Valencia O.C.",4],["Cáceres",4],["Montserrat",4],["Nájera",4],["La Rioja",4],["Castilla La Mancha VP",4],["Francia - C.N",3],["Allariz",3],["Bélgica",3],["Canfranc",3],["Granada",3],["Zaragoza",3],["Córdoba",3],["Ponferrada. C.Inv.",3],["Vega de Valcarce",2],["A Guarda",2],["Italia",2],["R.Pais Vasco C.F.",2],["Vigo",2],["Monforte de Lemos",2],["Abadin",2],["Cast. la Mancha - C.F.",2],["Molinaseca",2],["Lourenzá",2],["Austria",2],["Com. Valenciana - O.C.",1],["Polonia",1],["Fatima",1],["Grado",1],["Baamonde",1],["Roma",1],["Reino Unido C.F.",1],["Faro",1],["Castrojeriz",1],["Inglaterra C.F.",1],["Irlanda C.F.",1],["Republica Checa",1],["Benavente",1],["Pardellas",1]],"startingRegions":[["Lugo",4222],["Portugal",1676],["León",1482],["France",1305],["Navarra",726],["Asturias",379],["Pontevedra",356],["A Coruña",256],["Ourense",209],["Sevilla",183],["Burgos",158],["Gipuzkoa",150],["La Rioja",62],["Zamora",49],["Cantabria",48],["Porgugal",29],["Vizcaya",28],["Salamanca",28],["Palencia",24],["Germany",19],["Huesca",16],["Valencia",15],["Badajoz",15],["Barcelona",15],["Switzerland",14],["Europe Other",13],["Madrid",13],["Albacete",6],["Málaga",6],["Holland",5],["Cáceres",4],["Belgium",3],["Granada",3],["Zaragoza",3],["Córdoba",3],["Italy",3],["Austria",2],["UK",2],["Poland",1],["Ireland",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",7831],["Portugues-Camino",2043],["Via de la Plata",535],["Norte-Camino de",466],["Primitivo-Camino",392],["Ingles-Camino",223],["Muxia-Finisterre",33],["Otros caminos",10]]},"5":{"year":"2013","month":"5","pilgrims":25206,"gender":[["Hombre",13652],["Mujer",11554]],"transport":[["Pie",22039],["Bicicleta",3016],["Caballo",144],["Silla de ruedas",7]],"age":[["30 - 60",15006],["> 60",6875],["< 30",3325]],"motivation":[["Religioso y otros",13640],["Religioso",10420],["No religioso",1146]],"spanishFrom":[["Madrid",1826],["Cataluña",1154],["Andalucía",841],["Galicia",825],["Comunidad Valenciana",782],["Castilla León",592],["Pais Vasco",402],["Castilla la Mancha",351],["Canarias",227],["Aragón",162],["Asturias",143],["Navarra",129],["Baleares",129],["Murcia",125],["Extremadura",110],["Cantabria",73],["La Rioja",42],["Otra",28],["Ceuta",12],["Melilla",8]],"byCountry":[["España",7961],["Alemania",3475],["Francia",1641],["Italia",1579],["Estados Unidos",1510],["Portugal",1068],["Irlanda",879],["Reino Unido",643],["Holanda",606],["Canadá",555],["Australia",532],["Brasil",452],["Austria",410],["Corea",337],["Dinamarca",306],["Polonia",277],["Suecia",271],["Belgica",256],["Suiza",231],["Finlandia",198],["República Checa",165],["Argentina",159],["México",139],["Japón",130],["Hungría",124],["Noruega",121],["Sudáfrica",119],["Venezuela",112],["Rusia",97],["Colombia",83],["Eslovenia",77],["Nueva Zelanda",74],["Bulgaria",56],["Eslovaquia",55],["Ecuador",44],["China",39],["Rumania",35],["Ucrania",32],["Lituania",30],["Uruguay",26],["Croacia",25],["Chile",24],["Perú",24],["Singapur",15],["Puerto Rico",13],["Estonia",13],["Malta",12],["Islandia",12],["Letonia",11],["Andorra",10],["Luxemburgo",10],["Israel",10],["Taiwán",10],["Bolivia",9],["Costa Rica",9],["Grecia",7],["Malasia",6],["Filipinas",6],["Rep. Dominicana",6],["Guatemala",5],["Marruecos",4],["Panamá",3],["El Salvador",3],["India",3],["Líbano",3],["Bielorrusia",3],["Albania",3],["Jordania",3],["Angola",3],["Emiratos Arabes Unidos",3],["Nicaragua",3],["Cuba",3],["Irán",3],["Turquía",2],["Vietnam",2],["Kazajistán",2],["Paraguay",2],["Sri Lanka",2],["Senegal",1],["Tailandia",1],["Namibia",1],["Belice",1],["Belice",1],["Chipre",1],["Túnez",1],["Indonesia",1],["Moldavia",1],["Islas Feroe",1],["Siria",1],["Georgia",1],["Guyana",1],["Uganda",1],["Mauricio",1]],"professions":[["Empleados",5990],["Jubilados",5288],["Liberales",3894],["Tecnicos",2947],["Estudiantes",1509],["Funcionarios",1263],["Profesores",1063],["Obreros",839],["Amas de Casa",736],["Parados",643],["Directivos",491],["Artistas",242],["Sacerdotes",123],["Agricultores",67],["Religiosas",63],["Deportistas",26],["Marinos",19],["Oikoten",3]],"startingCities":[["Sarria",5196],["S. Jean P. Port",3824],["Oporto",1521],["León",1373],["Roncesvalles",1020],["Cebreiro",972],["Ponferrada",841],["Tui",749],["Astorga",744],["Le Puy",706],["Pamplona",696],["Sevilla",568],["Burgos",538],["Valença do Minho",448],["Oviedo - C.P.",407],["Ferrol",405],["Irún",335],["Francia - C.F.",318],["Ourense",299],["Vilafranca",275],["Triacastela",198],["Samos",160],["Lugo - C.P.",151],["Ponte de Lima",144],["Lisboa",139],["Resto Portugal",131],["Logroño",118],["Somport",108],["Oviedo - C.N.",107],["Ribadeo",107],["Holanda",106],["Alemania",105],["Salamanca",105],["Bilbao",94],["Resto C. León C.F.",91],["Resto Asturias - C.N",87],["Rates, S. Pedro",85],["Vilalba",82],["Santander",70],["Zamora",68],["Vega de Valcarce",67],["Madrid - C.F.",64],["Puebla de Sanabria",53],["Sahagún",52],["San Sebastián",50],["Barcelos",49],["Bélgica",47],["Avilés",45],["Gijón",45],["Resto Cantabria",39],["Resto País Vasco - C.N.",38],["Lourdes",37],["Chaves-Portugal",36],["Carrión de los Condes",35],["Coimbra",35],["Frómista",34],["Hospital de Orbigo",32],["Braga",32],["Resto Asturias - C.P.",30],["Suiza",30],["Vezelay",30],["Jaca",30],["Resto Andalucia",28],["Valencia O.C.",28],["Ponferrada. C.Inv.",25],["Puente la Reina",24],["Viseu",23],["Grandas de Salime - C.P.",23],["Francia - C.N",21],["Porriño",21],["París",21],["Rabanal del Camino",20],["Mérida",19],["Granada",19],["Neda",19],["Hendaya",18],["Viana do Castelo",18],["Sto. Domingo de la Calzada",18],["Molinaseca",18],["Fonsagrada - C.P.",17],["Granja de Moreruela",17],["Cáceres",16],["Resto Europa",15],["Com. Valenciana - C.F.",15],["Baamonde",15],["Cataluña - C.F.",15],["R.Pais Vasco C.F.",14],["Gudiña",14],["Zaragoza",13],["Abadin",13],["Muxia",13],["Finisterra",12],["Fatima",12],["Barcelona",11],["Malaga",11],["Cadavo",11],["Tineo - C.P.",10],["Castilla La Mancha VP",9],["Vigo",9],["Madrid - V.P.",9],["Austria",8],["Navarra",8],["Huelva",7],["Montserrat",7],["Canfranc",7],["Estella",7],["La Rioja",7],["Verín",7],["Guimaraes",7],["Arles",6],["Laza",6],["Resto C. León - V.P.",6],["Castrojeriz",6],["Cast. la Mancha - C.F.",5],["Com. Valenciana - O.C.",5],["Povoa de Varzim",5],["Benavente",5],["A Guarda",5],["Cataluña - O.C.",4],["Grado",4],["Castilla la Mancha otros",3],["Lourenzá",3],["Faro",3],["Italia",3],["Monforte de Lemos",3],["Mondoñedo",3],["Esposende",2],["Aveiro",2],["Valcarlos",2],["Allariz",2],["Roma",2],["Reino Unido C.F.",2],["Nájera",2],["Irlanda C.F.",2],["Betanzos",1],["Republica Checa",1],["Inglaterra C.F.",1],["Murcia",1],["Resto de Extremadura",1],["Córdoba",1],["Baiona",1],["Corredoiras",1],["",1],["Reino Unido C.Ing",1],["Fonfría",1],["Xunqueira de Ambia",1],["Leyre",1],["Ortigueira",1],["Andorra",1]],"startingRegions":[["Lugo",6932],["France",5089],["León",3544],["Portugal",2654],["Navarra",1758],["Pontevedra",785],["Asturias",758],["Sevilla",596],["Burgos",544],["A Coruña",452],["Gipuzkoa",437],["Ourense",331],["La Rioja",145],["Zamora",143],["Cantabria",109],["Holland",106],["Germany",105],["Salamanca",105],["Vizcaya",94],["Madrid",73],["Palencia",69],["Valencia",48],["Belgium",47],["Huesca",37],["Barcelona",37],["Porgugal",36],["Switzerland",30],["Badajoz",20],["Granada",19],["Albacete",17],["Cáceres",16],["Europe Other",15],["Zaragoza",13],["Málaga",11],["Austria",8],["Huelva",7],["Italy",5],["UK",4],["Ireland",2],["Czech Republic",1],["Murcia",1],["Córdoba",1],["City&nbsp;Was Blank",1],["Andorra",1]],"caminos":[["Frances-Camino de",18109],["Portugues-Camino",3441],["Via de la Plata",1307],["Norte-Camino de",1173],["Primitivo-Camino",654],["Ingles-Camino",427],["Otros caminos",69],["Muxia-Finisterre",25],["Otros caminos",1]]},"6":{"year":"2013","month":"6","pilgrims":29374,"gender":[["Hombre",16748],["Mujer",12626]],"transport":[["Pie",24144],["Bicicleta",5061],["Caballo",164],["Silla de ruedas",5]],"age":[["30 - 60",16739],["> 60",6700],["< 30",5935]],"motivation":[["Religioso y otros",15635],["Religioso",12217],["No religioso",1522]],"spanishFrom":[["Madrid",2102],["Andalucía",1685],["Cataluña",1409],["Comunidad Valenciana",1129],["Galicia",878],["Castilla León",863],["Pais Vasco",632],["Castilla la Mancha",519],["Canarias",347],["Murcia",334],["Extremadura",320],["Asturias",307],["Aragón",225],["Navarra",208],["Cantabria",139],["La Rioja",112],["Baleares",104],["Otra",37],["Melilla",18],["Ceuta",16]],"byCountry":[["España",11384],["Alemania",2728],["Italia",2184],["Estados Unidos",2166],["Portugal",1867],["Francia",1521],["Holanda",723],["Irlanda",681],["Reino Unido",617],["Canadá",526],["Brasil",494],["Australia",488],["Corea",343],["Belgica",310],["Austria",293],["Polonia",248],["Dinamarca",240],["México",219],["Suiza",185],["Japón",177],["Sudáfrica",167],["Argentina",160],["Suecia",158],["Hungría",141],["Colombia",112],["Noruega",97],["República Checa",96],["Finlandia",92],["Nueva Zelanda",88],["Rusia",82],["Venezuela",77],["Eslovaquia",49],["Eslovenia",49],["Bulgaria",46],["China",46],["Puerto Rico",37],["Chile",36],["Uruguay",35],["Ecuador",32],["Rumania",32],["Singapur",28],["Taiwán",24],["Lituania",23],["Filipinas",17],["Israel",16],["Luxemburgo",16],["Andorra",15],["El Salvador",13],["Ucrania",12],["Estonia",12],["Perú",12],["Croacia",11],["Grecia",10],["Rep. Dominicana",8],["Panamá",8],["Malta",8],["Letonia",8],["India",8],["Costa Rica",7],["Bolivia",7],["Islandia",6],["Mauritania",5],["Turquía",5],["Paraguay",5],["Cuba",5],["Malasia",5],["Tailandia",4],["Honduras",3],["Kuwait",3],["Angola",3],["Marruecos",3],["Jordania",3],["Zimbabwe",3],["Islas Feroe",2],["Namibia",2],["Mongolia",2],["Líbano",2],["Bosnia",2],["Serbia",2],["Indonesia",2],["Túnez",1],["Pakistán",1],["Moldavia",1],["Georgia",1],["Guyana",1],["Zambia",1],["Guatemala",1],["Dominica",1],["Rwanda",1],["Vietnam",1],["Uganda",1],["I. Reunión",1],["Martinica",1],["Bielorrusia",1],["Chipre",1],["Jamaica",1],["Ghana",1],["Argelia",1]],"professions":[["Empleados",7043],["Jubilados",5532],["Estudiantes",3784],["Tecnicos",3459],["Liberales",3231],["Funcionarios",1521],["Profesores",1247],["Obreros",1070],["Parados",763],["Amas de Casa",743],["Directivos",347],["Artistas",267],["Sacerdotes",164],["Agricultores",90],["Religiosas",47],["Deportistas",38],["Marinos",27],["Oikoten",1]],"startingCities":[["Sarria",5627],["S. Jean P. Port",4880],["León",1546],["Roncesvalles",1461],["Oporto",1360],["Cebreiro",1247],["Tui",941],["Ponferrada",862],["Astorga",741],["Pamplona",662],["Le Puy",623],["Burgos",558],["Irún",512],["Sevilla",509],["Oviedo - C.P.",508],["Valença do Minho",461],["Ferrol",454],["Francia - C.F.",389],["Vilafranca",309],["Ourense",296],["Resto Portugal",292],["Triacastela",255],["Holanda",218],["Lisboa",204],["Rates, S. Pedro",182],["Lugo - C.P.",176],["Santander",168],["Resto C. León C.F.",162],["Chaves-Portugal",156],["Samos",144],["Barcelos",139],["Logroño",121],["Madrid - C.F.",120],["Resto Asturias - C.N",118],["Bilbao",117],["Salamanca",104],["Oviedo - C.N.",101],["Porriño",100],["Alemania",98],["Ponte de Lima",95],["Bélgica",91],["Somport",89],["Guimaraes",87],["Gijón",87],["Braga",80],["Ribadeo",73],["Avilés",69],["Lourdes",58],["San Sebastián",56],["Resto País Vasco - C.N.",55],["Zamora",52],["Sahagún",48],["Suiza",46],["Fonsagrada - C.P.",45],["Puente la Reina",44],["Vezelay",41],["Puebla de Sanabria",41],["Resto Asturias - C.P.",36],["Francia - C.N",36],["Vilalba",35],["Arles",34],["Cataluña - C.F.",33],["Sto. Domingo de la Calzada",32],["Valencia O.C.",31],["Mérida",30],["Tineo - C.P.",30],["Frómista",28],["Hendaya",27],["Hospital de Orbigo",26],["Canfranc",26],["Rabanal del Camino",25],["Resto Andalucia",25],["Jaca",24],["Resto Cantabria",24],["R.Pais Vasco C.F.",24],["Finisterra",24],["Muxia",23],["Carrión de los Condes",23],["Cáceres",23],["Zaragoza",22],["Resto C. León - V.P.",22],["Baiona",21],["Gudiña",21],["Madrid - V.P.",20],["Povoa de Varzim",20],["Navarra",20],["Viseu",19],["Coimbra",19],["Mondoñedo",18],["A Guarda",18],["Vega de Valcarce",17],["Grandas de Salime - C.P.",17],["Austria",17],["Cast. la Mancha - C.F.",17],["Baamonde",17],["Fatima",16],["Granja de Moreruela",16],["Granada",16],["Italia",16],["Montserrat",15],["Molinaseca",14],["Barcelona",13],["Roma",13],["Laza",13],["Resto de Extremadura",12],["Verín",12],["Lourenzá",12],["Estella",12],["Neda",11],["París",11],["Com. Valenciana - C.F.",11],["Resto Europa",9],["Cadavo",9],["Com. Valenciana - O.C.",8],["Abadin",8],["Castrojeriz",7],["Esposende",7],["La Rioja",7],["Reino Unido C.F.",6],["Republica Checa",6],["Huelva",6],["Córdoba",5],["Castilla la Mancha otros",5],["Castilla La Mancha VP",5],["Vigo",5],["Valladolid",5],["Malaga",5],["Viana do Castelo",4],["Chantada",4],["Xunqueira de Ambia",4],["Salas",4],["Benavente",4],["Murcia",3],["San Juan de Ortega",3],["Valcarlos",3],["Ponferrada. C.Inv.",3],["Polonia",2],["Resto Africa",2],["Badajoz",2],["Fonfría",2],["Cataluña - O.C.",2],["Nájera",2],["La Bañeza",2],["Borres",1],["Hungría",1],["Luxemburgo",1],["",1],["Andorra",1],["Dinamarca",1],["La Mesa",1],["Irlanda C.F.",1],["Inglaterra C.F.",1],["Ventas de Narón",1]],"startingRegions":[["Lugo",7673],["France",6188],["León",3777],["Portugal",2978],["Navarra",2202],["Pontevedra",1085],["Asturias",972],["Gipuzkoa",647],["Burgos",568],["Sevilla",534],["A Coruña",512],["Ourense",353],["Holland",218],["Cantabria",192],["La Rioja",162],["Porgugal",156],["Madrid",140],["Vizcaya",117],["Zamora",113],["Salamanca",104],["Germany",98],["Belgium",91],["Barcelona",63],["Palencia",51],["Huesca",50],["Valencia",50],["Switzerland",46],["Badajoz",44],["Italy",29],["Albacete",27],["Cáceres",23],["Zaragoza",22],["Austria",17],["Granada",16],["Europe Other",9],["UK",7],["Czech Republic",6],["Huelva",6],["Valladolid",5],["Córdoba",5],["Málaga",5],["Murcia",3],["Poland",2],["Africa",2],["Luxembourg",1],["City&nbsp;Was Blank",1],["Andorra",1],["Denmark",1],["Ireland",1],["Hungary",1]],"caminos":[["Frances-Camino de",20964],["Portugues-Camino",4070],["Norte-Camino de",1535],["Via de la Plata",1408],["Primitivo-Camino",828],["Ingles-Camino",465],["Otros caminos",56],["Muxia-Finisterre",47],["Otros caminos",1]]},"7":{"year":"2013","month":"7","pilgrims":36559,"gender":[["Hombre",19228],["Mujer",17331]],"transport":[["Pie",32357],["Bicicleta",3988],["Caballo",204],["Silla de ruedas",10]],"age":[["30 - 60",17865],["< 30",15430],["> 60",3264]],"motivation":[["Religioso y otros",18817],["Religioso",15404],["No religioso",2338]],"spanishFrom":[["Andalucía",4450],["Madrid",4421],["Comunidad Valenciana",2461],["Cataluña",2090],["Castilla León",1517],["Pais Vasco",1278],["Castilla la Mancha",1216],["Galicia",991],["Extremadura",909],["Canarias",653],["Murcia",615],["Aragón",540],["Asturias",422],["Baleares",237],["Navarra",213],["Cantabria",205],["La Rioja",124],["Otra",72],["Melilla",33],["Ceuta",24]],"byCountry":[["España",22471],["Italia",2315],["Estados Unidos",1645],["Alemania",1582],["Portugal",1177],["Francia",953],["Irlanda",656],["Reino Unido",531],["Polonia",524],["Holanda",393],["Corea",343],["Belgica",316],["Dinamarca",292],["Canadá",281],["Australia",270],["México",248],["Brasil",244],["Austria",196],["Suecia",166],["Suiza",166],["Hungría",158],["Argentina",126],["República Checa",117],["Sudáfrica",104],["Japón",101],["Colombia",93],["Noruega",86],["Venezuela",72],["Nueva Zelanda",67],["Rusia",62],["Bulgaria",57],["Eslovaquia",56],["Finlandia",49],["Eslovenia",49],["Lituania",49],["Rumania",45],["Chile",43],["Ecuador",39],["China",31],["Ucrania",27],["Puerto Rico",26],["Taiwán",22],["Perú",21],["Guatemala",19],["Uruguay",16],["Andorra",14],["Israel",14],["Estonia",13],["Croacia",11],["Grecia",11],["Filipinas",11],["Rep. Dominicana",10],["Islandia",9],["Bolivia",9],["Paraguay",8],["Líbano",8],["Bielorrusia",8],["Costa Rica",7],["Malta",7],["Luxemburgo",6],["El Salvador",6],["India",6],["Nicaragua",5],["Cuba",5],["Singapur",5],["Islas Feroe",4],["Congo",4],["Letonia",4],["Irán",4],["Vietnam",3],["Pakistán",3],["Honduras",3],["Turquía",3],["Albania",3],["Marruecos",3],["Dominica",2],["Armenia",2],["Sri Lanka",2],["Tuvalu",2],["Indonesia",2],["Bangladesh",2],["Serbia",2],["Nigeria",1],["Seychelles",1],["Aruba",1],["Chipre",1],["Moldavia",1],["Malasia",1],["Belice",1],["Camerún",1],["Bermudas",1],["Libia",1],["Kirguistán",1],["Guinea",1],["Cabo Verde",1],["Egipto",1],["Argelia",1],["Namibia",1],["Etiopía",1],["Tanzania",1],["Kazajistán",1],["Tailandia",1],["Angola",1],["Kenya",1],["Tayikistán",1],["Jordania",1],["Laos",1],["Georgia",1],["Comores",1],["Liechtensein",1],["Bosnia",1],["I. Reunión",1],["Irak",1],["Panamá",1],["Guinea - Bissau",1],["Montenegro",1]],"professions":[["Estudiantes",12199],["Empleados",6202],["Profesores",4428],["Tecnicos",3335],["Liberales",2774],["Jubilados",2410],["Funcionarios",1448],["Obreros",1103],["Parados",774],["Amas de Casa",695],["Directivos",334],["Artistas",288],["Sacerdotes",261],["Agricultores",113],["Religiosas",107],["Marinos",45],["Deportistas",40],["Oikoten",3]],"startingCities":[["Sarria",8855],["S. Jean P. Port",3681],["Cebreiro",2102],["Tui",1959],["León",1590],["Astorga",1566],["Ponferrada",1470],["Roncesvalles",1157],["Oporto",1150],["Valença do Minho",821],["Ferrol",818],["Ourense",743],["Vilafranca",630],["Oviedo - C.P.",629],["Irún",588],["Pamplona",578],["Burgos",521],["Le Puy",425],["Triacastela",399],["Ribadeo",384],["Resto C. León C.F.",383],["Mondoñedo",310],["Resto Asturias - C.N",310],["Lugo - C.P.",272],["Resto Portugal",240],["Francia - C.F.",225],["Samos",198],["Vilalba",194],["Santander",188],["Sevilla",180],["Holanda",170],["Bilbao",163],["Gijón",163],["Oviedo - C.N.",161],["Lisboa",137],["Logroño",137],["Madrid - C.F.",112],["Ponte de Lima",108],["Muxia",105],["Baamonde",91],["Bélgica",79],["Alemania",79],["Porriño",77],["Barcelos",75],["Puebla de Sanabria",74],["Gudiña",68],["Somport",68],["Zamora",66],["Vega de Valcarce",64],["Salamanca",64],["Avilés",61],["San Sebastián",61],["Resto Asturias - C.P.",58],["Rates, S. Pedro",57],["Lourenzá",56],["Resto País Vasco - C.N.",53],["Resto Cantabria",52],["Lourdes",49],["Rabanal del Camino",44],["Fonsagrada - C.P.",44],["Viana do Castelo",44],["Sahagún",43],["Fonfría",42],["Suiza",42],["Jaca",38],["R.Pais Vasco C.F.",37],["Monforte de Lemos",36],["Rábade",36],["Grandas de Salime - C.P.",35],["Braga",34],["Puente la Reina",34],["Vezelay",30],["Cataluña - C.F.",29],["Laza",28],["Abadin",28],["Baiona",27],["Hospital de Orbigo",27],["Francia - C.N",26],["Frómista",25],["Navarra",25],["Resto C. León - V.P.",24],["Canfranc",24],["Valencia O.C.",24],["Verín",24],["Finisterra",21],["Zaragoza",21],["Tineo - C.P.",21],["Montserrat",21],["Estella",20],["Chaves-Portugal",20],["Granja de Moreruela",20],["París",19],["Sto. Domingo de la Calzada",19],["Resto Andalucia",18],["Vigo",18],["Cadavo",17],["Barcelona",17],["Arles",16],["Cruz de Ferro",15],["Ponferrada. C.Inv.",15],["Madrid - V.P.",14],["Coimbra",14],["Carrión de los Condes",14],["Mérida",14],["Hendaya",13],["La Rioja",13],["Com. Valenciana - C.F.",13],["Molinaseca",13],["Fatima",12],["Cáceres",11],["Com. Valenciana - O.C.",11],["Guimaraes",10],["Austria",10],["Xunqueira de Ambia",10],["Neda",10],["Povoa de Varzim",9],["Resto de Extremadura",9],["Esposende",9],["Cast. la Mancha - C.F.",8],["Polonia",8],["Granada",7],["A Guarda",6],["Córdoba",6],["Nájera",5],["Allariz",5],["Huelva",5],["Resto Europa",5],["Castilla la Mancha otros",5],["Castrojeriz",4],["Reino Unido C.F.",4],["Malaga",4],["Salas",3],["Grado",3],["Viseu",3],["Irlanda C.F.",3],["Roma",3],["Castilla La Mancha VP",3],["O Barco de Valdeorras",3],["Badajoz",3],["Italia",2],["Cataluña - O.C.",2],["Republica Checa",2],["Aveiro",2],["Valladolid",2],["Resto Galicia",2],["Murcia",2],["San Juan de Ortega",2],["Faro",2],["Benavente",1],["Finlandia",1],["Sobrado",1],["Ortigueira",1],["Reino Unido C.Ing",1],["Vincios",1],["Hungría",1],["Cea",1],["Guntín",1],["Vegadeo",1],["Covelo",1],["Eslovaquia",1],["Dinamarca",1],["",1]],"startingRegions":[["Lugo",13028],["León",5885],["France",4552],["Portugal",2718],["Pontevedra",2089],["Navarra",1814],["Asturias",1445],["A Coruña",959],["Ourense",890],["Gipuzkoa",739],["Burgos",527],["Cantabria",240],["Sevilla",198],["La Rioja",174],["Holland",170],["Vizcaya",163],["Zamora",161],["Madrid",126],["Germany",79],["Belgium",79],["Barcelona",69],["Salamanca",64],["Huesca",62],["Valencia",48],["Switzerland",42],["Huelva",41],["Palencia",39],["Badajoz",26],["Zaragoza",21],["Porgugal",20],["Albacete",16],["Cáceres",11],["Austria",10],["Poland",8],["Granada",7],["Córdoba",6],["Europe Other",5],["Italy",5],["UK",5],["Málaga",4],["Ireland",3],["Czech Republic",2],["Valladolid",2],["Murcia",2],["Finland",1],["Hungary",1],["Slovakia",1],["Denmark",1],["City&nbsp;Was Blank",1]],"caminos":[["Frances-Camino de",25197],["Portugues-Camino",4816],["Norte-Camino de",2983],["Via de la Plata",1424],["Primitivo-Camino",1082],["Ingles-Camino",830],["Muxia-Finisterre",126],["Otros caminos",100],["Otros caminos",1]]},"8":{"year":"2013","month":"8","pilgrims":46728,"gender":[["Hombre",25335],["Mujer",21393]],"transport":[["Pie",40417],["Bicicleta",6176],["Caballo",114],["Silla de ruedas",21]],"age":[["30 - 60",27288],["< 30",16900],["> 60",2540]],"motivation":[["Religioso y otros",24698],["Religioso",19035],["No religioso",2995]],"spanishFrom":[["Andalucía",5756],["Madrid",5396],["Comunidad Valenciana",3932],["Cataluña",3715],["Castilla la Mancha",1902],["Castilla León",1770],["Galicia",1610],["Pais Vasco",1458],["Extremadura",1009],["Murcia",961],["Aragón",549],["Asturias",400],["Navarra",343],["Canarias",337],["Baleares",208],["Cantabria",177],["La Rioja",146],["Otra",75],["Ceuta",27],["Melilla",23]],"byCountry":[["España",29794],["Italia",5717],["Portugal",2083],["Alemania",1854],["Francia",1070],["Estados Unidos",616],["Polonia",573],["Irlanda",491],["Reino Unido",460],["Corea",385],["Holanda",290],["Belgica",258],["Canadá",207],["Eslovaquia",200],["Hungría",197],["Austria",194],["Dinamarca",177],["Brasil",174],["Australia",169],["Argentina",133],["República Checa",117],["México",112],["Venezuela",110],["Colombia",103],["Suiza",87],["China",85],["Eslovenia",84],["Rusia",73],["Japón",68],["Rumania",59],["Suecia",49],["Sudáfrica",48],["Lituania",44],["Ecuador",43],["Perú",39],["Líbano",38],["Finlandia",35],["Bulgaria",31],["Noruega",30],["Chile",29],["Nueva Zelanda",28],["Croacia",26],["Uruguay",23],["Paraguay",21],["Malta",18],["Andorra",17],["Puerto Rico",17],["Grecia",17],["Filipinas",15],["Bolivia",14],["Estonia",14],["Israel",12],["Ucrania",12],["India",10],["Luxemburgo",10],["Cuba",10],["Bosnia",8],["Panamá",8],["Albania",8],["Taiwán",7],["Letonia",7],["Marruecos",7],["Rep. Dominicana",6],["Chipre",5],["Moldavia",5],["Islas Feroe",5],["Nicaragua",5],["Serbia",5],["Bielorrusia",4],["El Salvador",4],["Jordania",3],["Tailandia",3],["Turquía",2],["Senegal",2],["Macedonia",2],["Benin",2],["Pakistán",2],["Costa Rica",2],["Camerún",2],["Argelia",2],["Nigeria",2],["Singapur",2],["Madagascar",2],["Egipto",2],["Omán",2],["Indonesia",1],["Camboya",1],["Congo",1],["Irán",1],["Uganda",1],["Dominica",1],["Sri Lanka",1],["Urbekistán",1],["Malasia",1],["Kenya",1],["Comores",1],["Gabón",1],["Armenia",1],["Guatemala",1],["Libia",1],["Timor Oriental",1],["Costa de Marfil",1],["Burkina Faso",1],["Ghana",1],["Malawi",1],["Namibia",1],["Angola",1]],"professions":[["Estudiantes",11130],["Empleados",10621],["Liberales",5680],["Tecnicos",5236],["Profesores",5015],["Obreros",2165],["Funcionarios",1781],["Jubilados",1702],["Parados",1002],["Amas de Casa",899],["Artistas",398],["Directivos",384],["Sacerdotes",348],["Agricultores",148],["Religiosas",101],["Marinos",71],["Deportistas",42],["Oikoten",5]],"startingCities":[["Sarria",12557],["S. Jean P. Port",3686],["Cebreiro",2735],["Tui",2491],["León",2299],["Ponferrada",2222],["Roncesvalles",1645],["Oporto",1294],["Oviedo - C.P.",1160],["Ferrol",1160],["Valença do Minho",1121],["Astorga",1112],["Irún",872],["Ourense",776],["Burgos",738],["Pamplona",685],["Vilafranca",664],["Triacastela",536],["Lugo - C.P.",441],["Resto Asturias - C.N",403],["Vilalba",401],["Ribadeo",399],["Resto C. León C.F.",352],["Le Puy",307],["Santander",304],["Francia - C.F.",287],["Resto Portugal",284],["Ponte de Lima",250],["Gijón",239],["Bilbao",222],["Logroño",201],["Sevilla",190],["Samos",187],["Oviedo - C.N.",180],["Avilés",172],["Lisboa",164],["Porriño",162],["Baiona",139],["Madrid - C.F.",124],["Barcelos",115],["San Sebastián",108],["Sahagún",105],["Salamanca",104],["Mondoñedo",101],["Rates, S. Pedro",101],["Resto Cantabria",99],["Alemania",98],["Resto País Vasco - C.N.",96],["Baamonde",96],["Holanda",94],["Zamora",93],["Somport",87],["Bélgica",77],["Braga",76],["Puebla de Sanabria",74],["Resto Asturias - C.P.",73],["Vega de Valcarce",67],["Frómista",66],["Laza",65],["Carrión de los Condes",61],["Muxia",59],["Lourdes",57],["Grandas de Salime - C.P.",56],["Lourenzá",52],["R.Pais Vasco C.F.",52],["Jaca",52],["Abadin",51],["Resto C. León - V.P.",50],["Hendaya",48],["Gudiña",45],["Granja de Moreruela",41],["Cataluña - C.F.",38],["Viana do Castelo",38],["Finisterra",37],["Chaves-Portugal",36],["Hospital de Orbigo",34],["Puente la Reina",31],["A Guarda",31],["Fonsagrada - C.P.",31],["Suiza",30],["Neda",29],["Salas",29],["Vigo",28],["Sto. Domingo de la Calzada",28],["Zaragoza",27],["Montserrat",27],["Guimaraes",26],["Coimbra",26],["Resto de Extremadura",25],["Tineo - C.P.",25],["Francia - C.N",22],["Fatima",22],["Cáceres",21],["Cadavo",20],["Resto Andalucia",20],["Mérida",19],["Navarra",19],["Xunqueira de Ambia",18],["Rabanal del Camino",17],["Povoa de Varzim",17],["Arles",17],["Molinaseca",17],["Vezelay",16],["Barcelona",16],["La Rioja",16],["Cast. la Mancha - C.F.",15],["Canfranc",15],["Austria",15],["Com. Valenciana - O.C.",11],["Estella",11],["Granada",11],["Verín",10],["Valencia O.C.",10],["Allariz",10],["Valladolid",10],["Polonia",9],["Castilla La Mancha VP",9],["Com. Valenciana - C.F.",9],["Madrid - V.P.",9],["XFonsagrada",9],["Viseu",8],["París",8],["Castilla la Mancha otros",8],["Italia",7],["Benavente",7],["A Rúa",7],["Grado",7],["Nájera",5],["Aveiro",5],["Ponferrada. C.Inv.",5],["Cruz de Ferro",4],["Malaga",4],["Fonfría",4],["Huelva",4],["Badajoz",3],["Castrojeriz",3],["Hungría",3],["Resto Europa",3],["Roma",3],["Murcia",2],["Cataluña - O.C.",2],["La Mesa",2],["La Bañeza",2],["Córdoba",2],["Irlanda C.F.",2],["Esposende",2],["O Barco de Valdeorras",1],["Viveiro",1],["Paradela",1],["San Juan de Ortega",1],["Sobrado dos Monxes",1],["Reino Unido C.F.",1],["Vincios",1],["Faro",1],["Inglaterra C.F.",1],["Egipto",1],["Quiroga",1],["Ventas de Narón",1],["Monforte de Lemos",1],["Irlanda C. Ing",1],["Andorra",1],["Vilabade",1],["Luxemburgo",1],["",1],["Dinamarca",1],["Guitiriz",1]],"startingRegions":[["Lugo",17627],["León",6950],["France",4535],["Portugal",3548],["Pontevedra",2852],["Navarra",2391],["Asturias",2346],["A Coruña",1286],["Gipuzkoa",1128],["Ourense",934],["Burgos",742],["Cantabria",403],["La Rioja",250],["Vizcaya",222],["Zamora",215],["Sevilla",210],["Madrid",133],["Palencia",127],["Salamanca",104],["Germany",98],["Holland",94],["Barcelona",83],["Belgium",77],["Huesca",67],["Badajoz",47],["Porgugal",36],["Albacete",32],["Valencia",30],["Switzerland",30],["Zaragoza",27],["Cáceres",21],["Austria",15],["Granada",11],["Valladolid",10],["Italy",10],["Poland",9],["Huelva",4],["Málaga",4],["Hungary",3],["Ireland",3],["Europe Other",3],["Córdoba",2],["UK",2],["Murcia",2],["Egypt",1],["Andorra",1],["Luxembourg",1],["City&nbsp;Was Blank",1],["Denmark",1]],"caminos":[["Frances-Camino de",31606],["Portugues-Camino",6402],["Norte-Camino de",3880],["Primitivo-Camino",1847],["Via de la Plata",1658],["Ingles-Camino",1190],["Muxia-Finisterre",96],["Otros caminos",48],["Otros caminos",1]]},"9":{"year":"2013","month":"9","pilgrims":30896,"gender":[["Hombre",16379],["Mujer",14517]],"transport":[["Pie",26770],["Bicicleta",4001],["Caballo",119],["Silla de ruedas",6]],"age":[["30 - 60",17793],["< 30",7009],["> 60",6094]],"motivation":[["Religioso y otros",16978],["Religioso",12482],["No religioso",1436]],"spanishFrom":[["Madrid",2679],["Andalucía",2454],["Cataluña",1820],["Comunidad Valenciana",1488],["Galicia",1219],["Castilla León",1210],["Castilla la Mancha",670],["Pais Vasco",561],["Asturias",429],["Canarias",399],["Extremadura",371],["Murcia",337],["Aragón",284],["Cantabria",179],["Baleares",153],["Navarra",132],["La Rioja",77],["Otra",44],["Ceuta",26],["Melilla",15]],"byCountry":[["España",14547],["Alemania",2614],["Italia",1846],["Estados Unidos",1378],["Portugal",1269],["Francia",1225],["Irlanda",1038],["Reino Unido",738],["Australia",566],["Canadá",563],["Polonia",532],["Brasil",419],["Belgica",331],["Holanda",329],["Dinamarca",314],["Austria",232],["Suiza",200],["Noruega",190],["México",175],["Suecia",173],["Corea",150],["Argentina",147],["República Checa",139],["Hungría",132],["Sudáfrica",122],["Finlandia",110],["Eslovaquia",108],["Nueva Zelanda",105],["Venezuela",100],["Japón",88],["Colombia",88],["Rusia",78],["China",70],["Ecuador",60],["Eslovenia",56],["Bulgaria",51],["Lituania",47],["Filipinas",39],["Israel",37],["Perú",34],["Rumania",34],["Chile",29],["Estonia",27],["Luxemburgo",25],["Islandia",25],["Uruguay",24],["Ucrania",23],["Malta",23],["Singapur",16],["Andorra",16],["Líbano",15],["Guatemala",15],["Cuba",12],["Puerto Rico",12],["Islas Feroe",11],["Malasia",11],["Croacia",11],["Emiratos Arabes Unidos",10],["Costa Rica",10],["Letonia",8],["Paraguay",7],["Turquía",6],["Taiwán",6],["Bielorrusia",5],["Bolivia",5],["Nicaragua",4],["Grecia",4],["Serbia",4],["El Salvador",4],["Panamá",4],["Armenia",3],["India",3],["Rep. Dominicana",3],["Jordania",3],["Honduras",3],["Indonesia",3],["Qatar",3],["Kazajistán",3],["Camerún",2],["Namibia",2],["Argelia",2],["Moldavia",2],["Liechtensein",2],["Albania",1],["Congo",1],["Egipto",1],["Macedonia",1],["Chipre",1],["Sri Lanka",1],["Trinidad y Tobago",1],["Kenya",1],["Omán",1],["Tailandia",1],["Nigeria",1],["Cabo Verde",1],["Mauricio",1],["Antillas Holandesas",1],["Eritrea",1],["Senegal",1]],"professions":[["Empleados",7983],["Jubilados",4528],["Estudiantes",4067],["Tecnicos",4020],["Liberales",3730],["Funcionarios",1820],["Profesores",1279],["Obreros",821],["Parados",740],["Amas de Casa",739],["Directivos",436],["Artistas",292],["Sacerdotes",163],["Agricultores",120],["Religiosas",68],["Marinos",46],["Deportistas",39],["Oikoten",5]],"startingCities":[["Sarria",7846],["S. Jean P. Port",3315],["León",1896],["Cebreiro",1487],["Tui",1450],["Oporto",1388],["Ponferrada",1387],["Roncesvalles",1143],["Astorga",880],["Oviedo - C.P.",719],["Burgos",618],["Pamplona",598],["Le Puy",576],["Ferrol",562],["Irún",496],["Valença do Minho",487],["Ourense",407],["Vilafranca",399],["Triacastela",270],["Francia - C.F.",256],["Resto Portugal",224],["Lugo - C.P.",218],["Sevilla",218],["Samos",190],["Resto Asturias - C.N",179],["Resto C. León C.F.",171],["Bilbao",171],["Santander",149],["Ribadeo",140],["Lisboa",134],["Ponte de Lima",120],["Logroño",120],["Alemania",107],["Oviedo - C.N.",102],["Gijón",87],["Somport",83],["Holanda",77],["Salamanca",77],["Avilés",74],["San Sebastián",67],["Sahagún",63],["Vilalba",62],["Braga",59],["Barcelos",58],["Resto País Vasco - C.N.",57],["Resto Cantabria",56],["Resto Asturias - C.P.",52],["Madrid - C.F.",51],["Bélgica",47],["Zamora",46],["Baamonde",46],["Puebla de Sanabria",46],["Rates, S. Pedro",43],["Chaves-Portugal",40],["Frómista",37],["Suiza",35],["Mondoñedo",33],["Granja de Moreruela",32],["Cataluña - C.F.",31],["Lourdes",31],["Arles",30],["Gudiña",28],["Hendaya",28],["Vega de Valcarce",28],["Jaca",27],["Carrión de los Condes",27],["Fonsagrada - C.P.",27],["Muxia",27],["Francia - C.N",27],["Fatima",26],["Sto. Domingo de la Calzada",26],["Viana do Castelo",26],["Madrid - V.P.",24],["Resto de Extremadura",24],["R.Pais Vasco C.F.",24],["Zaragoza",24],["Grandas de Salime - C.P.",23],["Finisterra",21],["Resto C. León - V.P.",21],["Rabanal del Camino",20],["Puente la Reina",20],["Molinaseca",19],["Valencia O.C.",19],["Guimaraes",19],["Porriño",18],["Vezelay",17],["Montserrat",17],["A Guarda",17],["Resto Andalucia",16],["XFonsagrada",16],["Mérida",15],["Coimbra",15],["Lourenzá",14],["Com. Valenciana - O.C.",13],["Cadavo",13],["Austria",13],["Vigo",13],["Hospital de Orbigo",12],["Castilla la Mancha otros",12],["Tineo - C.P.",12],["Laza",12],["Estella",11],["Cáceres",11],["Com. Valenciana - C.F.",11],["Allariz",11],["Verín",10],["Navarra",10],["Cast. la Mancha - C.F.",10],["París",8],["Neda",8],["Ponferrada. C.Inv.",8],["Barcelona",8],["Povoa de Varzim",7],["Polonia",7],["La Rioja",7],["Resto Europa",6],["Canfranc",6],["Esposende",6],["Abadin",6],["Salas",5],["Castrojeriz",5],["Xunqueira de Ambia",5],["Italia",5],["Córdoba",5],["Roma",4],["Benavente",4],["Irlanda C.F.",4],["Castilla La Mancha VP",4],["A Rúa",4],["Huelva",3],["Viseu",3],["Cruz de Ferro",3],["Cataluña - O.C.",3],["Resto Galicia",3],["Luxemburgo",3],["Reino Unido C.F.",3],["Faro",3],["Quiroga",2],["Hungría",2],["Valladolid",2],["La Mesa",2],["Guntín",2],["Badajoz",2],["Borres",2],["Aveiro",2],["Peñaseita",1],["Murcia",1],["Rusia",1],["O Barco de Valdeorras",1],["Jerusalem",1],["Valcarlos",1],["Inglaterra C.F.",1],["Vilabade",1],["Vincios",1],["Egipto",1],["Monforte de Lemos",1],["Grado",1],["Granada",1],["Sobrado dos Monxes",1],["Rábade",1],["Nájera",1],["Gonzar",1]],"startingRegions":[["Lugo",10373],["León",4907],["France",4371],["Portugal",2614],["Navarra",1783],["Pontevedra",1499],["Asturias",1259],["Gipuzkoa",644],["A Coruña",624],["Burgos",623],["Ourense",484],["Sevilla",234],["Cantabria",205],["Vizcaya",171],["La Rioja",154],["Zamora",128],["Germany",107],["Salamanca",77],["Holland",77],["Madrid",75],["Palencia",64],["Barcelona",59],["Belgium",47],["Valencia",43],["Badajoz",41],["Porgugal",40],["Switzerland",35],["Huesca",33],["Albacete",26],["Zaragoza",24],["Austria",13],["Cáceres",11],["Italy",9],["Poland",7],["Europe Other",6],["Córdoba",5],["Ireland",4],["Huelva",4],["UK",4],["Luxembourg",3],["Hungary",2],["Valladolid",2],["Murcia",1],["Russia",1],["Israel",1],["Egypt",1],["Granada",1]],"caminos":[["Frances-Camino de",22137],["Portugues-Camino",4119],["Norte-Camino de",1813],["Primitivo-Camino",1078],["Via de la Plata",1064],["Ingles-Camino",570],["Otros caminos",67],["Muxia-Finisterre",48]]},"10":{"year":"2013","month":"10","pilgrims":19608,"gender":[["Hombre",10622],["Mujer",8986]],"transport":[["Pie",17837],["Bicicleta",1692],["Caballo",74],["Silla de ruedas",5]],"age":[["30 - 60",11352],["> 60",4682],["< 30",3574]],"motivation":[["Religioso y otros",12181],["Religioso",6636],["No religioso",791]],"spanishFrom":[["Madrid",1313],["Andalucía",942],["Cataluña",807],["Galicia",664],["Comunidad Valenciana",626],["Castilla León",518],["Castilla la Mancha",346],["Pais Vasco",311],["Canarias",194],["Extremadura",138],["Murcia",128],["Asturias",126],["Baleares",118],["Aragón",113],["Navarra",94],["Cantabria",72],["La Rioja",37],["Otra",25],["Ceuta",10],["Melilla",2]],"byCountry":[["España",6584],["Alemania",1887],["Estados Unidos",1646],["Francia",1117],["Italia",1032],["Canadá",851],["Australia",691],["Reino Unido",632],["Portugal",598],["Irlanda",545],["Corea",381],["Brasil",306],["Holanda",281],["Polonia",233],["Suiza",225],["Dinamarca",215],["Belgica",190],["Argentina",184],["Noruega",164],["Austria",156],["Hungría",137],["Suecia",130],["Nueva Zelanda",116],["Finlandia",113],["Colombia",108],["México",104],["Japón",103],["Sudáfrica",97],["Venezuela",90],["Rusia",65],["República Checa",63],["Eslovaquia",53],["China",46],["Israel",37],["Ecuador",36],["Lituania",34],["Filipinas",30],["Eslovenia",27],["Uruguay",24],["Ucrania",23],["Bulgaria",22],["Perú",18],["Letonia",18],["Estonia",17],["Chile",16],["Rumania",16],["Taiwán",11],["Malta",9],["Rep. Dominicana",8],["Luxemburgo",7],["India",7],["Andorra",6],["Singapur",6],["Islandia",5],["Puerto Rico",5],["Líbano",4],["Cuba",4],["Croacia",4],["El Salvador",4],["Panamá",4],["Bolivia",3],["Armenia",3],["Jordania",3],["Costa Rica",3],["Malasia",3],["Paraguay",3],["Indonesia",2],["Honduras",2],["Irán",2],["Serbia",2],["Moldavia",2],["Kazajistán",2],["Albania",2],["Liechtensein",2],["Bielorrusia",2],["Mónaco",2],["Mauritania",2],["Vietnam",2],["Macedonia",1],["Grecia",1],["Libia",1],["Chipre",1],["Brunei",1],["Guyana",1],["Comores",1],["Cabo Verde",1],["Haití",1],["Turquía",1],["Islas Caimán",1],["Siria",1],["Trinidad y Tobago",1],["Argelia",1],["Camerún",1],["Groenlandia",1],["Jamaica",1],["Nigeria",1],["Bosnia",1],["Tuvalu",1],["Tailandia",1]],"professions":[["Empleados",4598],["Jubilados",3755],["Tecnicos",2565],["Liberales",2343],["Estudiantes",1899],["Funcionarios",949],["Profesores",904],["Parados",597],["Obreros",540],["Amas de Casa",478],["Directivos",364],["Artistas",287],["Sacerdotes",134],["Agricultores",86],["Religiosas",40],["Marinos",35],["Deportistas",21],["Oikoten",13]],"startingCities":[["S. Jean P. Port",4396],["Sarria",4174],["León",916],["Roncesvalles",824],["Cebreiro",797],["Oporto",791],["Ponferrada",585],["Tui",562],["Pamplona",511],["Le Puy",460],["Astorga",419],["Oviedo - C.P.",365],["Irún",345],["Burgos",300],["Francia - C.F.",276],["Sevilla",252],["Ferrol",237],["Valença do Minho",203],["Ourense",173],["Vilafranca",153],["Lisboa",134],["Lugo - C.P.",128],["Samos",113],["Resto C. León C.F.",102],["Ponte de Lima",102],["Resto Portugal",97],["Logroño",94],["Triacastela",87],["Vigo",86],["Santander",84],["Bilbao",74],["Alemania",69],["Resto Asturias - C.N",69],["Barcelos",68],["Somport",68],["Gijón",56],["Oviedo - C.N.",53],["Salamanca",51],["Madrid - C.F.",50],["Suiza",48],["Ribadeo",46],["Baamonde",45],["Holanda",42],["Lourdes",41],["Sahagún",41],["Zamora",35],["Hendaya",34],["Rates, S. Pedro",33],["Braga",33],["Avilés",31],["Bélgica",31],["San Sebastián",31],["Francia - C.N",31],["Resto País Vasco - C.N.",26],["Chaves-Portugal",24],["Resto Cantabria",24],["Granja de Moreruela",23],["Puebla de Sanabria",22],["Resto Andalucia",21],["Cáceres",19],["Arles",19],["Frómista",19],["Sto. Domingo de la Calzada",17],["Mérida",16],["Vezelay",15],["Navarra",15],["Cataluña - C.F.",15],["Finisterra",14],["Vilalba",14],["Carrión de los Condes",13],["Viana do Castelo",13],["Muxia",13],["Austria",13],["Puente la Reina",13],["Madrid - V.P.",13],["Resto Asturias - C.P.",12],["Zaragoza",12],["Hospital de Orbigo",12],["Gudiña",12],["Com. Valenciana - O.C.",12],["Rabanal del Camino",12],["Jaca",12],["Barcelona",11],["Montserrat",11],["Resto C. León - V.P.",10],["Huelva",10],["Resto Europa",10],["Resto de Extremadura",10],["Cadavo",10],["París",9],["R.Pais Vasco C.F.",9],["Valencia O.C.",9],["Canfranc",9],["Grandas de Salime - C.P.",9],["Fonsagrada - C.P.",8],["Vega de Valcarce",8],["Porriño",8],["Mondoñedo",8],["La Rioja",7],["Lourenzá",7],["Italia",7],["Verín",7],["Malaga",6],["Laza",6],["Tineo - C.P.",6],["Fatima",6],["Castilla la Mancha otros",5],["Castilla La Mancha VP",5],["Faro",5],["A Guarda",4],["Neda",4],["Cataluña - O.C.",4],["Cast. la Mancha - C.F.",4],["Coimbra",4],["Abadin",4],["Molinaseca",3],["Reino Unido C.Ing",3],["Ponferrada. C.Inv.",3],["A Rúa",3],["Granada",3],["Guimaraes",3],["Valladolid",3],["Estella",3],["XFonsagrada",2],["Viseu",2],["Paradela",2],["Córdoba",2],["Fonfría",2],["Eslovaquia",2],["Republica Checa",2],["Povoa de Varzim",2],["Benavente",2],["Reino Unido C.F.",2],["Rusia",1],["La Bañeza",1],["Salas",1],["San Juan de Ortega",1],["Sobrado",1],["Xunqueira de Ambia",1],["Com. Valenciana - C.F.",1],["Finlandia",1],["Dinamarca",1],["Roma",1],["Inglaterra C.F.",1],["Resto Africa",1],["Corredoiras",1]],"startingRegions":[["Lugo",5447],["France",5349],["León",2265],["Portugal",1496],["Navarra",1366],["Pontevedra",660],["Asturias",602],["Gipuzkoa",411],["Burgos",301],["Sevilla",273],["A Coruña",270],["Ourense",202],["La Rioja",118],["Cantabria",108],["Zamora",82],["Vizcaya",74],["Germany",69],["Madrid",63],["Salamanca",51],["Switzerland",48],["Holland",42],["Barcelona",41],["Palencia",32],["Belgium",31],["Badajoz",26],["Porgugal",24],["Valencia",22],["Huesca",21],["Cáceres",19],["Albacete",14],["Austria",13],["Zaragoza",12],["Huelva",10],["Europe Other",10],["Italy",8],["Málaga",6],["UK",6],["Granada",3],["Valladolid",3],["Córdoba",2],["Slovakia",2],["Czech Republic",2],["Russia",1],["Finland",1],["Denmark",1],["Africa",1]],"caminos":[["Frances-Camino de",14890],["Portugues-Camino",2156],["Norte-Camino de",987],["Via de la Plata",728],["Primitivo-Camino",540],["Ingles-Camino",244],["Otros caminos",36],["Muxia-Finisterre",27]]},"11":{"year":"2013","month":"11","pilgrims":4900,"gender":[["Hombre",2940],["Mujer",1960]],"transport":[["Pie",4511],["Bicicleta",374],["Caballo",15]],"age":[["30 - 60",2852],["< 30",1377],["> 60",671]],"motivation":[["Religioso y otros",3364],["Religioso",1322],["No religioso",214]],"spanishFrom":[["Galicia",404],["Andalucía",391],["Madrid",312],["Cataluña",244],["Comunidad Valenciana",186],["Castilla León",153],["Baleares",131],["Asturias",94],["Castilla la Mancha",78],["Murcia",53],["Pais Vasco",50],["Extremadura",48],["Canarias",41],["Navarra",29],["Aragón",28],["Cantabria",27],["La Rioja",8],["Otra",7],["Ceuta",3],["Melilla",1]],"byCountry":[["España",2288],["Corea",317],["Estados Unidos",276],["Alemania",254],["Francia",213],["Italia",192],["Australia",133],["Canadá",122],["Reino Unido",120],["Portugal",118],["Brasil",96],["Argentina",73],["Japón",51],["Holanda",50],["Irlanda",48],["Uruguay",45],["Polonia",45],["Austria",44],["Suiza",38],["México",31],["Venezuela",29],["Belgica",29],["Suecia",27],["Dinamarca",24],["Rusia",20],["República Checa",20],["Colombia",18],["Hungría",17],["Finlandia",15],["Sudáfrica",14],["Bulgaria",10],["Andorra",10],["Nueva Zelanda",10],["Noruega",7],["Chile",7],["Estonia",5],["Malta",5],["Rumania",5],["Israel",5],["Perú",5],["Eslovaquia",5],["Luxemburgo",4],["Puerto Rico",4],["Guatemala",3],["China",3],["Ecuador",3],["Bolivia",3],["Nigeria",3],["El Salvador",3],["Cuba",3],["Singapur",3],["Lituania",3],["Croacia",2],["India",2],["Taiwán",2],["Irán",1],["Serbia",1],["Letonia",1],["Marruecos",1],["Belice",1],["Costa Rica",1],["Malasia",1],["Honduras",1],["Madagascar",1],["Ucrania",1],["Guyana",1],["Eslovenia",1],["Panamá",1],["Kazajistán",1],["Islandia",1],["Guam",1],["Camerún",1],["Myanmar",1]],"professions":[["Empleados",1285],["Estudiantes",740],["Liberales",601],["Jubilados",539],["Tecnicos",449],["Parados",327],["Funcionarios",273],["Profesores",212],["Amas de Casa",133],["Obreros",88],["Directivos",78],["Artistas",77],["Agricultores",37],["Sacerdotes",23],["Religiosas",17],["Marinos",16],["Deportistas",5]],"startingCities":[["Sarria",1027],["S. Jean P. Port",1010],["León",223],["Cebreiro",220],["Ponferrada",190],["Roncesvalles",176],["Ourense",175],["Pamplona",121],["Oporto",121],["Tui",102],["Francia - C.F.",96],["Astorga",91],["Sevilla",85],["Le Puy",73],["Irún",71],["Oviedo - C.P.",65],["Ferrol",62],["Valença do Minho",58],["Vilafranca",55],["Burgos",52],["Lisboa",38],["Sahagún",37],["Lugo - C.P.",33],["Ponte de Lima",30],["Madrid - C.F.",30],["Oviedo - C.N.",29],["Bilbao",28],["Resto C. León C.F.",26],["Alemania",23],["Somport",23],["Logroño",22],["Ribadeo",22],["Francia - C.N",20],["Resto Asturias - C.P.",18],["Triacastela",18],["Resto Portugal",16],["Madrid - V.P.",15],["Suiza",14],["Resto Asturias - C.N",13],["Montserrat",12],["Mérida",12],["Rates, S. Pedro",11],["San Sebastián",11],["Samos",11],["Arles",11],["Santander",10],["Granja de Moreruela",10],["Valencia O.C.",10],["Gijón",9],["Holanda",9],["Salamanca",8],["Zamora",8],["Braga",8],["Resto País Vasco - C.N.",8],["Jaca",7],["Baiona",7],["Bélgica",7],["Gudiña",7],["Vezelay",7],["Barcelona",7],["Lourdes",7],["Guimaraes",6],["Vilalba",6],["Chaves-Portugal",6],["Finisterra",6],["Italia",6],["Cataluña - C.F.",6],["Barcelos",5],["Resto Andalucia",5],["Com. Valenciana - O.C.",5],["Cataluña - O.C.",5],["Navarra",5],["Rabanal del Camino",5],["Vega de Valcarce",4],["Ponferrada. C.Inv.",4],["Cáceres",4],["Hendaya",4],["Frómista",4],["Sto. Domingo de la Calzada",4],["París",4],["Vigo",4],["Carrión de los Condes",4],["Neda",4],["Puente la Reina",4],["Canfranc",4],["Castilla la Mancha otros",4],["Fonsagrada - C.P.",3],["Puebla de Sanabria",3],["Granada",3],["Hospital de Orbigo",3],["Muxia",3],["R.Pais Vasco C.F.",3],["Murcia",3],["Laza",3],["Mondoñedo",2],["Viana do Castelo",2],["Resto Cantabria",2],["Baamonde",2],["Resto Europa",2],["Cast. la Mancha - C.F.",2],["Castilla La Mancha VP",1],["Verín",1],["Avilés",1],["Irlanda C.F.",1],["Dinamarca",1],["Reino Unido C.F.",1],["Lourenzá",1],["Abadin",1],["XSan Sebastian",1],["Vegadeo",1],["Finlandia",1],["Molinaseca",1],["Resto de Extremadura",1],["Zaragoza",1],["Resto C. León - V.P.",1],["Las Médulas",1],["Coimbra",1],["Valladolid",1],["La Rioja",1],["Grandas de Salime - C.P.",1],["Valcarlos",1]],"startingRegions":[["Lugo",1346],["France",1255],["León",641],["Navarra",307],["Portugal",296],["Ourense",186],["Asturias",137],["Pontevedra",113],["Gipuzkoa",94],["Sevilla",90],["A Coruña",75],["Burgos",52],["Madrid",45],["Barcelona",30],["Vizcaya",28],["La Rioja",27],["Germany",23],["Zamora",21],["Valencia",15],["Switzerland",14],["Badajoz",13],["Cantabria",12],["Huesca",11],["Holland",9],["Salamanca",8],["Palencia",8],["Albacete",7],["Belgium",7],["Porgugal",6],["Italy",6],["Cáceres",4],["Granada",3],["Murcia",3],["Europe Other",2],["Valladolid",1],["Denmark",1],["UK",1],["Finland",1],["Zaragoza",1],["Ireland",1]],"caminos":[["Frances-Camino de",3673],["Portugues-Camino",409],["Via de la Plata",349],["Norte-Camino de",242],["Primitivo-Camino",120],["Ingles-Camino",66],["Otros caminos",32],["Muxia-Finisterre",9]]},"12":{"year":"2013","month":"12","pilgrims":1659,"gender":[["Hombre",1077],["Mujer",582]],"transport":[["Pie",1548],["Bicicleta",105],["Silla de ruedas",5],["Caballo",1]],"age":[["30 - 60",1069],["< 30",403],["> 60",187]],"motivation":[["Religioso y otros",1061],["Religioso",506],["No religioso",92]],"spanishFrom":[["Galicia",224],["Madrid",149],["Cataluña",89],["Andalucía",82],["Pais Vasco",73],["Asturias",70],["Castilla León",69],["Comunidad Valenciana",54],["Baleares",33],["Castilla la Mancha",31],["Extremadura",19],["Aragón",15],["Murcia",12],["La Rioja",11],["Navarra",9],["Canarias",5],["Cantabria",5],["Otra",1]],"byCountry":[["España",951],["Corea",100],["Portugal",98],["Italia",73],["Alemania",63],["Francia",56],["Estados Unidos",38],["Canadá",28],["Holanda",22],["Australia",21],["Reino Unido",20],["Brasil",20],["Japón",15],["Belgica",13],["Irlanda",12],["Venezuela",12],["Argentina",11],["Suiza",10],["México",9],["Guatemala",9],["Austria",8],["Dinamarca",8],["Hungría",8],["Polonia",7],["Rusia",6],["Colombia",4],["China",4],["Nueva Zelanda",4],["Bulgaria",3],["República Checa",3],["Rumania",3],["Eslovenia",2],["Ecuador",2],["Suecia",2],["Sudáfrica",1],["Turquía",1],["Malasia",1],["Filipinas",1],["Eslovaquia",1],["Panamá",1],["Perú",1],["Croacia",1],["Groenlandia",1],["Finlandia",1],["Tailandia",1],["Taiwán",1],["Moldavia",1],["Lituania",1]],"professions":[["Empleados",442],["Liberales",206],["Estudiantes",188],["Tecnicos",145],["Parados",122],["Jubilados",116],["Profesores",101],["Funcionarios",98],["Obreros",95],["Amas de Casa",55],["Artistas",40],["Directivos",21],["Agricultores",13],["Religiosas",7],["Marinos",6],["Sacerdotes",4]],"startingCities":[["Sarria",250],["S. Jean P. Port",233],["Roncesvalles",132],["Cebreiro",130],["Tui",75],["Ponferrada",61],["Sevilla",59],["Oporto",49],["León",49],["Lugo - C.P.",44],["Pamplona",43],["Valença do Minho",40],["Astorga",33],["Francia - C.F.",29],["Ferrol",28],["Vilafranca",27],["Oviedo - C.P.",25],["Burgos",23],["Zamora",22],["Le Puy",18],["Fonsagrada - C.P.",17],["Rates, S. Pedro",14],["Ourense",13],["Resto Portugal",12],["Alemania",11],["Irún",10],["Lisboa",10],["Resto C. León C.F.",10],["Povoa de Varzim",9],["Vilalba",8],["Logroño",8],["Finisterra",6],["Resto Asturias - C.N",6],["Montserrat",6],["Barcelos",5],["Suiza",5],["Somport",5],["Ponte de Lima",5],["Madrid - C.F.",5],["Samos",4],["Austria",4],["Ponferrada. C.Inv.",4],["Braga",4],["Puente la Reina",4],["Arles",4],["Salamanca",3],["Oviedo - C.N.",3],["Granja de Moreruela",3],["Valencia O.C.",3],["Italia",3],["Chaves-Portugal",3],["Bilbao",3],["Gijón",3],["Vezelay",3],["Zaragoza",3],["Lourenzá",3],["Triacastela",3],["Com. Valenciana - C.F.",3],["París",3],["Baamonde",2],["Porriño",2],["Vigo",2],["Polonia",2],["Baiona",2],["Navarra",2],["Malaga",2],["Grandas de Salime - C.P.",2],["Jaca",2],["Tineo - C.P.",2],["Mérida",2],["Resto Andalucia",2],["Lourdes",2],["Sto. Domingo de la Calzada",2],["Bélgica",2],["Sahagún",2],["Francia - C.N",2],["Barcelona",1],["Cataluña - C.F.",1],["La Rioja",1],["Resto Europa",1],["Murcia",1],["Frómista",1],["XSan Sebastian",1],["Salas",1],["Vega de Valcarce",1],["Estella",1],["Republica Checa",1],["Hospital de Orbigo",1],["Badajoz",1],["Gudiña",1],["Rabanal del Camino",1],["Jerusalem",1],["Ribadeo",1],["Resto Asturias - C.P.",1],["Canfranc",1],["Puebla de Sanabria",1],["Resto de Extremadura",1],["La Mesa",1],["Castilla la Mancha otros",1],["Rusia",1]],"startingRegions":[["Lugo",462],["France",299],["León",189],["Navarra",182],["Portugal",148],["Pontevedra",81],["Sevilla",61],["Asturias",44],["A Coruña",34],["Zamora",26],["Burgos",23],["Ourense",14],["Germany",11],["Gipuzkoa",11],["La Rioja",11],["Barcelona",8],["Valencia",6],["Switzerland",5],["Madrid",5],["Badajoz",4],["Austria",4],["Italy",3],["Vizcaya",3],["Zaragoza",3],["Huesca",3],["Salamanca",3],["Porgugal",3],["Málaga",2],["Belgium",2],["Poland",2],["Russia",1],["Murcia",1],["Palencia",1],["Czech Republic",1],["Israel",1],["Albacete",1],["Europe Other",1]],"caminos":[["Frances-Camino de",1139],["Portugues-Camino",229],["Via de la Plata",113],["Primitivo-Camino",93],["Norte-Camino de",42],["Ingles-Camino",28],["Otros caminos",9],["Muxia-Finisterre",6]]},"all":{"year":"2013","month":"","pilgrims":215880,"gender":[["Hombre",117873],["Mujer",98007]],"transport":[["Pie",188191],["Bicicleta",26646],["Caballo",977],["Silla de ruedas",66]],"age":[["30 - 60",121305],["< 30",61114],["> 60",33461]],"motivation":[["Religioso y otros",117785],["Religioso",86291],["No religioso",11804]],"spanishFrom":[["Madrid",20098],["Andalucía",17880],["Cataluña",12258],["Comunidad Valenciana",11908],["Galicia",7929],["Castilla León",7584],["Castilla la Mancha",5667],["Pais Vasco",5135],["Extremadura",3245],["Murcia",2788],["Canarias",2458],["Asturias",2115],["Aragón",2060],["Baleares",1338],["Navarra",1267],["Cantabria",971],["La Rioja",598],["Otra",312],["Ceuta",158],["Melilla",122]],"byCountry":[["España",105891],["Alemania",16203],["Italia",15621],["Portugal",10698],["Estados Unidos",10125],["Francia",8305],["Irlanda",5012],["Reino Unido",4207],["Canadá",3373],["Australia",3098],["Holanda",2890],["Corea",2774],["Polonia",2515],["Brasil",2431],["Belgica",1857],["Dinamarca",1757],["Austria",1711],["Suiza",1276],["México",1173],["Argentina",1090],["Suecia",1056],["Hungría",954],["Japón",840],["Noruega",839],["República Checa",769],["Venezuela",734],["Sudáfrica",727],["Finlandia",709],["Colombia",680],["Eslovaquia",560],["Rusia",526],["Nueva Zelanda",520],["China",431],["Eslovenia",367],["Bulgaria",295],["Ecuador",292],["Rumania",262],["Lituania",255],["Uruguay",218],["Chile",208],["Perú",174],["Ucrania",143],["Filipinas",142],["Israel",141],["Puerto Rico",120],["Estonia",115],["Malta",108],["Croacia",100],["Singapur",100],["Andorra",99],["Taiwán",88],["Luxemburgo",84],["Líbano",74],["Letonia",70],["Grecia",63],["Bolivia",60],["Islandia",58],["Guatemala",58],["Costa Rica",52],["Paraguay",49],["Cuba",47],["India",43],["Rep. Dominicana",43],["El Salvador",41],["Malasia",39],["Panamá",32],["Turquía",24],["Bielorrusia",23],["Islas Feroe",23],["Nicaragua",19],["Marruecos",18],["Albania",18],["Serbia",18],["Jordania",18],["Indonesia",15],["Irán",14],["Moldavia",13],["Emiratos Arabes Unidos",13],["Tailandia",13],["Honduras",13],["Bosnia",12],["Chipre",10],["Angola",9],["Vietnam",9],["Kazajistán",9],["Pakistán",9],["Armenia",9],["Argelia",8],["Namibia",8],["Nigeria",8],["Camerún",7],["Mauritania",7],["Sri Lanka",6],["Congo",6],["Liechtensein",6],["Egipto",6],["Bangladesh",5],["Belice",4],["Senegal",4],["Dominica",4],["Guyana",4],["Macedonia",4],["Uganda",3],["Jamaica",3],["Kuwait",3],["Tuvalu",3],["Zimbabwe",3],["Georgia",3],["Túnez",3],["Cabo Verde",3],["Kenya",3],["Comores",3],["Libia",3],["Madagascar",3],["Omán",3],["Qatar",3],["Ghana",2],["Tanzania",2],["Guinea",2],["Mongolia",2],["Benin",2],["Groenlandia",2],["Mauricio",2],["Siria",2],["Trinidad y Tobago",2],["Mónaco",2],["I. Reunión",2],["Tayikistán",1],["Laos",1],["Seychelles",1],["Irak",1],["Guinea - Bissau",1],["Montenegro",1],["Aruba",1],["Rwanda",1],["Bermudas",1],["Zambia",1],["Camboya",1],["Urbekistán",1],["Gabón",1],["Timor Oriental",1],["Costa de Marfil",1],["Burkina Faso",1],["Malawi",1],["Kirguistán",1],["Martinica",1],["Antillas Holandesas",1],["Eritrea",1],["Etiopía",1],["Brunei",1],["Haití",1],["Islas Caimán",1],["Santa Lucía",1],["Guam",1],["Myanmar",1]],"professions":[["Empleados",48615],["Estudiantes",40360],["Jubilados",25712],["Liberales",24952],["Tecnicos",24372],["Profesores",15669],["Funcionarios",10144],["Obreros",7589],["Parados",5508],["Amas de Casa",4893],["Directivos",2777],["Artistas",2083],["Sacerdotes",1327],["Agricultores",780],["Religiosas",504],["Marinos",319],["Deportistas",244],["Oikoten",32]],"startingCities":[["Sarria",52063],["S. Jean P. Port",26569],["León",10739],["Cebreiro",10722],["Tui",9394],["Oporto",8859],["Ponferrada",8365],["Roncesvalles",8268],["Astorga",6053],["Valença do Minho",4380],["Pamplona",4321],["Ferrol",4286],["Oviedo - C.P.",4156],["Burgos",3613],["Irún",3389],["Le Puy",3364],["Ourense",3221],["Vilafranca",2735],["Sevilla",2292],["Triacastela",1957],["Francia - C.F.",1955],["Lugo - C.P.",1704],["Resto Portugal",1602],["Resto C. León C.F.",1419],["Ribadeo",1251],["Resto Asturias - C.N",1250],["Samos",1180],["Lisboa",1067],["Santander",1023],["Ponte de Lima",966],["Bilbao",918],["Logroño",891],["Vilalba",848],["Oviedo - C.N.",803],["Holanda",723],["Gijón",718],["Rates, S. Pedro",635],["Alemania",617],["Madrid - C.F.",571],["Salamanca",567],["Somport",558],["Barcelos",544],["Avilés",505],["Mondoñedo",485],["Porriño",442],["Sahagún",428],["Zamora",422],["San Sebastián",401],["Braga",399],["Bélgica",386],["Chaves-Portugal",368],["Resto País Vasco - C.N.",362],["Puebla de Sanabria",335],["Baamonde",327],["Resto Asturias - C.P.",309],["Resto Cantabria",309],["Lourdes",295],["Vega de Valcarce",273],["Suiza",269],["Muxia",265],["Gudiña",237],["Frómista",229],["Jaca",219],["Fonsagrada - C.P.",215],["Baiona",202],["Carrión de los Condes",192],["Francia - C.N",192],["Finisterra",189],["Puente la Reina",187],["Hendaya",187],["Cataluña - C.F.",182],["Guimaraes",178],["Grandas de Salime - C.P.",177],["Vigo",176],["Vezelay",176],["Granja de Moreruela",175],["R.Pais Vasco C.F.",169],["Lourenzá",168],["Viana do Castelo",161],["Sto. Domingo de la Calzada",158],["Hospital de Orbigo",157],["Resto Andalucia",152],["Rabanal del Camino",152],["Resto C. León - V.P.",149],["Arles",145],["Mérida",144],["Laza",144],["Valencia O.C.",143],["Zaragoza",129],["Navarra",129],["Cáceres",129],["Coimbra",123],["Montserrat",122],["Tineo - C.P.",117],["Abadin",114],["Madrid - V.P.",112],["Neda",107],["Fatima",102],["Canfranc",97],["Resto de Extremadura",97],["A Guarda",94],["Barcelona",92],["Cadavo",87],["Verín",87],["Molinaseca",87],["París",84],["Austria",82],["Povoa de Varzim",75],["Com. Valenciana - C.F.",74],["Estella",73],["Ponferrada. C.Inv.",72],["La Rioja",68],["Com. Valenciana - O.C.",68],["Granada",67],["Resto Europa",67],["Cast. la Mancha - C.F.",65],["Xunqueira de Ambia",65],["Viseu",63],["Fonfría",53],["Italia",51],["Monforte de Lemos",49],["Castilla la Mancha otros",44],["Salas",43],["Castilla La Mancha VP",41],["Malaga",40],["Esposende",38],["Allariz",38],["Rábade",37],["Huelva",35],["Roma",30],["Polonia",29],["Aveiro",29],["Castrojeriz",28],["XFonsagrada",27],["Valladolid",26],["Córdoba",26],["Benavente",24],["Nájera",22],["Cruz de Ferro",22],["Cataluña - O.C.",22],["Reino Unido C.F.",20],["Faro",17],["La Mesa",16],["Grado",16],["A Rúa",15],["Irlanda C.F.",14],["Badajoz",13],["Murcia",13],["Republica Checa",13],["Resto Asturias",11],["Valcarlos",8],["Hungría",7],["San Juan de Ortega",7],["Luxemburgo",6],["La Bañeza",6],["Reino Unido C.Ing",6],["Inglaterra C.F.",6],["Dinamarca",5],["O Barco de Valdeorras",5],["Resto Galicia",5],["",4],["Chantada",4],["Andorra",4],["Oviedo",4],["Borres",3],["Rusia",3],["Guntín",3],["Eslovaquia",3],["Quiroga",3],["Resto C. León",3],["Paradela",3],["Resto Africa",3],["Finlandia",3],["Vincios",3],["Egipto",2],["Sobrado",2],["XSan Sebastian",2],["Vegadeo",2],["Jerusalem",2],["Ventas de Narón",2],["Betanzos",2],["Ortigueira",2],["Vilabade",2],["Sobrado dos Monxes",2],["Corredoiras",2],["Cea",1],["Irlanda C. Ing",1],["Pardellas",1],["Guitiriz",1],["Peñaseita",1],["Viveiro",1],["Covelo",1],["Gonzar",1],["Leyre",1],["Las Médulas",1]],"startingRegions":[["Lugo",71267],["France",33525],["León",30662],["Portugal",19200],["Navarra",12987],["Pontevedra",10313],["Asturias",8131],["A Coruña",4865],["Gipuzkoa",4323],["Ourense",3850],["Burgos",3648],["Sevilla",2444],["Cantabria",1332],["La Rioja",1139],["Zamora",956],["Vizcaya",918],["Holland",723],["Madrid",683],["Germany",617],["Salamanca",567],["Palencia",421],["Barcelona",418],["Belgium",386],["Porgugal",368],["Huesca",316],["Valencia",285],["Switzerland",269],["Badajoz",254],["Albacete",150],["Zaragoza",129],["Cáceres",129],["Austria",82],["Italy",81],["Huelva",72],["Granada",67],["Europe Other",67],["Málaga",40],["UK",32],["Poland",29],["Córdoba",26],["Valladolid",26],["Ireland",15],["Czech Republic",13],["Murcia",13],["Hungary",7],["Luxembourg",6],["Denmark",5],["Andorra",4],["City&nbsp;Was Blank",4],["Africa",3],["Finland",3],["Slovakia",3],["Russia",3],["Egypt",2],["Israel",2]],"caminos":[["Frances-Camino de",151761],["Portugues-Camino",29550],["Norte-Camino de",13393],["Via de la Plata",9016],["Primitivo-Camino",6854],["Ingles-Camino",4404],["Muxia-Finisterre",454],["Otros caminos",448]]}},"2014":{"1":{"year":"2014","month":"1","pilgrims":906,"gender":[["Hombre",596],["Mujer",310]],"transport":[["Pie",862],["Bicicleta",43],["Silla de ruedas",1]],"age":[["30 - 60",511],["< 30",333],["> 60",62]],"motivation":[["Religioso y otros",611],["Religioso",252],["No religioso",43]],"spanishFrom":[["Madrid",108],["Galicia",67],["Andalucía",56],["Cataluña",47],["Comunidad Valenciana",32],["Castilla León",26],["Baleares",14],["Aragón",13],["Pais Vasco",11],["Castilla la Mancha",10],["Murcia",9],["Asturias",8],["La Rioja",4],["Extremadura",4],["Canarias",3],["Cantabria",2],["Navarra",1],["Otra",1]],"byCountry":[["España",416],["Corea",120],["Italia",69],["Portugal",49],["Estados Unidos",29],["Alemania",22],["Brasil",22],["Francia",18],["México",18],["China",13],["Argentina",12],["Australia",12],["Japón",12],["Reino Unido",10],["Canadá",9],["Holanda",7],["Uruguay",6],["Irlanda",6],["Rusia",6],["Belgica",5],["Austria",5],["Nueva Zelanda",4],["Dinamarca",3],["Rumania",3],["Guatemala",3],["Venezuela",3],["Ucrania",2],["Polonia",2],["Ecuador",2],["Colombia",2],["Eslovaquia",2],["Hungría",2],["Egipto",1],["Andorra",1],["Suecia",1],["Marruecos",1],["Paraguay",1],["Puerto Rico",1],["Letonia",1],["Bulgaria",1],["República Checa",1],["Perú",1],["Finlandia",1],["Suiza",1]],"professions":[["Estudiantes",236],["Empleados",191],["Liberales",114],["Tecnicos",78],["Profesores",74],["Obreros",43],["Funcionarios",42],["Jubilados",37],["Parados",32],["Directivos",15],["Artistas",12],["Religiosas",9],["Sacerdotes",7],["Amas de Casa",7],["Marinos",6],["Agricultores",3]],"startingCities":[["Sarria",212],["S. Jean P. Port",127],["Oporto",51],["León",50],["Tui",46],["Cebreiro",39],["Roncesvalles",34],["Ferrol",32],["Ponferrada",31],["Astorga",24],["Pamplona",24],["Valença do Minho",20],["Oviedo - C.P.",20],["Burgos",15],["Fonsagrada - C.P.",14],["Avilés",10],["Ourense",9],["Vilalba",8],["Tineo - C.P.",8],["Ribadeo",8],["Lugo - C.P.",8],["Resto Portugal",7],["Resto Asturias - C.P.",6],["Sevilla",6],["Somport",6],["Vilafranca",6],["Resto C. León C.F.",5],["Irún",5],["Francia - C.F.",5],["Triacastela",4],["Zamora",4],["Ponte de Lima",4],["Oviedo - C.N.",3],["Le Puy",3],["Sahagún",3],["Logroño",3],["Lisboa",2],["Hospital de Orbigo",2],["Povoa de Varzim",2],["Resto Asturias - C.N",2],["Bilbao",2],["Vigo",2],["San Sebastián",2],["Frómista",2],["Madrid - V.P.",2],["Xunqueira de Ambia",2],["Cadavo",2],["Arles",2],["Cataluña - O.C.",1],["Canfranc",1],["Sto. Domingo de la Calzada",1],["Jerusalem",1],["Finisterra",1],["Vega de Valcarce",1],["Hendaya",1],["Resto C. León - V.P.",1],["Lourenzá",1],["Jaca",1],["Salamanca",1],["Ponferrada. C.Inv.",1],["Barcelona",1],["Lourdes",1],["Navarra",1],["París",1],["Barcelos",1],["Puente la Reina",1],["Resto País Vasco - C.N.",1],["Cataluña - C.F.",1],["Fatima",1],["Montserrat",1]],"startingRegions":[["Lugo",296],["France",146],["León",124],["Portugal",88],["Navarra",60],["Asturias",49],["Pontevedra",48],["A Coruña",33],["Burgos",15],["Ourense",11],["Gipuzkoa",8],["Sevilla",6],["Zamora",4],["La Rioja",4],["Barcelona",4],["Vizcaya",2],["Palencia",2],["Madrid",2],["Huesca",2],["Israel",1],["Salamanca",1]],"caminos":[["Frances-Camino de",609],["Portugues-Camino",136],["Primitivo-Camino",58],["Norte-Camino de",43],["Ingles-Camino",32],["Via de la Plata",25],["Otros caminos",2],["Muxia-Finisterre",1]]},"2":{"year":"2014","month":"2","pilgrims":970,"gender":[["Hombre",623],["Mujer",347]],"transport":[["Pie",945],["Bicicleta",24],["Caballo",1]],"age":[["30 - 60",452],["< 30",431],["> 60",87]],"motivation":[["Religioso y otros",461],["Religioso",452],["No religioso",57]],"spanishFrom":[["Madrid",117],["Andalucía",77],["Comunidad Valenciana",64],["Asturias",53],["Galicia",45],["Cataluña",42],["Castilla León",29],["Castilla la Mancha",17],["Baleares",12],["Extremadura",7],["Murcia",7],["Canarias",7],["Pais Vasco",5],["La Rioja",4],["Navarra",4],["Aragón",3],["Otra",1],["Cantabria",1]],"byCountry":[["España",495],["Corea",100],["Irlanda",76],["Alemania",42],["Italia",34],["Portugal",27],["Japón",24],["Francia",22],["Estados Unidos",22],["Australia",18],["Reino Unido",14],["Brasil",9],["Holanda",9],["Argentina",8],["China",8],["Chile",5],["Suiza",5],["México",4],["Austria",4],["Hungría",4],["Noruega",4],["Canadá",3],["Polonia",3],["República Checa",3],["Rusia",2],["Singapur",2],["Finlandia",2],["Rumania",2],["Letonia",2],["Sudáfrica",2],["Lituania",1],["Siria",1],["Bulgaria",1],["Venezuela",1],["Perú",1],["Indonesia",1],["Puerto Rico",1],["Taiwán",1],["Colombia",1],["Croacia",1],["Belgica",1],["Uruguay",1],["Dinamarca",1],["Grecia",1],["Suecia",1]],"professions":[["Estudiantes",338],["Empleados",225],["Liberales",98],["Jubilados",64],["Tecnicos",45],["Profesores",43],["Parados",42],["Funcionarios",31],["Obreros",25],["Directivos",18],["Artistas",11],["Agricultores",10],["Religiosas",7],["Amas de Casa",7],["Sacerdotes",5],["Marinos",1]],"startingCities":[["Sarria",269],["S. Jean P. Port",128],["Roncesvalles",53],["Sevilla",41],["León",41],["Ponferrada",39],["Valença do Minho",37],["Pamplona",35],["Tui",32],["Oporto",30],["Cebreiro",29],["Ourense",27],["Ferrol",22],["Ribadeo",17],["Samos",16],["Oviedo - C.P.",14],["Astorga",13],["Salamanca",12],["Vilafranca",10],["Lugo - C.P.",8],["Sahagún",8],["Irún",7],["Logroño",6],["Lisboa",5],["Resto Asturias - C.N",4],["Burgos",4],["Resto Asturias - C.P.",4],["Zamora",4],["Resto Portugal",4],["Ponte de Lima",3],["Triacastela",3],["Madrid - C.F.",3],["Francia - C.F.",3],["Cataluña - C.F.",2],["Montserrat",2],["Córdoba",2],["Laza",2],["Vezelay",2],["Rabanal del Camino",2],["Francia - C.N",2],["Gudiña",2],["Fonsagrada - C.P.",1],["Finlandia",1],["La Rioja",1],["Badajoz",1],["París",1],["Oviedo - C.N.",1],["Frómista",1],["Viana do Castelo",1],["Alemania",1],["Jaca",1],["Rates, S. Pedro",1],["Puente la Reina",1],["Vegadeo",1],["Resto C. León C.F.",1],["Finisterra",1],["Zaragoza",1],["Braga",1],["Eslovaquia",1],["Vilalba",1],["Navarra",1],["Resto C. León - V.P.",1],["San Sebastián",1],["Bilbao",1]],"startingRegions":[["Lugo",344],["France",136],["León",115],["Navarra",90],["Portugal",82],["Sevilla",41],["Pontevedra",32],["Ourense",31],["Asturias",24],["A Coruña",23],["Salamanca",12],["Gipuzkoa",8],["La Rioja",7],["Burgos",4],["Zamora",4],["Barcelona",4],["Madrid",3],["Córdoba",2],["Finland",1],["Badajoz",1],["Palencia",1],["Vizcaya",1],["Germany",1],["Huesca",1],["Zaragoza",1],["Slovakia",1]],"caminos":[["Frances-Camino de",679],["Portugues-Camino",114],["Via de la Plata",92],["Norte-Camino de",35],["Primitivo-Camino",27],["Ingles-Camino",22],["Muxia-Finisterre",1]]},"3":{"year":"2014","month":"3","pilgrims":3150,"gender":[["Hombre",1959],["Mujer",1191]],"transport":[["Pie",2877],["Bicicleta",268],["Caballo",4],["Silla de ruedas",1]],"age":[["30 - 60",1713],["< 30",1136],["> 60",301]],"motivation":[["Religioso y otros",1723],["Religioso",1245],["No religioso",182]],"spanishFrom":[["Castilla León",267],["Madrid",218],["Andalucía",217],["Comunidad Valenciana",185],["Galicia",171],["Cataluña",139],["Castilla la Mancha",139],["Pais Vasco",46],["Baleares",34],["Murcia",29],["Asturias",20],["Canarias",19],["Extremadura",15],["Navarra",10],["Aragón",8],["Cantabria",7],["Otra",3],["La Rioja",2]],"byCountry":[["España",1529],["Alemania",402],["Portugal",273],["Estados Unidos",149],["Italia",95],["Corea",63],["Reino Unido",59],["Francia",57],["Brasil",54],["Japón",42],["Argentina",34],["Polonia",29],["México",27],["Holanda",26],["Canadá",25],["Belgica",21],["Suiza",18],["Australia",18],["Venezuela",17],["Dinamarca",15],["Colombia",14],["Austria",13],["República Checa",13],["Irlanda",11],["Hungría",11],["Lituania",11],["Rusia",10],["Noruega",9],["Chile",8],["Ecuador",7],["Finlandia",7],["Filipinas",7],["Letonia",6],["Uruguay",5],["Suecia",5],["Grecia",5],["Rumania",5],["Andorra",4],["Ucrania",4],["China",4],["Eslovaquia",4],["Croacia",4],["Perú",3],["Nueva Zelanda",3],["Eslovenia",3],["Costa Rica",3],["Sudáfrica",2],["Paraguay",2],["Bielorrusia",2],["Kazajistán",1],["Bolivia",1],["Angola",1],["India",1],["Pakistán",1],["Singapur",1],["Estonia",1],["Armenia",1],["Guatemala",1],["Puerto Rico",1],["Luxemburgo",1],["Cuba",1]],"professions":[["Estudiantes",789],["Empleados",555],["Liberales",400],["Tecnicos",359],["Funcionarios",295],["Jubilados",220],["Obreros",134],["Profesores",98],["Parados",94],["Amas de Casa",69],["Directivos",56],["Artistas",25],["Sacerdotes",23],["Religiosas",12],["Agricultores",10],["Marinos",9],["Deportistas",1],["Oikoten",1]],"startingCities":[["Sarria",845],["Oporto",252],["S. Jean P. Port",219],["León",172],["Ponferrada",127],["Ferrol",121],["Tui",112],["Nájera",107],["Cebreiro",103],["Roncesvalles",81],["Valença do Minho",78],["Samos",63],["Pamplona",58],["Astorga",52],["Burgos",44],["Ponte de Lima",41],["Vilafranca",41],["Ourense",41],["Oviedo - C.P.",39],["Lisboa",35],["Triacastela",34],["Sevilla",28],["Lugo - C.P.",24],["Rates, S. Pedro",24],["Ribadeo",23],["Chaves-Portugal",21],["Irún",19],["Logroño",19],["Francia - C.F.",17],["Resto Portugal",15],["Braga",13],["Barcelos",13],["Porriño",13],["Molinaseca",12],["Puebla de Sanabria",10],["Resto Asturias - C.N",10],["Rabanal del Camino",9],["Vilalba",9],["Zamora",9],["Le Puy",9],["Sahagún",9],["Allariz",8],["Bilbao",7],["A Guarda",7],["Santander",6],["Muxia",6],["Resto País Vasco - C.N.",6],["Somport",5],["Madrid - C.F.",5],["San Sebastián",5],["Resto Cantabria",4],["Salamanca",4],["Finisterra",4],["Madrid - V.P.",4],["Resto C. León C.F.",4],["Alemania",4],["Granja de Moreruela",4],["Bélgica",4],["Oviedo - C.N.",4],["Barcelona",3],["Vigo",3],["Fatima",3],["Estella",3],["Avilés",3],["Jaca",3],["Sto. Domingo de la Calzada",3],["Com. Valenciana - C.F.",3],["Lourdes",3],["La Bañeza",3],["Resto de Extremadura",3],["Castilla la Mancha otros",3],["Cast. la Mancha - C.F.",2],["Cataluña - C.F.",2],["París",2],["Resto Andalucia",2],["Mérida",2],["Com. Valenciana - O.C.",2],["Hendaya",2],["Granada",2],["Resto Asturias - C.P.",2],["Vezelay",2],["Resto Europa",2],["Hospital de Orbigo",2],["R.Pais Vasco C.F.",2],["Resto Galicia",2],["Baamonde",1],["Valencia O.C.",1],["Jerusalem",1],["Zaragoza",1],["Roma",1],["Gijón",1],["Guimaraes",1],["Montserrat",1],["Italia",1],["Malaga",1],["Mondoñedo",1],["Carrión de los Condes",1],["Resto C. León - V.P.",1],["Eslovaquia",1],["Castrojeriz",1],["Grandas de Salime - C.P.",1],["Córdoba",1],["Fonsagrada - C.P.",1],["Suiza",1],["Francia - C.N",1],["Navarra",1],["Canfranc",1],["Irlanda C.F.",1],["Castilla La Mancha VP",1]],"startingRegions":[["Lugo",1104],["Portugal",475],["León",432],["France",260],["Navarra",143],["Pontevedra",135],["A Coruña",133],["La Rioja",129],["Asturias",60],["Ourense",49],["Burgos",45],["Gipuzkoa",32],["Sevilla",30],["Zamora",23],["Porgugal",21],["Cantabria",10],["Madrid",9],["Vizcaya",7],["Albacete",6],["Barcelona",6],["Valencia",6],["Badajoz",5],["Huesca",4],["Germany",4],["Belgium",4],["Salamanca",4],["Granada",2],["Italy",2],["Europe Other",2],["Zaragoza",1],["Ireland",1],["Israel",1],["Palencia",1],["Slovakia",1],["Córdoba",1],["Switzerland",1],["Málaga",1]],"caminos":[["Frances-Camino de",2087],["Portugues-Camino",610],["Via de la Plata",145],["Ingles-Camino",121],["Norte-Camino de",102],["Primitivo-Camino",67],["Muxia-Finisterre",10],["Otros caminos",8]]},"4":{"year":"2014","month":"4","pilgrims":17346,"gender":[["Hombre",9322],["Mujer",8024]],"transport":[["Pie",15442],["Bicicleta",1778],["Caballo",99],["Silla de ruedas",27]],"age":[["30 - 60",9532],["< 30",5701],["> 60",2113]],"motivation":[["Religioso y otros",9555],["Religioso",6708],["No religioso",1083]],"spanishFrom":[["Madrid",1643],["Comunidad Valenciana",999],["Galicia",967],["Cataluña",967],["Andalucía",929],["Castilla León",637],["Castilla la Mancha",462],["Pais Vasco",349],["Canarias",243],["Extremadura",240],["Navarra",145],["Murcia",142],["Aragón",109],["Baleares",107],["Asturias",103],["Cantabria",99],["Ceuta",47],["La Rioja",31],["Otra",20],["Melilla",7]],"byCountry":[["España",8246],["Portugal",1833],["Alemania",1257],["Italia",973],["Irlanda",686],["Estados Unidos",588],["Francia",528],["Reino Unido",334],["Corea",270],["Australia",242],["Brasil",217],["Dinamarca",180],["Holanda",165],["México",162],["Canadá",160],["Austria",109],["Suiza",102],["China",96],["Colombia",84],["Noruega",79],["Belgica",78],["Polonia",78],["Argentina",67],["Venezuela",65],["Finlandia",60],["Japón",50],["Suecia",49],["Sudáfrica",47],["Rusia",43],["Hungría",41],["Nueva Zelanda",35],["Eslovaquia",32],["Rumania",28],["Ecuador",27],["Lituania",26],["República Checa",19],["Bulgaria",18],["Chile",18],["Eslovenia",17],["Israel",13],["Bolivia",13],["Puerto Rico",13],["Islandia",11],["Letonia",11],["Filipinas",11],["Perú",11],["Costa Rica",11],["Uruguay",10],["Estonia",10],["Taiwán",9],["Paraguay",9],["Andorra",8],["Líbano",8],["Honduras",6],["Rep. Dominicana",6],["Grecia",6],["Turquía",6],["Malta",5],["Ucrania",5],["Singapur",5],["India",5],["Luxemburgo",4],["Angola",3],["Guatemala",3],["Marruecos",3],["Panamá",3],["Mozambique",2],["Croacia",2],["Malasia",2],["Cuba",2],["Tailandia",2],["Serbia",2],["Nicaragua",2],["Chipre",2],["Bielorrusia",1],["Armenia",1],["Antillas Holandesas",1],["Vietnam",1],["Indonesia",1],["Mauritania",1],["Moldavia",1],["Georgia",1],["Tanzania",1],["Pakistán",1],["Bosnia",1],["Haití",1],["El Salvador",1]],"professions":[["Estudiantes",3914],["Empleados",3741],["Liberales",2370],["Tecnicos",1813],["Jubilados",1620],["Profesores",1522],["Funcionarios",619],["Obreros",450],["Amas de Casa",336],["Parados",322],["Directivos",308],["Artistas",129],["Sacerdotes",63],["Religiosas",59],["Agricultores",39],["Marinos",34],["Deportistas",5],["Oikoten",2]],"startingCities":[["Sarria",5457],["S. Jean P. Port",1288],["Oporto",1000],["Tui",955],["Cebreiro",841],["León",675],["Valença do Minho",630],["Ponferrada",499],["Ferrol",495],["Roncesvalles",473],["Ourense",371],["Astorga",324],["Pamplona",292],["Resto Portugal",255],["Triacastela",226],["Burgos",216],["Ponte de Lima",214],["Lugo - C.P.",205],["Oviedo - C.P.",199],["Vilafranca",195],["Sevilla",182],["Le Puy",139],["Irún",128],["Resto C. León C.F.",116],["Braga",105],["Lisboa",105],["Samos",100],["Resto Asturias - C.N",84],["Francia - C.F.",81],["Ribadeo",79],["Barcelos",66],["Logroño",63],["Chaves-Portugal",56],["Somport",55],["Oviedo - C.N.",53],["Bilbao",50],["Porriño",48],["Gijón",43],["Guimaraes",41],["Jaca",39],["Vilalba",32],["Salamanca",30],["Santander",30],["Rates, S. Pedro",26],["Fonsagrada - C.P.",23],["Zamora",22],["Alemania",20],["Avilés",19],["Gudiña",19],["Viana do Castelo",18],["Sahagún",18],["Puebla de Sanabria",17],["Coimbra",16],["Molinaseca",16],["Viseu",16],["Madrid - V.P.",16],["Vigo",15],["Muxia",15],["Madrid - C.F.",15],["Arles",15],["Finisterra",14],["Cadavo",14],["Resto País Vasco - C.N.",14],["R.Pais Vasco C.F.",13],["Resto Europa",13],["Zaragoza",12],["Puente la Reina",12],["Resto Andalucia",12],["Suiza",12],["Francia - C.N",11],["Baamonde",11],["Neda",11],["Granja de Moreruela",10],["Povoa de Varzim",10],["Rabanal del Camino",10],["Frómista",10],["Mérida",10],["Cáceres",9],["Resto C. León - V.P.",9],["La Rioja",9],["Barcelona",9],["París",9],["Grandas de Salime - C.P.",9],["Resto Asturias - C.P.",9],["Resto Cantabria",9],["Fatima",9],["Com. Valenciana - C.F.",8],["Bélgica",8],["San Sebastián",8],["Vega de Valcarce",8],["Hospital de Orbigo",7],["Estella",7],["Baiona",7],["Sto. Domingo de la Calzada",7],["Italia",6],["Valencia O.C.",6],["Canfranc",6],["Carrión de los Condes",5],["Lourdes",5],["Laza",5],["Xunqueira de Ambia",5],["Hendaya",5],["Abadin",5],["Córdoba",5],["Holanda",5],["Esposende",4],["Granada",4],["Tineo - C.P.",4],["Monforte de Lemos",4],["Navarra",4],["Austria",4],["Montserrat",4],["Aveiro",4],["Vezelay",4],["A Guarda",3],["Cataluña - C.F.",3],["Com. Valenciana - O.C.",3],["Benavente",3],["Irlanda C.F.",3],["Nájera",3],["Cast. la Mancha - C.F.",3],["Castrojeriz",3],["Rábade",3],["Badajoz",3],["San Juan de Ortega",3],["Mondoñedo",3],["Vilabade",2],["Malaga",2],["Resto de Extremadura",2],["Sobrado",2],["Resto Africa",2],["Guntín",2],["Faro",2],["Pontedeume",2],["XFonsagrada",2],["XLa Rioja",2],["Castilla La Mancha VP",2],["Huelva",2],["Murcia",1],["Inglaterra C.F.",1],["Castilla la Mancha otros",1],["Ventas de Narón",1],["Cataluña - O.C.",1],["Reino Unido C.Ing",1],["Verín",1],["Cruz de Ferro",1],["Vincios",1],["Roma",1],["Ponferrada. C.Inv.",1]],"startingRegions":[["Lugo",7005],["Portugal",2517],["León",1879],["France",1612],["Pontevedra",1029],["Navarra",788],["A Coruña",541],["Asturias",420],["Ourense",405],["Burgos",222],["Sevilla",194],["Gipuzkoa",163],["La Rioja",84],["Porgugal",56],["Zamora",52],["Vizcaya",50],["Huesca",45],["Cantabria",39],["Madrid",31],["Salamanca",30],["Germany",20],["Valencia",17],["Barcelona",17],["Palencia",15],["Badajoz",15],["Europe Other",13],["Zaragoza",12],["Switzerland",12],["Cáceres",9],["Belgium",8],["Italy",7],["Albacete",6],["Holland",5],["Córdoba",5],["Huelva",5],["Granada",4],["Austria",4],["Ireland",3],["Málaga",2],["Africa",2],["UK",2],["Murcia",1]],"caminos":[["Frances-Camino de",11383],["Portugues-Camino",3550],["Via de la Plata",799],["Norte-Camino de",593],["Ingles-Camino",509],["Primitivo-Camino",466],["Muxia-Finisterre",29],["Otros caminos",17]]},"5":{"year":"2014","month":"5","pilgrims":27354,"gender":[["Hombre",15127],["Mujer",12227]],"transport":[["Pie",24075],["Bicicleta",3129],["Caballo",146],["Silla de ruedas",4]],"age":[["30 - 60",15739],["> 60",7701],["< 30",3914]],"motivation":[["Religioso y otros",13975],["Religioso",11777],["No religioso",1602]],"spanishFrom":[["Madrid",1861],["Cataluña",1218],["Andalucía",1163],["Galicia",798],["Comunidad Valenciana",772],["Castilla León",643],["Castilla la Mancha",522],["Pais Vasco",398],["Canarias",282],["Asturias",184],["Aragón",176],["Extremadura",160],["Murcia",133],["Baleares",129],["Cantabria",101],["Navarra",80],["La Rioja",56],["Otra",37],["Ceuta",15],["Melilla",8]],"byCountry":[["España",8736],["Alemania",2951],["Italia",1898],["Francia",1739],["Estados Unidos",1728],["Portugal",1694],["Irlanda",948],["Reino Unido",764],["Holanda",750],["Australia",638],["Brasil",604],["Canadá",557],["Corea",494],["Austria",321],["Belgica",253],["Dinamarca",235],["Polonia",227],["Suiza",226],["México",203],["Argentina",201],["Suecia",177],["Finlandia",175],["Rusia",158],["Noruega",152],["República Checa",134],["Hungría",113],["Japón",108],["Eslovenia",101],["Sudáfrica",98],["Venezuela",88],["Nueva Zelanda",88],["Colombia",75],["Bulgaria",59],["Malta",49],["Lituania",42],["Eslovaquia",39],["China",37],["Perú",34],["Ecuador",33],["Rumania",31],["Filipinas",30],["Chile",28],["Uruguay",26],["Estonia",26],["Luxemburgo",24],["Puerto Rico",22],["Ucrania",19],["Costa Rica",18],["Letonia",15],["Vietnam",13],["Israel",13],["Grecia",12],["Singapur",12],["Croacia",12],["Cuba",10],["Andorra",10],["Malasia",9],["Rep. Dominicana",8],["Islandia",8],["Taiwán",8],["El Salvador",6],["Guatemala",5],["Armenia",4],["Indonesia",4],["Marruecos",4],["Paraguay",4],["Namibia",4],["Turquía",3],["Serbia",3],["Honduras",3],["Panamá",3],["Irán",3],["San Marino",3],["India",3],["Bolivia",2],["Chipre",2],["Islas Feroe",2],["Cabo Verde",1],["Mauricio",1],["Etiopía",1],["Mozambique",1],["Nicaragua",1],["Líbano",1],["Jordania",1],["Siria",1],["Bielorrusia",1],["Tailandia",1],["Mauritania",1],["Nigeria",1],["Angola",1],["Groenlandia",1],["Moldavia",1]],"professions":[["Empleados",6827],["Jubilados",6142],["Liberales",3721],["Tecnicos",2990],["Estudiantes",1926],["Funcionarios",1469],["Profesores",1119],["Amas de Casa",815],["Directivos",763],["Parados",533],["Obreros",395],["Artistas",294],["Religiosas",128],["Sacerdotes",98],["Agricultores",82],["Marinos",29],["Deportistas",21],["Oikoten",2]],"startingCities":[["Sarria",6003],["S. Jean P. Port",3944],["Oporto",1778],["León",1444],["Cebreiro",1014],["Roncesvalles",1012],["Tui",972],["Ponferrada",848],["Pamplona",686],["Le Puy",674],["Astorga",578],["Sevilla",515],["Valença do Minho",513],["Burgos",502],["Ferrol",498],["Oviedo - C.P.",460],["Irún",325],["Francia - C.F.",319],["Resto Portugal",306],["Resto C. León C.F.",294],["Vilafranca",270],["Ourense",239],["Lisboa",230],["Ponte de Lima",190],["Lugo - C.P.",190],["Triacastela",185],["Porriño",157],["Samos",153],["Bilbao",129],["Braga",120],["Resto Asturias - C.N",120],["Oviedo - C.N.",106],["Logroño",97],["Santander",95],["Chaves-Portugal",88],["Rates, S. Pedro",76],["Salamanca",68],["Somport",65],["Ribadeo",63],["Barcelos",63],["Gijón",61],["Avilés",59],["Madrid - C.F.",57],["Alemania",57],["Zamora",56],["San Sebastián",55],["Sahagún",53],["Verín",53],["Holanda",50],["Vilalba",49],["Finisterra",42],["Arles",41],["Puebla de Sanabria",38],["Muxia",37],["Coimbra",37],["Francia - C.N",37],["Resto País Vasco - C.N.",36],["Lourdes",34],["Bélgica",33],["Valencia O.C.",33],["Com. Valenciana - C.F.",30],["Vezelay",30],["Resto Asturias - C.P.",30],["Resto Cantabria",28],["Madrid - V.P.",28],["Resto Andalucia",27],["Viana do Castelo",27],["Xunqueira de Ambia",27],["Castilla la Mancha otros",26],["Resto Europa",26],["Guimaraes",23],["Vega de Valcarce",22],["Granja de Moreruela",22],["Jaca",21],["Fonsagrada - C.P.",21],["Navarra",21],["Resto C. León - V.P.",20],["Frómista",20],["Suiza",20],["Resto Galicia",19],["Ponferrada. C.Inv.",18],["Rabanal del Camino",18],["Carrión de los Condes",18],["Sto. Domingo de la Calzada",17],["Cáceres",17],["Com. Valenciana - O.C.",17],["Granada",16],["Puente la Reina",16],["Zaragoza",16],["Hendaya",15],["Fatima",14],["Mérida",14],["Grandas de Salime - C.P.",14],["Cataluña - C.F.",13],["Gudiña",13],["Montserrat",12],["Cast. la Mancha - C.F.",12],["Austria",12],["Lourenzá",12],["Baiona",12],["Aveiro",12],["Vigo",11],["Viseu",11],["Barcelona",11],["Cadavo",10],["Castilla La Mancha VP",10],["Malaga",9],["Estella",9],["Italia",8],["Valladolid",8],["Faro",8],["Resto de Extremadura",7],["Huelva",7],["Molinaseca",7],["Hospital de Orbigo",7],["Neda",7],["R.Pais Vasco C.F.",7],["Esposende",6],["XFonsagrada",6],["A Guarda",5],["Canfranc",5],["Abadin",5],["Baamonde",5],["Tineo - C.P.",5],["Mondoñedo",5],["París",5],["Castrojeriz",5],["Povoa de Varzim",4],["Irlanda C.F.",4],["Cataluña - O.C.",4],["La Rioja",4],["Laza",4],["Cruz de Ferro",3],["La Mesa",3],["San Juan de Ortega",3],["Nájera",3],["Monforte de Lemos",2],["Badajoz",2],["Benavente",2],["Luxemburgo",2],["Paradela",2],["Fonfría",2],["Roma",1],["Finlandia",1],["XLa Rioja",1],["Grecia",1],["Reino Unido C.F.",1],["La Bañeza",1],["Vegadeo",1],["mirallos",1],["Salas",1],["Andorra",1],["Grado",1],["Murcia",1],["Gonzar",1],["Córdoba",1],["Valcarlos",1],["Leyre",1],["Pontedeume",1],["XGrandas de Salime",1]],"startingRegions":[["Lugo",7729],["France",5164],["León",3583],["Portugal",3412],["Navarra",1746],["Pontevedra",1157],["Asturias",862],["A Coruña",604],["Sevilla",542],["Burgos",510],["Gipuzkoa",423],["Ourense",342],["Vizcaya",129],["Cantabria",123],["La Rioja",122],["Zamora",118],["Porgugal",88],["Madrid",85],["Valencia",80],["Salamanca",68],["Germany",57],["Holland",50],["Albacete",48],["Barcelona",40],["Palencia",38],["Belgium",33],["Europe Other",26],["Huesca",26],["Badajoz",23],["Switzerland",20],["Cáceres",17],["Granada",16],["Zaragoza",16],["Austria",12],["Málaga",9],["Italy",9],["Valladolid",8],["Huelva",7],["Ireland",4],["Luxembourg",2],["Greece",1],["UK",1],["Andorra",1],["Murcia",1],["Córdoba",1],["Finland",1]],"caminos":[["Frances-Camino de",18830],["Portugues-Camino",4575],["Via de la Plata",1292],["Norte-Camino de",1215],["Primitivo-Camino",736],["Ingles-Camino",506],["Otros caminos",121],["Muxia-Finisterre",79]]},"6":{"year":"2014","month":"6","pilgrims":33023,"gender":[["Hombre",18218],["Mujer",14805]],"transport":[["Pie",28275],["Bicicleta",4587],["Caballo",152],["Silla de ruedas",9]],"age":[["30 - 60",18583],["> 60",7911],["< 30",6529]],"motivation":[["Religioso y otros",16665],["Religioso",14263],["No religioso",2095]],"spanishFrom":[["Madrid",2636],["Andalucía",1773],["Cataluña",1509],["Comunidad Valenciana",1303],["Galicia",950],["Castilla León",784],["Pais Vasco",676],["Castilla la Mancha",603],["Asturias",398],["Otra",342],["Canarias",334],["Murcia",318],["Extremadura",269],["Aragón",268],["Baleares",151],["Navarra",148],["Cantabria",116],["La Rioja",66],["Ceuta",10],["Melilla",7]],"byCountry":[["España",12661],["Alemania",3074],["Italia",2843],["Estados Unidos",2412],["Portugal",1794],["Francia",1674],["Holanda",801],["Australia",695],["Reino Unido",682],["Irlanda",671],["Canadá",596],["Corea",484],["Brasil",414],["Belgica",327],["Polonia",327],["Austria",304],["México",248],["Dinamarca",238],["Japón",222],["Suiza",217],["Suecia",193],["Argentina",191],["Nueva Zelanda",144],["Hungría",137],["Sudáfrica",128],["Finlandia",124],["Colombia",118],["Noruega",115],["República Checa",108],["Rusia",93],["Puerto Rico",84],["Eslovenia",80],["Venezuela",72],["Eslovaquia",70],["China",64],["Lituania",62],["Bulgaria",57],["Ecuador",38],["Chile",37],["Uruguay",29],["Islandia",27],["Israel",26],["Rumania",26],["Luxemburgo",23],["Taiwán",21],["Grecia",18],["Singapur",17],["Ucrania",16],["Estonia",16],["Filipinas",14],["Croacia",14],["Malta",12],["Rep. Dominicana",12],["Perú",12],["Indonesia",11],["Costa Rica",11],["Letonia",9],["Andorra",9],["India",9],["Cuba",8],["Marruecos",6],["Bielorrusia",6],["Armenia",5],["Honduras",4],["Namibia",4],["Jordania",3],["Bolivia",3],["Irán",3],["Moldavia",3],["Paraguay",3],["Albania",3],["Panamá",3],["Turquía",3],["Pakistán",3],["Guatemala",3],["Macedonia",2],["Islas Feroe",2],["Etiopía",2],["Malasia",2],["Kenya",2],["Mozambique",2],["Vietnam",1],["Laos",1],["Fiji",1],["Argelia",1],["Serbia",1],["Tailandia",1],["Cabo Verde",1],["Mauricio",1],["Georgia",1],["Sri Lanka",1],["Montenegro",1],["Zimbabwe",1],["Kazajistán",1],["El Salvador",1],["Senegal",1],["Congo",1],["Camboya",1]],"professions":[["Empleados",7937],["Jubilados",6312],["Estudiantes",4206],["Tecnicos",3886],["Liberales",3866],["Funcionarios",1890],["Profesores",1556],["Amas de Casa",819],["Parados",729],["Directivos",668],["Obreros",493],["Artistas",271],["Sacerdotes",142],["Religiosas",105],["Agricultores",75],["Marinos",43],["Deportistas",24],["Oikoten",1]],"startingCities":[["Sarria",6790],["S. Jean P. Port",5400],["León",1724],["Oporto",1491],["Roncesvalles",1391],["Tui",1333],["Cebreiro",1136],["Ponferrada",908],["Ferrol",798],["Astorga",797],["Le Puy",769],["Pamplona",760],["Oviedo - C.P.",710],["Burgos",605],["Irún",563],["Sevilla",489],["Francia - C.F.",445],["Valença do Minho",436],["Resto Portugal",427],["Vilafranca",333],["Ourense",288],["Holanda",272],["Lisboa",270],["Lugo - C.P.",247],["Resto C. León C.F.",215],["Bilbao",178],["Alemania",160],["Samos",157],["Santander",145],["Triacastela",145],["Resto Asturias - C.N",137],["Ponte de Lima",127],["Logroño",118],["Ribadeo",117],["Somport",112],["Vilalba",96],["Bélgica",93],["Gijón",92],["Guimaraes",91],["Rates, S. Pedro",88],["Lourdes",84],["Oviedo - C.N.",81],["Salamanca",80],["San Sebastián",74],["Avilés",74],["Zamora",73],["Chaves-Portugal",69],["Muxia",67],["Jaca",67],["Madrid - C.F.",66],["Barcelos",63],["Resto Cantabria",62],["Sahagún",58],["Resto Europa",57],["Verín",55],["Braga",51],["Resto Andalucia",50],["Resto Asturias - C.P.",48],["Porriño",45],["Cataluña - C.F.",43],["Arles",41],["Vezelay",40],["Resto País Vasco - C.N.",39],["Frómista",36],["París",35],["Francia - C.N",34],["Hendaya",33],["Suiza",32],["Resto de Extremadura",29],["Gudiña",29],["Finisterra",27],["R.Pais Vasco C.F.",26],["Carrión de los Condes",25],["Madrid - V.P.",24],["Fonsagrada - C.P.",23],["Puebla de Sanabria",23],["Vega de Valcarce",23],["Mérida",23],["Baamonde",22],["Puente la Reina",22],["Com. Valenciana - C.F.",22],["Coimbra",22],["Fatima",21],["Neda",20],["Cruz de Ferro",19],["A Guarda",19],["Cast. la Mancha - C.F.",19],["Viana do Castelo",19],["Zaragoza",18],["Cáceres",18],["Sto. Domingo de la Calzada",18],["Austria",17],["Valencia O.C.",17],["Resto C. León - V.P.",17],["Hospital de Orbigo",17],["Italia",16],["Molinaseca",16],["Montserrat",16],["Allariz",15],["Resto Galicia",15],["Tineo - C.P.",14],["Mondoñedo",14],["Granja de Moreruela",13],["Povoa de Varzim",13],["Xunqueira de Ambia",13],["Cadavo",12],["Baiona",12],["Navarra",12],["Com. Valenciana - O.C.",12],["Aveiro",11],["Rabanal del Camino",11],["Huelva",11],["Barcelona",11],["Castilla La Mancha VP",11],["Murcia",11],["Canfranc",10],["Granada",10],["Abadin",10],["Faro",9],["Viseu",9],["Castilla la Mancha otros",9],["Cataluña - O.C.",8],["Nájera",8],["Estella",7],["Córdoba",6],["Grandas de Salime - C.P.",6],["Malaga",5],["Vigo",5],["La Rioja",5],["XFonsagrada",5],["Laza",4],["Reino Unido C.F.",4],["Ponferrada. C.Inv.",4],["Lourenzá",3],["Roma",3],["Valladolid",3],["Hungría",3],["Polonia",3],["Grado",3],["Esposende",3],["Fonfría",2],["Sobrado",2],["Viveiro",2],["Badajoz",2],["Pontedeume",2],["Salas",2],["Benavente",2],["San Juan de Ortega",2],["Luxemburgo",2],["Valcarlos",1],["Finlandia",1],["XGrandas de Salime",1],["Eslovaquia",1],["Rábade",1],["Dinamarca",1],["Covelo",1],["Guitiriz",1],["Republica Checa",1],["XSan Sebastian",1],["Vilabade",1],["Irlanda C.F.",1]],"startingRegions":[["Lugo",8783],["France",6993],["León",4142],["Portugal",3148],["Navarra",2193],["Pontevedra",1415],["Asturias",1168],["A Coruña",931],["Gipuzkoa",703],["Burgos",607],["Sevilla",539],["Ourense",407],["Holland",272],["Cantabria",207],["Vizcaya",178],["Germany",160],["La Rioja",149],["Zamora",111],["Belgium",93],["Madrid",90],["Salamanca",80],["Barcelona",78],["Huesca",77],["Porgugal",69],["Palencia",61],["Europe Other",57],["Badajoz",54],["Valencia",51],["Albacete",39],["Switzerland",32],["Italy",19],["Cáceres",18],["Zaragoza",18],["Austria",17],["Huelva",12],["Murcia",11],["Granada",10],["Córdoba",6],["Málaga",5],["UK",4],["Valladolid",3],["Hungary",3],["Poland",3],["Luxembourg",2],["Finland",1],["Slovakia",1],["Denmark",1],["Czech Republic",1],["Ireland",1]],"caminos":[["Frances-Camino de",23250],["Portugues-Camino",4566],["Norte-Camino de",1789],["Via de la Plata",1362],["Primitivo-Camino",1066],["Ingles-Camino",820],["Muxia-Finisterre",94],["Otros caminos",76]]},"7":{"year":"2014","month":"7","pilgrims":39581,"gender":[["Hombre",20817],["Mujer",18764]],"transport":[["Pie",35640],["Bicicleta",3707],["Caballo",211],["Silla de ruedas",23]],"age":[["30 - 60",19694],["< 30",16144],["> 60",3743]],"motivation":[["Religioso",18729],["Religioso y otros",17877],["No religioso",2975]],"spanishFrom":[["Andalucía",4967],["Madrid",4433],["Cataluña",2408],["Comunidad Valenciana",2361],["Castilla León",1847],["Castilla la Mancha",1352],["Pais Vasco",1195],["Galicia",1016],["Extremadura",855],["Canarias",675],["Aragón",557],["Murcia",539],["Asturias",483],["Navarra",350],["Cantabria",239],["Baleares",237],["La Rioja",106],["Otra",104],["Ceuta",55],["Melilla",32]],"byCountry":[["España",23811],["Italia",2686],["Estados Unidos",1877],["Alemania",1411],["Portugal",1274],["Francia",1180],["Polonia",698],["Reino Unido",582],["Irlanda",509],["Corea",482],["Holanda",429],["México",401],["Belgica",348],["Brasil",331],["Australia",323],["Canadá",318],["Dinamarca",308],["Austria",196],["Hungría",196],["Suecia",172],["Eslovaquia",168],["Suiza",162],["Argentina",119],["Japón",106],["Eslovenia",103],["Colombia",101],["República Checa",101],["Sudáfrica",91],["Bulgaria",88],["Noruega",86],["Nueva Zelanda",85],["Rusia",64],["Lituania",60],["Venezuela",59],["China",56],["Ecuador",52],["Rumania",46],["Finlandia",39],["Croacia",35],["Puerto Rico",28],["Chile",28],["Israel",27],["Líbano",23],["Ucrania",23],["Uruguay",22],["Perú",20],["Bolivia",19],["Estonia",19],["Rep. Dominicana",16],["Grecia",16],["Andorra",13],["Letonia",11],["Malta",11],["Luxemburgo",11],["Taiwán",10],["Filipinas",8],["El Salvador",8],["India",8],["Paraguay",6],["Guatemala",6],["Costa Rica",6],["Turquía",6],["Haití",5],["Islandia",5],["Singapur",5],["Cuba",4],["Bosnia",4],["Mozambique",4],["Serbia",4],["Honduras",4],["Albania",3],["Pakistán",3],["Indonesia",3],["Nicaragua",3],["Chipre",3],["Irán",2],["Georgia",2],["Moldavia",2],["Marruecos",2],["Rwanda",2],["Timor Oriental",2],["Bielorrusia",2],["Islas Feroe",2],["Samoa Occidental",1],["Kazajistán",1],["Vietnam",1],["Mónaco",1],["Armenia",1],["Argelia",1],["Uganda",1],["Santo Tomé y Príncipe",1],["Bangladesh",1],["Guinea Ecuatorial",1],["Panamá",1],["Camerún",1],["Irak",1],["Jamaica",1],["San Marino",1],["Mauricio",1],["Cabo Verde",1]],"professions":[["Estudiantes",12723],["Empleados",6905],["Profesores",4743],["Tecnicos",3451],["Liberales",3217],["Jubilados",2861],["Funcionarios",1949],["Parados",793],["Amas de Casa",706],["Directivos",688],["Obreros",478],["Sacerdotes",315],["Artistas",296],["Religiosas",234],["Agricultores",118],["Marinos",56],["Oikoten",32],["Deportistas",16]],"startingCities":[["Sarria",10007],["S. Jean P. Port",3982],["Tui",2236],["Cebreiro",1985],["León",1599],["Ponferrada",1512],["Astorga",1390],["Ferrol",1384],["Oporto",1378],["Roncesvalles",1107],["Oviedo - C.P.",821],["Irún",796],["Ourense",685],["Valença do Minho",672],["Pamplona",614],["Burgos",546],["Ribadeo",452],["Le Puy",438],["Vilafranca",408],["Lugo - C.P.",406],["Resto Portugal",400],["Francia - C.F.",387],["Triacastela",366],["Vilalba",314],["Resto Asturias - C.N",267],["Samos",244],["Laza",186],["Resto C. León C.F.",184],["Gijón",183],["Santander",178],["Bilbao",171],["Sevilla",168],["Logroño",154],["Baamonde",152],["Lisboa",147],["Porriño",144],["Holanda",134],["Finisterra",133],["Resto Asturias - C.P.",132],["Ponte de Lima",126],["Avilés",119],["Salamanca",103],["Oviedo - C.N.",100],["Somport",92],["Neda",86],["Rates, S. Pedro",81],["Resto País Vasco - C.N.",79],["San Sebastián",78],["Alemania",77],["Cruz de Ferro",76],["Barcelos",74],["Resto Cantabria",71],["Madrid - C.F.",69],["Bélgica",68],["Salas",61],["Puebla de Sanabria",60],["Zamora",59],["Muxia",55],["Hendaya",49],["Sahagún",48],["Abadin",46],["A Guarda",46],["Resto Europa",42],["Braga",41],["Mondoñedo",41],["Sto. Domingo de la Calzada",40],["Guimaraes",39],["Lourdes",36],["Pontedeume",35],["Arles",34],["Jaca",33],["Resto C. León - V.P.",32],["Fatima",32],["Rábade",32],["Tineo - C.P.",29],["Suiza",28],["Cast. la Mancha - C.F.",28],["Com. Valenciana - C.F.",27],["Lourenzá",26],["Cataluña - C.F.",26],["Viana do Castelo",24],["Granja de Moreruela",24],["Austria",24],["Zaragoza",23],["Vega de Valcarce",22],["Resto Andalucia",22],["Fonsagrada - C.P.",22],["Frómista",20],["Castilla la Mancha otros",20],["Resto Galicia",20],["Gudiña",20],["Francia - C.N",20],["R.Pais Vasco C.F.",19],["Coimbra",18],["Hospital de Orbigo",17],["Navarra",17],["Cadavo",16],["Chaves-Portugal",16],["Castilla La Mancha VP",15],["Estella",15],["Vezelay",14],["Grandas de Salime - C.P.",14],["Granada",13],["Madrid - V.P.",13],["Italia",12],["Mérida",12],["Baiona",12],["Puente la Reina",12],["Carrión de los Condes",11],["París",11],["Valencia O.C.",11],["Resto Africa",11],["Barcelona",10],["Molinaseca",10],["Com. Valenciana - O.C.",10],["Resto de Extremadura",10],["XSan Sebastian",10],["Rabanal del Camino",9],["XFonsagrada",9],["Montserrat",9],["La Rioja",8],["Cáceres",8],["Polonia",8],["Viseu",8],["Faro",7],["Verín",7],["Castrojeriz",6],["Nájera",6],["Fonfría",5],["Benavente",5],["Grado",5],["Ponferrada. C.Inv.",5],["Eslovaquia",5],["La Bañeza",5],["Allariz",4],["Roma",4],["Canfranc",4],["Badajoz",4],["Esposende",4],["Córdoba",4],["Republica Checa",4],["Reino Unido C.F.",4],["La Mesa",4],["Cataluña - O.C.",3],["Vigo",3],["Paradela",3],["Andorra",3],["XGrandas de Salime",3],["Xunqueira de Ambia",3],["Petín",2],["San Juan de Ortega",2],["Leyre",2],["Chantada",2],["Vegadeo",2],["Betanzos",2],["Murcia",2],["Monforte de Lemos",1],["Corredoiras",1],["Ventas de Narón",1],["Huelva",1],["Dinamarca",1],["",1],["Covelo",1],["Gándara",1],["Luxemburgo",1],["Borres",1],["Malaga",1],["XLa Rioja",1],["Valladolid",1],["Artieda",1],["Peñaseita",1],["Pardellas",1],["Povoa de Varzim",1],["Sobrado",1],["Cea",1],["Aveiro",1],["Ortigueira",1],["Guitiriz",1]],"startingRegions":[["Lugo",14099],["León",5318],["France",5063],["Portugal",3049],["Pontevedra",2444],["Navarra",1767],["Asturias",1742],["A Coruña",1718],["Gipuzkoa",982],["Ourense",911],["Burgos",554],["Cantabria",249],["La Rioja",209],["Sevilla",190],["Vizcaya",171],["Zamora",148],["Holland",134],["Salamanca",103],["Madrid",82],["Germany",77],["Belgium",68],["Albacete",63],["Valencia",48],["Barcelona",48],["Europe Other",42],["Huesca",37],["Huelva",33],["Palencia",31],["Switzerland",28],["Badajoz",26],["Zaragoza",24],["Austria",24],["Porgugal",16],["Italy",16],["Granada",13],["Africa",11],["Poland",8],["Cáceres",8],["Slovakia",5],["Córdoba",4],["Czech Republic",4],["UK",4],["Andorra",3],["Murcia",2],["City&nbsp;Was Blank",1],["Luxembourg",1],["Málaga",1],["Valladolid",1],["Denmark",1]],"caminos":[["Frances-Camino de",26099],["Portugues-Camino",5495],["Norte-Camino de",3205],["Primitivo-Camino",1516],["Ingles-Camino",1508],["Via de la Plata",1495],["Muxia-Finisterre",188],["Otros caminos",74],["Otros caminos",1]]},"8":{"year":"2014","month":"8","pilgrims":51219,"gender":[["Hombre",27466],["Mujer",23753]],"transport":[["Pie",44920],["Bicicleta",5833],["Caballo",444],["Silla de ruedas",22]],"age":[["30 - 60",29306],["< 30",18939],["> 60",2974]],"motivation":[["Religioso y otros",24204],["Religioso",22885],["No religioso",4130]],"spanishFrom":[["Andalucía",6689],["Madrid",5395],["Comunidad Valenciana",4791],["Cataluña",3857],["Castilla la Mancha",1791],["Castilla León",1514],["Galicia",1490],["Pais Vasco",1285],["Murcia",1166],["Extremadura",908],["Aragón",519],["Canarias",465],["Asturias",402],["Navarra",303],["Baleares",209],["Cantabria",184],["La Rioja",163],["Otra",106],["Ceuta",44],["Melilla",14]],"byCountry":[["España",31295],["Italia",7732],["Portugal",2212],["Alemania",1971],["Francia",1137],["Estados Unidos",798],["Polonia",728],["Reino Unido",458],["Corea",455],["Irlanda",407],["Holanda",346],["Canadá",254],["Hungría",243],["Brasil",230],["Belgica",216],["Australia",212],["Austria",205],["Dinamarca",141],["Argentina",136],["Eslovaquia",132],["México",129],["República Checa",126],["Rusia",117],["Suiza",116],["Eslovenia",102],["Japón",100],["Colombia",84],["Venezuela",81],["China",76],["Ecuador",69],["Rumania",67],["Suecia",64],["Lituania",50],["Noruega",49],["Bulgaria",46],["Perú",45],["Ucrania",41],["Nueva Zelanda",40],["Sudáfrica",38],["Croacia",36],["Estonia",25],["Chile",24],["Malta",24],["Finlandia",23],["Uruguay",22],["Luxemburgo",20],["Bolivia",19],["Paraguay",19],["Andorra",16],["Grecia",14],["Israel",14],["Filipinas",12],["Taiwán",11],["Cuba",10],["Argelia",10],["Armenia",9],["Líbano",9],["Costa Rica",9],["Singapur",8],["Turquía",8],["Bielorrusia",7],["Puerto Rico",7],["Letonia",7],["Honduras",7],["India",7],["Rwanda",7],["Guatemala",7],["Islas Feroe",7],["Marruecos",6],["Albania",6],["Indonesia",4],["Irán",4],["El Salvador",3],["Rep. Dominicana",3],["Nicaragua",3],["Pakistán",3],["Senegal",2],["Georgia",2],["Congo",2],["Benin",2],["Serbia",2],["Mozambique",2],["Antillas Holandesas",2],["Moldavia",2],["Costa de Marfil",2],["Liechtensein",2],["Cabo Verde",2],["Camerún",2],["Etiopía",1],["Kazajistán",1],["Angola",1],["Maldivas",1],["Islandia",1],["Mónaco",1],["Somalia",1],["Emiratos Arabes Unidos",1],["Haití",1],["Panamá",1],["Malasia",1],["Kenya",1],["Siria",1],["Chipre",1],["Bermudas",1],["Egipto",1],["Uganda",1]],"professions":[["Estudiantes",12836],["Empleados",11668],["Liberales",6133],["Tecnicos",5780],["Profesores",5369],["Funcionarios",2242],["Jubilados",1953],["Directivos",1023],["Amas de Casa",967],["Obreros",901],["Parados",867],["Artistas",471],["Sacerdotes",400],["Religiosas",320],["Agricultores",196],["Marinos",45],["Deportistas",43],["Oikoten",5]],"startingCities":[["Sarria",13793],["S. Jean P. Port",3963],["Tui",3201],["Cebreiro",2764],["León",2616],["Ponferrada",2060],["Ferrol",1886],["Roncesvalles",1632],["Oporto",1438],["Oviedo - C.P.",1275],["Astorga",1224],["Valença do Minho",1085],["Irún",931],["Burgos",789],["Pamplona",739],["Vilafranca",727],["Ourense",656],["Lugo - C.P.",546],["Triacastela",546],["Samos",450],["Resto Portugal",430],["Resto Asturias - C.N",421],["Ribadeo",413],["Resto C. León C.F.",381],["Le Puy",368],["Santander",314],["Francia - C.F.",310],["Vilalba",288],["Gijón",276],["Ponte de Lima",274],["Bilbao",238],["Lisboa",209],["Avilés",206],["Logroño",186],["Sevilla",179],["Oviedo - C.N.",157],["Neda",131],["Rates, S. Pedro",122],["San Sebastián",121],["Mondoñedo",114],["Braga",111],["Porriño",109],["Madrid - C.F.",104],["Barcelos",102],["Fonsagrada - C.P.",98],["Somport",97],["Resto Cantabria",97],["Resto Galicia",91],["Alemania",90],["Resto País Vasco - C.N.",89],["Holanda",88],["Sahagún",77],["Zamora",73],["Salamanca",73],["Baamonde",71],["Resto Andalucia",70],["Puebla de Sanabria",66],["Resto Asturias - C.P.",63],["Abadin",60],["Vega de Valcarce",56],["Hendaya",53],["Resto Europa",52],["Muxia",52],["Gudiña",51],["Puente la Reina",49],["Carrión de los Condes",48],["Allariz",48],["Com. Valenciana - C.F.",46],["Cataluña - C.F.",45],["Grandas de Salime - C.P.",44],["Lourdes",43],["Tineo - C.P.",43],["Rabanal del Camino",42],["Francia - C.N",41],["Frómista",41],["Sto. Domingo de la Calzada",40],["Molinaseca",37],["París",36],["Finisterra",35],["Lourenzá",35],["Cadavo",35],["Montserrat",35],["Coimbra",34],["Navarra",34],["Guimaraes",34],["Bélgica",34],["A Guarda",33],["Com. Valenciana - O.C.",33],["Baiona",30],["Xunqueira de Ambia",29],["Chaves-Portugal",28],["R.Pais Vasco C.F.",28],["Suiza",27],["Cast. la Mancha - C.F.",27],["Viana do Castelo",27],["Madrid - V.P.",26],["Vezelay",25],["Monforte de Lemos",25],["Castilla la Mancha otros",25],["Granja de Moreruela",25],["Barcelona",25],["Valencia O.C.",23],["Resto C. León - V.P.",23],["Hospital de Orbigo",23],["Verín",22],["Povoa de Varzim",21],["Fatima",20],["Jaca",20],["Vigo",19],["Cáceres",19],["Austria",18],["Resto de Extremadura",18],["Viseu",17],["Arles",16],["Mérida",16],["Cataluña - O.C.",16],["Italia",16],["Zaragoza",15],["Estella",15],["XSan Sebastian",14],["Laza",12],["La Rioja",11],["Castilla La Mancha VP",11],["Salas",11],["Nájera",10],["Castrojeriz",10],["Roma",9],["Granada",9],["Aveiro",9],["Canfranc",8],["Córdoba",8],["Huelva",7],["Valladolid",7],["Reino Unido C.F.",7],["Malaga",7],["Polonia",6],["La Mesa",6],["XFonsagrada",6],["Esposende",6],["Badajoz",6],["Ponferrada. C.Inv.",6],["Murcia",4],["Grado",4],["Hungría",4],["Fonfría",4],["XGrandas de Salime",4],["San Juan de Ortega",3],["XTineo",3],["Cruz de Ferro",2],["Republica Checa",2],["Andorra",2],["Eslovaquia",2],["Faro",2],["Quiroga",2],["Irlanda C.F.",2],["Vilabade",1],["Valcarlos",1],["Luxemburgo",1],["Dinamarca",1],["Rábade",1],["Covelo",1],["Pontedeume",1],["O Barco de Valdeorras",1],["",1],["Rusia",1],["Betanzos",1],["Benavente",1]],"startingRegions":[["Lugo",19251],["León",7274],["France",4952],["Portugal",3935],["Pontevedra",3393],["Asturias",2513],["Navarra",2470],["A Coruña",2197],["Gipuzkoa",1183],["Ourense",825],["Burgos",802],["Cantabria",411],["Sevilla",249],["La Rioja",247],["Vizcaya",238],["Zamora",165],["Madrid",130],["Barcelona",121],["Valencia",102],["Germany",90],["Palencia",89],["Holland",88],["Salamanca",73],["Albacete",63],["Europe Other",52],["Badajoz",40],["Belgium",34],["Porgugal",28],["Huesca",28],["Switzerland",27],["Italy",25],["Cáceres",19],["Austria",18],["Zaragoza",15],["Granada",9],["Huelva",8],["Córdoba",8],["UK",7],["Málaga",7],["Valladolid",7],["Poland",6],["Murcia",4],["Hungary",4],["Czech Republic",2],["Andorra",2],["Slovakia",2],["Ireland",2],["Luxembourg",1],["Denmark",1],["City&nbsp;Was Blank",1],["Russia",1]],"caminos":[["Frances-Camino de",33979],["Portugues-Camino",7334],["Norte-Camino de",3957],["Primitivo-Camino",2126],["Ingles-Camino",2019],["Via de la Plata",1490],["Otros caminos",226],["Muxia-Finisterre",87],["Otros caminos",1]]},"9":{"year":"2014","month":"9","pilgrims":34458,"gender":[["Hombre",17972],["Mujer",16486]],"transport":[["Pie",30315],["Bicicleta",3821],["Caballo",315],["Silla de ruedas",7]],"age":[["30 - 60",19421],["< 30",7608],["> 60",7429]],"motivation":[["Religioso y otros",18694],["Religioso",13342],["No religioso",2422]],"spanishFrom":[["Andalucía",2862],["Madrid",2799],["Cataluña",1854],["Comunidad Valenciana",1438],["Galicia",980],["Castilla León",961],["Castilla la Mancha",721],["Pais Vasco",570],["Murcia",441],["Canarias",420],["Extremadura",418],["Asturias",347],["Aragón",288],["Navarra",198],["Cantabria",165],["Baleares",146],["La Rioja",64],["Otra",37],["Melilla",22],["Ceuta",13]],"byCountry":[["España",14744],["Alemania",3025],["Italia",2442],["Estados Unidos",1647],["Portugal",1484],["Francia",1445],["Irlanda",1045],["Reino Unido",785],["Brasil",762],["Australia",670],["Canadá",657],["Polonia",579],["Holanda",516],["Dinamarca",377],["Belgica",334],["Corea",309],["Suiza",265],["México",260],["Austria",253],["Suecia",232],["Argentina",227],["Hungría",156],["Japón",152],["Noruega",151],["Rusia",146],["Finlandia",128],["Colombia",123],["República Checa",115],["Eslovaquia",113],["Sudáfrica",113],["Uruguay",98],["Nueva Zelanda",86],["Venezuela",85],["Lituania",81],["Eslovenia",66],["China",60],["Rumania",53],["Bulgaria",53],["Puerto Rico",42],["Islandia",39],["Chile",38],["Filipinas",37],["Ucrania",31],["Perú",31],["Israel",31],["Luxemburgo",29],["Estonia",26],["Ecuador",25],["Singapur",21],["Malta",17],["Taiwán",16],["Cuba",15],["Costa Rica",15],["Croacia",14],["Bielorrusia",13],["Líbano",13],["Malasia",13],["Letonia",12],["Guatemala",11],["Serbia",10],["Andorra",9],["Islas Feroe",9],["India",7],["Grecia",7],["El Salvador",7],["Rep. Dominicana",6],["Turquía",5],["Panamá",5],["Bolivia",4],["Indonesia",4],["San Marino",4],["Chipre",4],["Nicaragua",4],["Moldavia",4],["Albania",4],["Honduras",4],["Paraguay",3],["Marruecos",3],["Costa de Marfil",3],["Uganda",2],["Kazajistán",2],["Armenia",2],["Pakistán",2],["Tailandia",1],["Irán",1],["Cabo Verde",1],["Emiratos Arabes Unidos",1],["Mongolia",1],["Angola",1],["Bosnia",1],["Papúa - Nueva Guinea",1],["Arabia Saudita",1],["Kenya",1],["Urbekistán",1],["Jamaica",1],["Vanuatu",1],["Argelia",1],["Azerbaiyán",1],["Túnez",1],["Montenegro",1],["Congo",1]],"professions":[["Empleados",8956],["Jubilados",5444],["Estudiantes",4560],["Tecnicos",4558],["Liberales",4175],["Funcionarios",1956],["Profesores",1359],["Parados",783],["Amas de Casa",767],["Directivos",597],["Obreros",443],["Artistas",317],["Sacerdotes",221],["Religiosas",135],["Agricultores",132],["Deportistas",29],["Marinos",25],["Oikoten",1]],"startingCities":[["Sarria",8849],["S. Jean P. Port",3850],["León",1931],["Oporto",1911],["Tui",1670],["Cebreiro",1328],["Ponferrada",1140],["Roncesvalles",1064],["Astorga",919],["Ferrol",898],["Oviedo - C.P.",872],["Valença do Minho",697],["Pamplona",673],["Burgos",591],["Le Puy",585],["Irún",565],["Vilafranca",343],["Francia - C.F.",331],["Lugo - C.P.",317],["Samos",313],["Ourense",309],["Resto C. León C.F.",297],["Triacastela",252],["Resto Portugal",247],["Ponte de Lima",217],["Sevilla",214],["Lisboa",203],["Resto Asturias - C.N",191],["Santander",190],["Ribadeo",163],["Bilbao",153],["Logroño",128],["Avilés",107],["Alemania",105],["Barcelos",102],["Gijón",93],["Vega de Valcarce",90],["Salamanca",90],["San Sebastián",84],["Somport",78],["Holanda",74],["Rates, S. Pedro",68],["Finisterra",65],["Sahagún",65],["Vilalba",64],["Braga",63],["Neda",63],["Madrid - C.F.",58],["Oviedo - C.N.",58],["Lourdes",53],["Fonsagrada - C.P.",52],["Resto Asturias - C.P.",49],["Resto Cantabria",49],["Resto País Vasco - C.N.",48],["Zamora",47],["Baamonde",46],["Porriño",41],["Bélgica",40],["Vigo",38],["Francia - C.N",37],["Arles",35],["Suiza",34],["Puebla de Sanabria",34],["Grandas de Salime - C.P.",33],["Viana do Castelo",32],["Muxia",31],["A Guarda",31],["Xunqueira de Ambia",29],["Carrión de los Condes",29],["Hendaya",28],["Resto Andalucia",27],["Frómista",27],["Sto. Domingo de la Calzada",26],["Jaca",26],["Cataluña - C.F.",25],["Fatima",24],["Resto Europa",24],["Gudiña",24],["Hospital de Orbigo",24],["Granja de Moreruela",23],["Coimbra",22],["Zaragoza",21],["Puente la Reina",21],["R.Pais Vasco C.F.",20],["Verín",20],["Chaves-Portugal",20],["Guimaraes",19],["Abadin",19],["Vezelay",19],["Madrid - V.P.",18],["Navarra",17],["Laza",16],["Mérida",16],["Tineo - C.P.",15],["Molinaseca",15],["Austria",15],["Cáceres",15],["Montserrat",15],["Valencia O.C.",15],["Com. Valenciana - O.C.",14],["Barcelona",13],["Benavente",12],["Resto de Extremadura",12],["Lourenzá",12],["Rabanal del Camino",12],["Cast. la Mancha - C.F.",11],["Roma",11],["Cadavo",11],["Resto C. León - V.P.",11],["Castilla La Mancha VP",10],["Estella",10],["Castilla la Mancha otros",10],["Quiroga",9],["Nájera",9],["París",9],["Italia",8],["Viseu",8],["Ponferrada. C.Inv.",8],["Polonia",8],["Resto Galicia",8],["Granada",7],["Grado",7],["Povoa de Varzim",7],["Mondoñedo",7],["Allariz",5],["Cataluña - O.C.",5],["Canfranc",4],["Huelva",4],["Córdoba",4],["Faro",4],["Reino Unido C.F.",4],["Cruz de Ferro",4],["Baiona",3],["Badajoz",3],["Malaga",3],["Com. Valenciana - C.F.",3],["Eslovaquia",2],["Castrojeriz",2],["Viveiro",2],["Murcia",2],["San Juan de Ortega",2],["Salas",2],["Dinamarca",2],["Fonfría",2],["Luxemburgo",1],["Irlanda C. Ing",1],["A Rúa",1],["Petín",1],["XLa Rioja",1],["Paradela",1],["La Bañeza",1],["Irlanda C.F.",1],["Mella",1],["La Rioja",1]],"startingRegions":[["Lugo",11447],["France",5025],["León",4860],["Portugal",3624],["Navarra",1785],["Pontevedra",1783],["Asturias",1427],["A Coruña",1065],["Gipuzkoa",717],["Burgos",595],["Ourense",405],["Sevilla",241],["Cantabria",239],["La Rioja",165],["Vizcaya",153],["Zamora",116],["Germany",105],["Salamanca",90],["Madrid",76],["Holland",74],["Barcelona",58],["Palencia",56],["Belgium",40],["Switzerland",34],["Valencia",32],["Badajoz",31],["Albacete",31],["Huesca",30],["Europe Other",24],["Zaragoza",21],["Porgugal",20],["Italy",19],["Cáceres",15],["Austria",15],["Poland",8],["Granada",7],["UK",4],["Huelva",4],["Córdoba",4],["Málaga",4],["Slovakia",2],["Murcia",2],["Denmark",2],["Ireland",2],["Luxembourg",1]],"caminos":[["Frances-Camino de",23669],["Portugues-Camino",5407],["Norte-Camino de",1918],["Primitivo-Camino",1359],["Via de la Plata",975],["Ingles-Camino",962],["Muxia-Finisterre",96],["Otros caminos",72]]},"10":{"year":"2014","month":"10","pilgrims":23206,"gender":[["Hombre",12247],["Mujer",10959]],"transport":[["Pie",21372],["Bicicleta",1702],["Caballo",128],["Silla de ruedas",4]],"age":[["30 - 60",12658],["> 60",5597],["< 30",4951]],"motivation":[["Religioso y otros",12329],["Religioso",9476],["No religioso",1401]],"spanishFrom":[["Madrid",2417],["Andalucía",1120],["Cataluña",914],["Comunidad Valenciana",866],["Galicia",828],["Castilla León",553],["Castilla la Mancha",352],["Canarias",306],["Pais Vasco",304],["Asturias",264],["Murcia",192],["Baleares",152],["Aragón",144],["Extremadura",137],["Navarra",88],["Cantabria",85],["La Rioja",46],["Otra",30],["Melilla",6],["Ceuta",4]],"byCountry":[["España",8808],["Estados Unidos",1947],["Alemania",1787],["Francia",1239],["Italia",1141],["Canadá",815],["Australia",783],["Portugal",678],["Corea",627],["Irlanda",607],["Reino Unido",574],["Brasil",506],["Holanda",346],["Polonia",239],["Suiza",214],["Belgica",208],["Dinamarca",203],["Japón",181],["México",154],["Hungría",148],["Noruega",147],["Austria",146],["Suecia",131],["Nueva Zelanda",130],["Argentina",126],["República Checa",117],["Sudáfrica",113],["Finlandia",87],["China",79],["Colombia",77],["Rusia",64],["Lituania",62],["Venezuela",51],["Israel",50],["Filipinas",46],["Uruguay",46],["Bulgaria",39],["Eslovaquia",35],["Letonia",28],["Eslovenia",28],["Malta",27],["Ecuador",26],["Estonia",26],["Rumania",24],["Islandia",21],["Costa Rica",20],["Croacia",19],["Puerto Rico",19],["Ucrania",16],["Singapur",16],["Malasia",14],["Chile",14],["Perú",14],["Grecia",13],["Taiwán",11],["Luxemburgo",11],["India",8],["Namibia",6],["El Salvador",6],["Andorra",5],["Paraguay",5],["Rep. Dominicana",5],["Cuba",5],["Irán",4],["Líbano",4],["Vietnam",4],["Turquía",4],["Bielorrusia",4],["Indonesia",3],["Guatemala",3],["Mongolia",2],["Jordania",2],["Bolivia",2],["Camerún",2],["Túnez",2],["Moldavia",2],["Emiratos Arabes Unidos",2],["Siria",2],["Tailandia",2],["Bosnia",2],["Jamaica",2],["Serbia",2],["Armenia",1],["Marruecos",1],["Bahamas",1],["Mauritania",1],["España",1],["Papúa - Nueva Guinea",1],["Pakistán",1],["Islas Feroe",1],["Albania",1],["Panamá",1],["Cabo Verde",1],["Etiopía",1],["Nicaragua",1],["Liechtensein",1],["San Marino",1],["Macedonia",1],["Camboya",1],["Honduras",1]],"professions":[["Empleados",6079],["Jubilados",4216],["Estudiantes",2961],["Liberales",2927],["Tecnicos",2586],["Profesores",1151],["Funcionarios",1017],["Amas de Casa",588],["Parados",444],["Directivos",411],["Obreros",264],["Artistas",259],["Sacerdotes",96],["Agricultores",85],["Religiosas",82],["Marinos",26],["Deportistas",14]],"startingCities":[["Sarria",5251],["S. Jean P. Port",4954],["Oporto",1048],["León",901],["Tui",744],["Cebreiro",737],["Roncesvalles",723],["Ponferrada",641],["Resto Asturias - C.N",528],["Le Puy",508],["Pamplona",494],["Ferrol",478],["Vilalba",437],["Francia - C.F.",403],["Oviedo - C.P.",401],["Astorga",372],["Irún",372],["Burgos",353],["Valença do Minho",276],["Sevilla",227],["Samos",181],["Vigo",177],["Lisboa",172],["Vilafranca",168],["Lugo - C.P.",158],["Resto C. León C.F.",123],["Ourense",121],["Triacastela",112],["Ponte de Lima",105],["Resto Portugal",98],["Bilbao",87],["Santander",84],["Madrid - C.F.",82],["Logroño",80],["Alemania",74],["San Sebastián",66],["Somport",64],["Lourdes",45],["Gijón",43],["Barcelos",42],["Ribadeo",41],["Holanda",41],["Sahagún",38],["Braga",36],["Resto Cantabria",35],["Granja de Moreruela",34],["Oviedo - C.N.",34],["Finisterra",34],["Salamanca",34],["Porriño",32],["Suiza",32],["Guimaraes",31],["Resto Andalucia",31],["Hendaya",30],["Francia - C.N",27],["Bélgica",26],["Fonsagrada - C.P.",25],["Rates, S. Pedro",25],["Arles",24],["Mondoñedo",24],["Avilés",23],["Zamora",23],["Chaves-Portugal",22],["Vezelay",19],["Mérida",18],["Jaca",17],["Frómista",17],["Muxia",17],["Resto País Vasco - C.N.",16],["A Rúa",16],["Resto Europa",16],["Resto Asturias - C.P.",14],["Cataluña - C.F.",14],["Com. Valenciana - O.C.",14],["París",13],["Madrid - V.P.",13],["Cadavo",13],["Valencia O.C.",12],["Cataluña - O.C.",12],["Grandas de Salime - C.P.",11],["Austria",11],["Tineo - C.P.",11],["Puente la Reina",11],["Rabanal del Camino",10],["Gudiña",10],["Baamonde",10],["Barcelona",10],["Navarra",10],["Baiona",10],["Zaragoza",9],["Carrión de los Condes",9],["Sto. Domingo de la Calzada",8],["R.Pais Vasco C.F.",8],["Coimbra",8],["Lourenzá",8],["Castilla La Mancha VP",7],["Italia",7],["Canfranc",7],["Fatima",6],["Com. Valenciana - C.F.",6],["Castilla la Mancha otros",6],["XGrandas de Salime",6],["Montserrat",6],["Neda",6],["Viana do Castelo",5],["Cáceres",5],["Abadin",5],["Allariz",5],["Ponferrada. C.Inv.",5],["Resto de Extremadura",5],["Hospital de Orbigo",4],["Roma",4],["Estella",4],["Castrojeriz",4],["Granada",4],["Vega de Valcarce",4],["Faro",4],["Salas",4],["Cast. la Mancha - C.F.",3],["La Bañeza",3],["Puebla de Sanabria",3],["Resto C. León - V.P.",3],["A Guarda",3],["Vegadeo",2],["Republica Checa",2],["Córdoba",2],["Nájera",2],["Luxemburgo",2],["Aveiro",2],["Molinaseca",2],["Reino Unido C.F.",2],["Xunqueira de Ambia",2],["Vilabade",2],["Betanzos",2],["Polonia",2],["Huelva",2],["Povoa de Varzim",2],["Badajoz",2],["La Rioja",2],["Laza",2],["Guntín",1],["Fonfría",1],["Hungría",1],["Eslovaquia",1],["Inglaterra C.F.",1],["San Juan de Ortega",1],["Valladolid",1],["Pontedeume",1],["Malaga",1],["Monforte de Lemos",1],["Viseu",1]],"startingRegions":[["Lugo",7006],["France",6087],["León",2274],["Portugal",1861],["Navarra",1242],["Asturias",1077],["Pontevedra",966],["A Coruña",539],["Gipuzkoa",462],["Burgos",358],["Sevilla",258],["Ourense",156],["Cantabria",119],["Madrid",95],["La Rioja",92],["Vizcaya",87],["Germany",74],["Zamora",60],["Barcelona",42],["Holland",41],["Salamanca",34],["Switzerland",32],["Valencia",32],["Palencia",26],["Belgium",26],["Badajoz",25],["Huesca",24],["Porgugal",22],["Europe Other",16],["Albacete",16],["Italy",11],["Austria",11],["Zaragoza",9],["Cáceres",5],["Granada",4],["UK",3],["Córdoba",2],["Luxembourg",2],["Czech Republic",2],["Poland",2],["Huelva",2],["Hungary",1],["Slovakia",1],["Valladolid",1],["Málaga",1]],"caminos":[["Frances-Camino de",16676],["Portugues-Camino",2827],["Norte-Camino de",1880],["Primitivo-Camino",639],["Via de la Plata",580],["Ingles-Camino",487],["Otros caminos",66],["Muxia-Finisterre",51]]},"11":{"year":"2014","month":"11","pilgrims":4803,"gender":[["Hombre",2893],["Mujer",1910]],"transport":[["Pie",4488],["Bicicleta",305],["Caballo",10]],"age":[["30 - 60",2979],["< 30",1126],["> 60",698]],"motivation":[["Religioso y otros",3183],["Religioso",1290],["No religioso",330]],"spanishFrom":[["Andalucía",309],["Galicia",296],["Madrid",271],["Cataluña",261],["Comunidad Valenciana",152],["Baleares",135],["Castilla León",111],["Pais Vasco",61],["Asturias",53],["Murcia",50],["Aragón",48],["Castilla la Mancha",46],["Extremadura",46],["Canarias",32],["Cantabria",25],["La Rioja",10],["Navarra",10],["Melilla",3],["Otra",2],["Ceuta",1]],"byCountry":[["España",1922],["Alemania",325],["Corea",320],["Estados Unidos",316],["Francia",237],["Italia",219],["Portugal",192],["Canadá",163],["Australia",146],["Reino Unido",103],["Brasil",94],["Japón",78],["Irlanda",48],["Suiza",46],["Holanda",43],["Dinamarca",36],["Belgica",36],["Argentina",35],["Austria",34],["Finlandia",33],["Rusia",31],["México",30],["Hungría",29],["Polonia",26],["Venezuela",24],["Nueva Zelanda",21],["República Checa",20],["Suecia",16],["Malta",12],["Sudáfrica",12],["Noruega",9],["Israel",9],["Ucrania",9],["Uruguay",9],["Filipinas",8],["Lituania",8],["Eslovaquia",7],["Colombia",7],["Ecuador",6],["Taiwán",6],["Bulgaria",6],["China",5],["Irán",5],["Perú",5],["Estonia",5],["Singapur",5],["Rumania",4],["India",4],["Guatemala",4],["Eslovenia",4],["Chile",3],["Costa Rica",3],["Cuba",3],["Malasia",3],["Croacia",3],["Luxemburgo",2],["Rep. Dominicana",2],["Letonia",2],["Aruba",1],["Antillas Holandesas",1],["Grecia",1],["Marruecos",1],["Namibia",1],["Pakistán",1],["Albania",1],["Puerto Rico",1],["Armenia",1],["Mongolia",1]],"professions":[["Empleados",1520],["Liberales",577],["Tecnicos",560],["Jubilados",553],["Estudiantes",460],["Parados",256],["Funcionarios",227],["Profesores",214],["Obreros",109],["Amas de Casa",106],["Artistas",90],["Directivos",64],["Agricultores",33],["Marinos",14],["Sacerdotes",10],["Religiosas",8],["Deportistas",2]],"startingCities":[["S. Jean P. Port",1229],["Sarria",750],["Cebreiro",208],["León",190],["Roncesvalles",184],["Oporto",170],["Tui",160],["Pamplona",154],["Ferrol",116],["Ponferrada",112],["Le Puy",109],["Francia - C.F.",105],["Irún",87],["Astorga",87],["Oviedo - C.P.",79],["Sevilla",68],["Burgos",53],["Valença do Minho",52],["Resto Portugal",46],["Lisboa",43],["Lugo - C.P.",42],["Triacastela",37],["Vilafranca",36],["Vilalba",33],["Resto Asturias - C.N",29],["Viana do Castelo",29],["Ourense",27],["Resto C. León C.F.",25],["Ribadeo",22],["Somport",21],["Rates, S. Pedro",20],["Oviedo - C.N.",18],["Alemania",18],["Holanda",16],["Suiza",16],["Logroño",15],["Santander",15],["Lourdes",14],["Jaca",14],["San Sebastián",13],["Hendaya",12],["Ponferrada. C.Inv.",12],["Valencia O.C.",12],["Madrid - C.F.",12],["Braga",11],["Cataluña - C.F.",10],["Sahagún",9],["Avilés",9],["Barcelona",9],["Francia - C.N",8],["Bilbao",8],["Vega de Valcarce",8],["Bélgica",8],["Mérida",8],["Salamanca",8],["Arles",7],["Austria",7],["París",7],["Cataluña - O.C.",6],["Barcelos",6],["Las Médulas",6],["Zaragoza",6],["Resto Europa",6],["Fonsagrada - C.P.",6],["Vezelay",6],["Resto Cantabria",6],["Gijón",5],["Baamonde",5],["Gudiña",5],["Carrión de los Condes",5],["Zamora",5],["Muxia",5],["Ponte de Lima",4],["Laza",4],["Finisterra",4],["Com. Valenciana - O.C.",4],["Sto. Domingo de la Calzada",4],["Nájera",4],["Frómista",4],["Granada",4],["Porriño",3],["Granja de Moreruela",3],["Puebla de Sanabria",3],["Canfranc",3],["A Guarda",3],["Samos",3],["Fatima",3],["Republica Checa",3],["Guimaraes",3],["Montserrat",3],["Tineo - C.P.",2],["Cadavo",2],["Puente la Reina",2],["Resto de Extremadura",2],["Resto País Vasco - C.N.",2],["Verín",2],["Resto C. León - V.P.",2],["Italia",2],["Córdoba",2],["Vigo",1],["Resto Galicia",1],["Castrojeriz",1],["Faro",1],["Castilla la Mancha otros",1],["Polonia",1],["Murcia",1],["Reino Unido C.F.",1],["Resto Africa",1],["Resto Andalucia",1],["Cáceres",1],["Rabanal del Camino",1],["Hospital de Orbigo",1],["R.Pais Vasco C.F.",1],["Esposende",1],["Resto Asturias - C.P.",1],["Estella",1],["Salas",1]],"startingRegions":[["France",1518],["Lugo",1108],["León",489],["Portugal",388],["Navarra",341],["Pontevedra",167],["Asturias",144],["A Coruña",126],["Gipuzkoa",103],["Sevilla",69],["Burgos",54],["Ourense",39],["Barcelona",28],["La Rioja",23],["Cantabria",21],["Germany",18],["Huesca",17],["Switzerland",16],["Valencia",16],["Holland",16],["Madrid",12],["Zamora",11],["Badajoz",10],["Palencia",9],["Salamanca",8],["Vizcaya",8],["Belgium",8],["Austria",7],["Zaragoza",6],["Europe Other",6],["Granada",4],["Czech Republic",3],["Italy",2],["Córdoba",2],["Albacete",1],["Poland",1],["Murcia",1],["UK",1],["Africa",1],["Cáceres",1]],"caminos":[["Frances-Camino de",3528],["Portugues-Camino",556],["Norte-Camino de",272],["Via de la Plata",146],["Primitivo-Camino",133],["Ingles-Camino",116],["Otros caminos",43],["Muxia-Finisterre",9]]},"12":{"year":"2014","month":"12","pilgrims":1870,"gender":[["Hombre",1260],["Mujer",610]],"transport":[["Pie",1733],["Bicicleta",127],["Caballo",10]],"age":[["30 - 60",1176],["< 30",536],["> 60",158]],"motivation":[["Religioso y otros",1135],["Religioso",594],["No religioso",141]],"spanishFrom":[["Galicia",269],["Madrid",192],["Andalucía",93],["Cataluña",88],["Comunidad Valenciana",80],["Castilla León",55],["Baleares",45],["Pais Vasco",35],["Asturias",21],["Murcia",18],["Castilla la Mancha",16],["Canarias",15],["Navarra",10],["Aragón",8],["Cantabria",7],["Extremadura",6],["Ceuta",2],["La Rioja",1]],"byCountry":[["España",961],["Portugal",145],["Corea",116],["Italia",109],["Alemania",78],["Francia",69],["Estados Unidos",64],["Reino Unido",30],["Brasil",28],["Polonia",21],["Holanda",20],["Japón",20],["Canadá",18],["México",18],["Australia",18],["Suiza",13],["Argentina",12],["China",11],["Chile",8],["Austria",8],["Rusia",8],["Belgica",7],["Colombia",7],["Hungría",7],["Uruguay",7],["Irlanda",6],["Eslovaquia",6],["Nueva Zelanda",6],["Venezuela",5],["Dinamarca",4],["Taiwán",4],["Rumania",4],["Noruega",4],["República Checa",3],["Perú",3],["Ucrania",3],["Estonia",3],["Sudáfrica",2],["Lituania",2],["Eslovenia",2],["Suecia",2],["Camerún",1],["Serbia",1],["El Salvador",1],["Malasia",1],["Malta",1],["Israel",1],["Finlandia",1],["Kenya",1]],"professions":[["Empleados",447],["Liberales",294],["Tecnicos",289],["Estudiantes",274],["Parados",112],["Funcionarios",106],["Jubilados",96],["Profesores",94],["Obreros",67],["Amas de Casa",35],["Artistas",15],["Marinos",13],["Directivos",11],["Agricultores",9],["Religiosas",5],["Sacerdotes",2],["Oikoten",1]],"startingCities":[["Sarria",328],["S. Jean P. Port",260],["Tui",114],["Roncesvalles",94],["Ferrol",89],["Oporto",89],["Cebreiro",76],["León",67],["Ponferrada",62],["Valença do Minho",55],["Lugo - C.P.",50],["Pamplona",44],["Ourense",40],["Francia - C.F.",40],["Astorga",30],["Irún",29],["Oviedo - C.P.",29],["Le Puy",21],["Burgos",20],["Vilafranca",18],["Sevilla",15],["Madrid - C.F.",14],["Lisboa",14],["Braga",13],["Alemania",12],["Logroño",12],["Barcelos",10],["Ponte de Lima",10],["Somport",10],["Resto Portugal",10],["Resto C. León C.F.",9],["Triacastela",9],["Suiza",8],["Chaves-Portugal",8],["San Sebastián",6],["Arles",5],["Vega de Valcarce",5],["Valencia O.C.",4],["Samos",4],["Lourdes",4],["Bilbao",4],["Nájera",4],["Sto. Domingo de la Calzada",4],["Hendaya",4],["Gijón",4],["Muxia",4],["Zamora",4],["Oviedo - C.N.",4],["Com. Valenciana - O.C.",3],["Verín",3],["Bélgica",3],["Sahagún",3],["Resto Europa",3],["Jaca",3],["Neda",3],["Resto País Vasco - C.N.",3],["Ribadeo",3],["Finisterra",3],["Salamanca",3],["Resto Andalucia",3],["Cataluña - C.F.",3],["Holanda",3],["Barcelona",3],["Granja de Moreruela",3],["Austria",2],["Montserrat",2],["Rabanal del Camino",2],["Estella",2],["Cataluña - O.C.",2],["Porriño",2],["Polonia",2],["Puente la Reina",2],["Viana do Castelo",2],["Badajoz",2],["Francia - C.N",2],["Gudiña",2],["Córdoba",2],["Castilla la Mancha otros",2],["Vilalba",1],["Resto Cantabria",1],["Cadavo",1],["A Guarda",1],["Dinamarca",1],["Carrión de los Condes",1],["Granada",1],["Resto C. León - V.P.",1],["Malaga",1],["Cáceres",1],["Roma",1],["Reino Unido C.F.",1],["Ponferrada. C.Inv.",1],["Com. Valenciana - C.F.",1],["Vezelay",1],["Fatima",1],["Grandas de Salime - C.P.",1],["Baamonde",1],["Canfranc",1],["París",1],["Frómista",1],["Zaragoza",1],["Republica Checa",1],["Fonsagrada - C.P.",1],["Cruz de Ferro",1]],"startingRegions":[["Lugo",474],["France",348],["Portugal",204],["León",199],["Navarra",142],["Pontevedra",117],["A Coruña",99],["Ourense",45],["Gipuzkoa",38],["Asturias",38],["Burgos",20],["La Rioja",20],["Sevilla",18],["Madrid",14],["Germany",12],["Barcelona",10],["Porgugal",8],["Switzerland",8],["Valencia",8],["Zamora",7],["Vizcaya",4],["Huesca",4],["Belgium",3],["Salamanca",3],["Europe Other",3],["Holland",3],["Albacete",2],["Austria",2],["Badajoz",2],["Córdoba",2],["Poland",2],["Palencia",2],["Denmark",1],["Czech Republic",1],["Málaga",1],["Cáceres",1],["Italy",1],["UK",1],["Cantabria",1],["Zaragoza",1],["Granada",1]],"caminos":[["Frances-Camino de",1205],["Portugues-Camino",321],["Ingles-Camino",92],["Via de la Plata",89],["Primitivo-Camino",82],["Norte-Camino de",62],["Otros caminos",12],["Muxia-Finisterre",7]]},"all":{"year":"2014","month":"","pilgrims":237886,"gender":[["Hombre",128500],["Mujer",109386]],"transport":[["Pie",210944],["Bicicleta",25324],["Silla de ruedas",98],["Caballo",1520]],"age":[["30 - 60",131764],["< 30",67348],["> 60",38774]],"motivation":[["Religioso y otros",120412],["Religioso",101013],["No religioso",16461]],"spanishFrom":[["Madrid",22090],["Andalucía",20255],["Cataluña",13304],["Comunidad Valenciana",13043],["Galicia",7877],["Castilla León",7427],["Castilla la Mancha",6031],["Pais Vasco",4935],["Extremadura",3065],["Murcia",3044],["Canarias",2801],["Asturias",2336],["Aragón",2141],["Baleares",1371],["Navarra",1347],["Cantabria",1031],["Otra",683],["La Rioja",553],["Ceuta",191],["Melilla",99]],"byCountry":[["España",113625],["Italia",20241],["Alemania",16345],["Portugal",11655],["Estados Unidos",11577],["Francia",9345],["Irlanda",5020],["Reino Unido",4395],["Corea",3840],["Australia",3775],["Canadá",3575],["Holanda",3458],["Brasil",3271],["Polonia",2957],["Belgica",1834],["Dinamarca",1741],["México",1654],["Austria",1598],["Suiza",1385],["Argentina",1168],["Japón",1095],["Hungría",1087],["Suecia",1043],["Noruega",805],["República Checa",760],["Rusia",742],["Colombia",693],["Finlandia",680],["Sudáfrica",646],["Nueva Zelanda",642],["Eslovaquia",608],["Venezuela",551],["China",509],["Eslovenia",506],["Lituania",405],["Bulgaria",368],["Rumania",293],["Ecuador",285],["Uruguay",281],["Puerto Rico",219],["Chile",211],["Israel",184],["Perú",180],["Filipinas",173],["Ucrania",169],["Malta",158],["Estonia",157],["Croacia",140],["Luxemburgo",125],["Islandia",112],["Letonia",104],["Taiwán",97],["Costa Rica",96],["Grecia",93],["Singapur",92],["Andorra",75],["Bolivia",63],["Rep. Dominicana",58],["Líbano",58],["Cuba",58],["Paraguay",52],["India",52],["Guatemala",46],["Malasia",45],["Bielorrusia",36],["Turquía",35],["El Salvador",33],["Indonesia",31],["Honduras",29],["Marruecos",27],["Armenia",25],["Serbia",25],["Islas Feroe",23],["Irán",22],["Vietnam",20],["Albania",18],["Panamá",17],["Pakistán",15],["Moldavia",15],["Namibia",15],["Nicaragua",14],["Argelia",13],["Chipre",12],["Mozambique",11],["Rwanda",9],["San Marino",9],["Bosnia",8],["Tailandia",7],["Angola",7],["Cabo Verde",7],["Haití",7],["Georgia",6],["Jordania",6],["Kazajistán",6],["Camerún",6],["Kenya",5],["Siria",5],["Etiopía",5],["Costa de Marfil",5],["Congo",4],["Jamaica",4],["Antillas Holandesas",4],["Uganda",4],["Mongolia",4],["Emiratos Arabes Unidos",4],["Mauricio",3],["Liechtensein",3],["Macedonia",3],["Senegal",3],["Túnez",3],["Mauritania",3],["Benin",2],["Mónaco",2],["Timor Oriental",2],["Montenegro",2],["Egipto",2],["Papúa - Nueva Guinea",2],["Camboya",2],["Bangladesh",1],["Guinea Ecuatorial",1],["Tanzania",1],["Irak",1],["Laos",1],["Fiji",1],["Aruba",1],["Sri Lanka",1],["Maldivas",1],["Somalia",1],["Samoa Occidental",1],["Bermudas",1],["Nigeria",1],["Zimbabwe",1],["Arabia Saudita",1],["Urbekistán",1],["Vanuatu",1],["Azerbaiyán",1],["Santo Tomé y Príncipe",1],["Bahamas",1],["Groenlandia",1]],"professions":[["Empleados",55051],["Estudiantes",45223],["Jubilados",29518],["Liberales",27892],["Tecnicos",26395],["Profesores",17342],["Funcionarios",11843],["Amas de Casa",5222],["Parados",5007],["Directivos",4622],["Obreros",3802],["Artistas",2190],["Sacerdotes",1382],["Religiosas",1104],["Agricultores",792],["Marinos",301],["Deportistas",155],["Oikoten",45]],"startingCities":[["Sarria",58554],["S. Jean P. Port",29344],["Tui",11575],["León",11410],["Oporto",10636],["Cebreiro",10260],["Ponferrada",7979],["Roncesvalles",7848],["Ferrol",6817],["Astorga",5810],["Oviedo - C.P.",4919],["Pamplona",4573],["Valença do Minho",4551],["Irún",3827],["Burgos",3738],["Le Puy",3623],["Ourense",2813],["Vilafranca",2555],["Francia - C.F.",2446],["Resto Portugal",2245],["Lugo - C.P.",2201],["Sevilla",2132],["Triacastela",1919],["Resto Asturias - C.N",1793],["Samos",1684],["Resto C. León C.F.",1654],["Lisboa",1435],["Ribadeo",1401],["Vilalba",1332],["Ponte de Lima",1315],["Santander",1057],["Bilbao",1028],["Logroño",881],["Gijón",801],["Holanda",683],["Avilés",629],["Oviedo - C.N.",619],["Alemania",618],["Somport",605],["Porriño",594],["Braga",565],["Barcelos",542],["Rates, S. Pedro",531],["San Sebastián",513],["Salamanca",506],["Madrid - C.F.",485],["Sahagún",389],["Zamora",379],["Finisterra",363],["Resto Cantabria",362],["Resto Asturias - C.P.",358],["Resto País Vasco - C.N.",333],["Chaves-Portugal",328],["Neda",327],["Baamonde",324],["Lourdes",322],["Bélgica",317],["Muxia",289],["Fonsagrada - C.P.",287],["Guimaraes",282],["Vigo",274],["Puebla de Sanabria",254],["Resto Andalucia",245],["Jaca",245],["Resto Europa",241],["Vega de Valcarce",239],["Laza",235],["Hendaya",232],["Arles",220],["Francia - C.N",220],["Suiza",210],["Mondoñedo",209],["Cataluña - C.F.",187],["Viana do Castelo",184],["Frómista",179],["Gudiña",175],["Sto. Domingo de la Calzada",168],["Verín",163],["Vezelay",162],["Granja de Moreruela",161],["Coimbra",157],["Nájera",156],["Resto Galicia",156],["Carrión de los Condes",152],["A Guarda",151],["Abadin",150],["Puente la Reina",149],["Com. Valenciana - C.F.",146],["Madrid - V.P.",144],["Fatima",134],["Valencia O.C.",134],["Grandas de Salime - C.P.",133],["Tineo - C.P.",131],["París",130],["Rabanal del Camino",126],["R.Pais Vasco C.F.",124],["Zaragoza",123],["Resto C. León - V.P.",121],["Mérida",119],["Navarra",118],["Cadavo",116],["Molinaseca",115],["Com. Valenciana - O.C.",112],["Xunqueira de Ambia",110],["Austria",110],["Cruz de Ferro",106],["Montserrat",106],["Barcelona",105],["Cast. la Mancha - C.F.",105],["Hospital de Orbigo",104],["Castilla la Mancha otros",103],["Lourenzá",97],["Cáceres",93],["Resto de Extremadura",88],["Baiona",86],["Allariz",85],["Salas",82],["Italia",76],["Estella",73],["Granada",70],["Viseu",70],["Castilla La Mancha VP",67],["Ponferrada. C.Inv.",61],["Povoa de Varzim",60],["Cataluña - O.C.",58],["Canfranc",50],["Pontedeume",42],["La Rioja",41],["Aveiro",39],["Faro",37],["Córdoba",37],["Rábade",37],["Roma",35],["Huelva",34],["Monforte de Lemos",33],["Castrojeriz",32],["Malaga",30],["Polonia",30],["XFonsagrada",28],["Badajoz",25],["Benavente",25],["XSan Sebastian",25],["Esposende",24],["Reino Unido C.F.",24],["Murcia",22],["Valladolid",20],["Grado",20],["A Rúa",17],["Fonfría",16],["San Juan de Ortega",16],["XGrandas de Salime",15],["Resto Africa",14],["Republica Checa",13],["Eslovaquia",13],["La Bañeza",13],["La Mesa",13],["Irlanda C.F.",12],["Quiroga",11],["Luxemburgo",9],["Hungría",8],["Las Médulas",6],["Paradela",6],["Vilabade",6],["Andorra",6],["Dinamarca",6],["Vegadeo",6],["XLa Rioja",5],["Betanzos",5],["Sobrado",5],["Viveiro",4],["Valcarlos",3],["Guntín",3],["Covelo",3],["XTineo",3],["Finlandia",3],["Petín",3],["Leyre",3],["Guitiriz",2],["Inglaterra C.F.",2],["Ventas de Narón",2],["Jerusalem",2],["Chantada",2],["",2],["Ortigueira",1],["Corredoiras",1],["Gándara",1],["Borres",1],["Artieda",1],["Peñaseita",1],["Pardellas",1],["Cea",1],["Gonzar",1],["mirallos",1],["Grecia",1],["O Barco de Valdeorras",1],["Rusia",1],["Irlanda C. Ing",1],["Reino Unido C.Ing",1],["Mella",1],["Vincios",1]],"startingRegions":[["Lugo",78646],["France",37304],["León",30689],["Portugal",22783],["Navarra",12767],["Pontevedra",12686],["Asturias",9524],["A Coruña",8009],["Gipuzkoa",4822],["Burgos",3786],["Ourense",3626],["Sevilla",2377],["Cantabria",1419],["La Rioja",1251],["Vizcaya",1028],["Zamora",819],["Holland",683],["Madrid",629],["Germany",618],["Salamanca",506],["Barcelona",456],["Valencia",392],["Palencia",331],["Porgugal",328],["Belgium",317],["Huesca",295],["Albacete",275],["Europe Other",241],["Badajoz",232],["Switzerland",210],["Zaragoza",124],["Italy",111],["Austria",110],["Cáceres",93],["Huelva",71],["Granada",70],["Córdoba",37],["Málaga",31],["Poland",30],["UK",27],["Murcia",22],["Valladolid",20],["Africa",14],["Slovakia",13],["Ireland",13],["Czech Republic",13],["Luxembourg",9],["Hungary",8],["Andorra",6],["Denmark",6],["Finland",3],["City&nbsp;Was Blank",2],["Israel",2],["Greece",1],["Russia",1]],"caminos":[["Frances-Camino de",161994],["Portugues-Camino",35491],["Norte-Camino de",15071],["Via de la Plata",8490],["Primitivo-Camino",8275],["Ingles-Camino",7194],["Otros caminos",719],["Muxia-Finisterre",652]]}},"2015":{"1":{"year":"2015","month":"1","pilgrims":1217,"gender":[["Hombre",783],["Mujer",434]],"transport":[["Pie",1158],["Bicicleta",59]],"age":[["30 - 60",743],["< 30",421],["> 60",53]],"motivation":[["Religioso y otros",745],["Religioso",346],["No religioso",126]],"spanishFrom":[["Galicia",96],["Comunidad Valenciana",87],["Madrid",68],["Cataluña",59],["Andalucía",52],["Baleares",25],["Castilla León",22],["Pais Vasco",15],["Castilla la Mancha",12],["Navarra",11],["Canarias",11],["Murcia",10],["Asturias",9],["Extremadura",6],["Aragón",4],["Ceuta",2],["La Rioja",2],["Cantabria",1],["Otra",1]],"byCountry":[["España",493],["Corea",202],["Italia",80],["Portugal",69],["Estados Unidos",65],["Alemania",52],["Brasil",29],["República Checa",21],["Francia",20],["Argentina",12],["Rusia",12],["Reino Unido",11],["Polonia",10],["Australia",9],["Austria",8],["Japón",8],["China",7],["México",7],["Hungría",7],["Canadá",7],["Dinamarca",7],["Irlanda",7],["Suiza",7],["Rumania",6],["Uruguay",6],["Suecia",5],["Belgica",5],["Colombia",4],["Israel",3],["Ucrania",3],["Eslovaquia",3],["Lituania",3],["Filipinas",3],["Ecuador",2],["Angola",2],["Nueva Zelanda",2],["Guatemala",2],["Armenia",2],["Venezuela",2],["Luxemburgo",2],["Chipre",1],["Chile",1],["Moldavia",1],["Malasia",1],["Singapur",1],["Taiwán",1],["Indonesia",1],["Letonia",1],["Perú",1],["Islandia",1],["India",1],["Holanda",1]],"professions":[["Estudiantes",290],["Empleados",250],["Liberales",229],["Tecnicos",115],["Profesores",95],["Funcionarios",72],["Parados",46],["Jubilados",32],["Obreros",25],["Artistas",13],["Amas de Casa",13],["Sacerdotes",11],["Marinos",8],["Directivos",7],["Agricultores",4],["Religiosas",4],["Deportistas",3]],"startingCities":[["Sarria",234],["S. Jean P. Port",186],["Cebreiro",102],["León",72],["Oporto",72],["Tui",62],["Ferrol",50],["Pamplona",46],["Ponferrada",41],["Roncesvalles",31],["Astorga",27],["Vilafranca",24],["Burgos",23],["Valença do Minho",19],["A Guarda",15],["Ourense",14],["Rates, S. Pedro",11],["Puebla de Sanabria",10],["Sevilla",8],["Ponferrada. C.Inv.",8],["Lisboa",8],["Ponte de Lima",7],["Oviedo - C.P.",7],["Logroño",7],["Irún",6],["Lugo - C.P.",6],["Triacastela",6],["Resto Portugal",5],["Finisterra",5],["Madrid - C.F.",5],["Le Puy",5],["Francia - C.F.",5],["Esposende",4],["Quiroga",4],["Suiza",4],["Samos",4],["Somport",4],["Resto de Extremadura",4],["Braga",4],["Muxia",4],["Gijón",3],["Montserrat",3],["Zamora",3],["Resto C. León C.F.",3],["Viana do Castelo",3],["Resto Andalucia",2],["Fonsagrada - C.P.",2],["Barcelona",2],["Coimbra",2],["Oviedo - C.N.",2],["Gudiña",2],["Republica Checa",2],["Valencia O.C.",2],["Avilés",2],["Vigo",2],["Chantada",2],["Sahagún",2],["Rabanal del Camino",2],["Bilbao",1],["Bélgica",1],["Cataluña - C.F.",1],["Neda",1],["Lourenzá",1],["Francia - C.N",1],["Holanda",1],["San Sebastián",1],["Abadin",1],["Lourdes",1],["Italia",1],["Chaves-Portugal",1],["Porriño",1],["Leyre",1],["Granada",1],["Vezelay",1],["Resto Galicia",1]],"startingRegions":[["Lugo",362],["France",203],["León",179],["Portugal",131],["Pontevedra",80],["Navarra",78],["A Coruña",61],["Burgos",23],["Ourense",20],["Asturias",14],["Zamora",13],["Sevilla",10],["La Rioja",7],["Gipuzkoa",7],["Barcelona",6],["Madrid",5],["Badajoz",4],["Switzerland",4],["Czech Republic",2],["Valencia",2],["Granada",1],["Holland",1],["Vizcaya",1],["Italy",1],["Porgugal",1],["Belgium",1]],"caminos":[["Frances-Camino de",847],["Portugues-Camino",215],["Ingles-Camino",51],["Via de la Plata",45],["Norte-Camino de",18],["Otros caminos",15],["Primitivo-Camino",15],["Muxia-Finisterre",9],["Camino de Invierno",2]]},"2":{"year":"2015","month":"2","pilgrims":1544,"gender":[["Hombre",951],["Mujer",593]],"transport":[["Pie",1468],["Bicicleta",76]],"age":[["< 30",799],["30 - 60",672],["> 60",73]],"motivation":[["Religioso y otros",947],["Religioso",475],["No religioso",122]],"spanishFrom":[["Andalucía",108],["Madrid",93],["Galicia",85],["Castilla León",75],["Cataluña",64],["Comunidad Valenciana",61],["Castilla la Mancha",48],["Canarias",41],["Murcia",31],["Baleares",19],["Extremadura",16],["Pais Vasco",7],["Asturias",6],["Otra",3],["Cantabria",3],["Navarra",3],["Aragón",2],["La Rioja",1],["Ceuta",1]],"byCountry":[["España",667],["Portugal",233],["Corea",146],["Irlanda",80],["Alemania",54],["Italia",49],["Estados Unidos",43],["Brasil",26],["China",21],["Holanda",19],["Japón",15],["Francia",14],["México",13],["Reino Unido",13],["Rusia",11],["Andorra",11],["Canadá",9],["Austria",9],["Polonia",8],["Belgica",8],["Dinamarca",6],["Lituania",6],["Argentina",6],["Bolivia",6],["Sudáfrica",5],["República Checa",5],["Suiza",5],["Chile",5],["Hungría",4],["Noruega",4],["Colombia",4],["Nueva Zelanda",3],["Estonia",3],["Perú",3],["Rumania",3],["Bulgaria",3],["Australia",3],["Uruguay",3],["Ecuador",3],["Letonia",2],["Moldavia",2],["Suecia",2],["Venezuela",2],["Rep. Dominicana",1],["Bielorrusia",1],["Taiwán",1],["Malta",1],["Israel",1],["Ucrania",1],["Puerto Rico",1]],"professions":[["Estudiantes",627],["Empleados",301],["Liberales",143],["Tecnicos",132],["Profesores",94],["Funcionarios",52],["Jubilados",50],["Obreros",33],["Parados",33],["Artistas",22],["Amas de Casa",19],["Sacerdotes",9],["Directivos",8],["Agricultores",7],["Religiosas",6],["Marinos",5],["Deportistas",3]],"startingCities":[["Sarria",528],["S. Jean P. Port",176],["Cebreiro",96],["Valença do Minho",68],["Tui",65],["Oporto",63],["Ponferrada",63],["Pamplona",52],["León",48],["Triacastela",48],["Ourense",29],["Ferrol",23],["Samos",19],["Roncesvalles",19],["Burgos",17],["Vilafranca",16],["Astorga",15],["Oviedo - C.P.",14],["Ribadeo",13],["Resto Portugal",13],["Irún",11],["Sevilla",10],["Ponte de Lima",10],["Resto C. León C.F.",8],["Lisboa",7],["Chaves-Portugal",6],["Lugo - C.P.",6],["Bilbao",6],["Vigo",6],["Baamonde",5],["Rates, S. Pedro",5],["Logroño",4],["Madrid - C.F.",4],["Resto Asturias - C.N",4],["Gijón",4],["Fonsagrada - C.P.",4],["Muxia",4],["Granja de Moreruela",3],["Salamanca",3],["Barcelos",3],["Francia - C.F.",3],["Vilalba",3],["Oviedo - C.N.",3],["Verín",2],["Finisterra",2],["San Sebastián",2],["Malaga",2],["Le Puy",2],["Zamora",2],["Ponferrada. C.Inv.",2],["Montserrat",2],["Granada",2],["Avilés",1],["Esposende",1],["Cataluña - C.F.",1],["Valencia O.C.",1],["Santander",1],["A Guarda",1],["Hendaya",1],["Vezelay",1],["Roma",1],["Guimaraes",1],["Navarra",1],["Alemania",1],["Puente la Reina",1],["Somport",1],["Resto de Extremadura",1],["Suiza",1],["La Rioja",1],["Allariz",1],["Coimbra",1]],"startingRegions":[["Lugo",722],["France",184],["Portugal",171],["León",152],["Navarra",73],["Pontevedra",72],["Ourense",33],["A Coruña",29],["Asturias",26],["Burgos",17],["Gipuzkoa",13],["Sevilla",10],["Porgugal",6],["Vizcaya",6],["La Rioja",5],["Zamora",5],["Madrid",4],["Salamanca",3],["Barcelona",3],["Málaga",2],["Granada",2],["Valencia",1],["Cantabria",1],["Italy",1],["Germany",1],["Badajoz",1],["Switzerland",1]],"caminos":[["Frances-Camino de",1129],["Portugues-Camino",244],["Via de la Plata",61],["Norte-Camino de",54],["Primitivo-Camino",24],["Ingles-Camino",23],["Muxia-Finisterre",6],["Camino de Invierno",2],["Otros caminos",1]]},"3":{"year":"2015","month":"3","pilgrims":5080,"gender":[["Hombre",2832],["Mujer",2248]],"transport":[["Pie",4806],["Bicicleta",270],["Silla de ruedas",4]],"age":[["< 30",2436],["30 - 60",2229],["> 60",415]],"motivation":[["Religioso y otros",2884],["Religioso",1783],["No religioso",413]],"spanishFrom":[["Madrid",924],["Andalucía",440],["Galicia",359],["Comunidad Valenciana",289],["Castilla León",204],["Castilla la Mancha",164],["Cataluña",156],["Canarias",75],["Extremadura",61],["Baleares",60],["Pais Vasco",48],["Murcia",37],["Asturias",32],["Aragón",13],["Navarra",10],["Cantabria",8],["La Rioja",5],["Ceuta",2],["Otra",2],["Melilla",2]],"byCountry":[["España",2891],["Portugal",449],["Alemania",437],["Estados Unidos",183],["Italia",151],["Corea",110],["Reino Unido",80],["Japón",60],["Irlanda",59],["Brasil",54],["Francia",54],["Canadá",49],["México",42],["Australia",35],["Polonia",34],["Holanda",34],["Argentina",33],["Suiza",27],["Dinamarca",25],["Rusia",24],["China",24],["Belgica",20],["Austria",19],["Noruega",16],["Colombia",16],["Hungría",14],["Venezuela",12],["Lituania",10],["Eslovaquia",8],["Finlandia",7],["Suecia",7],["Ecuador",6],["Chile",6],["Malta",6],["Rumania",5],["Sudáfrica",5],["Estonia",4],["Bulgaria",4],["Filipinas",4],["Singapur",3],["Islandia",3],["Nueva Zelanda",3],["Malasia",3],["Perú",3],["Rep. Dominicana",3],["Eslovenia",3],["Uruguay",3],["Ucrania",2],["Israel",2],["India",2],["Bolivia",2],["Mongolia",2],["Guatemala",2],["República Checa",2],["Puerto Rico",2],["Costa Rica",2],["Bielorrusia",1],["Taiwán",1],["Honduras",1],["Luxemburgo",1],["Angola",1],["Macedonia",1],["Moldavia",1],["Chipre",1],["Serbia",1],["Andorra",1],["Grecia",1],["Paraguay",1],["Bermudas",1],["Croacia",1]],"professions":[["Estudiantes",1988],["Empleados",838],["Liberales",614],["Tecnicos",467],["Jubilados",312],["Profesores",267],["Funcionarios",149],["Parados",149],["Obreros",89],["Amas de Casa",68],["Directivos",40],["Artistas",31],["Religiosas",18],["Sacerdotes",16],["Agricultores",15],["Marinos",14],["Deportistas",5]],"startingCities":[["Sarria",1904],["Cebreiro",293],["S. Jean P. Port",290],["Oporto",265],["Tui",186],["Valença do Minho",166],["Ponferrada",162],["León",161],["Roncesvalles",148],["Ferrol",137],["Lugo - C.P.",120],["Vigo",105],["Pamplona",98],["Astorga",91],["Ourense",89],["Burgos",57],["Oviedo - C.P.",55],["Samos",51],["Lisboa",48],["Sevilla",48],["Resto Portugal",31],["Fonsagrada - C.P.",30],["Ponte de Lima",30],["Irún",29],["Triacastela",26],["Vilafranca",25],["Rates, S. Pedro",24],["Resto Asturias - C.N",19],["Logroño",18],["Muxia",17],["Le Puy",17],["Oviedo - C.N.",17],["Finisterra",16],["Salamanca",16],["Barcelos",15],["Resto C. León C.F.",15],["Santander",14],["Ribadeo",12],["Viana do Castelo",12],["Braga",11],["Neda",11],["Puebla de Sanabria",10],["Sahagún",9],["Guimaraes",8],["Gijón",8],["Francia - C.F.",8],["Bilbao",8],["Coimbra",8],["Resto País Vasco - C.N.",7],["Resto Asturias - C.P.",7],["Zamora",6],["Avilés",6],["Resto Europa",5],["A Guarda",5],["Mérida",4],["Somport",4],["Madrid - C.F.",4],["Valencia O.C.",4],["Madrid - V.P.",3],["Tineo - C.P.",3],["Bélgica",3],["Montserrat",3],["Cataluña - C.F.",3],["Vilalba",3],["Com. Valenciana - O.C.",3],["Arles",3],["Resto C. León - V.P.",3],["Vezelay",3],["Valladolid",3],["Faro",2],["Hospital de Orbigo",2],["Vegadeo",2],["Baamonde",2],["Córdoba",2],["Salas",2],["Allariz",2],["San Sebastián",2],["O Barco de Valdeorras",2],["Viseu",2],["Malaga",2],["Francia - C.N",2],["Ponferrada. C.Inv.",2],["Laza",2],["Porriño",2],["Granja de Moreruela",2],["Barcelona",2],["Resto Andalucia",2],["Gudiña",1],["Fatima",1],["Frómista",1],["Chaves-Portugal",1],["Cast. la Mancha - C.F.",1],["Resto Cantabria",1],["Cáceres",1],["Verín",1],["Castilla la Mancha otros",1],["Castilla La Mancha VP",1],["Nájera",1],["Jaca",1],["Eslovaquia",1],["Pardellas",1],["Alemania",1],["Suiza",1],["R.Pais Vasco C.F.",1],["Sto. Domingo de la Calzada",1],["París",1],["Lourdes",1],["Irlanda C.F.",1]],"startingRegions":[["Lugo",2441],["Portugal",623],["León",470],["France",329],["Pontevedra",299],["Navarra",246],["A Coruña",181],["Asturias",119],["Ourense",97],["Burgos",57],["Sevilla",50],["Gipuzkoa",39],["La Rioja",20],["Zamora",18],["Salamanca",16],["Cantabria",15],["Vizcaya",8],["Barcelona",8],["Madrid",7],["Valencia",7],["Europe Other",5],["Badajoz",4],["Albacete",3],["Valladolid",3],["Belgium",3],["Málaga",2],["Córdoba",2],["Palencia",1],["Porgugal",1],["Cáceres",1],["Huesca",1],["Slovakia",1],["Germany",1],["Switzerland",1],["Ireland",1]],"caminos":[["Frances-Camino de",3417],["Portugues-Camino",921],["Primitivo-Camino",218],["Via de la Plata",199],["Ingles-Camino",148],["Norte-Camino de",132],["Muxia-Finisterre",33],["Otros caminos",8],["Camino de Invierno",4]]},"4":{"year":"2015","month":"4","pilgrims":17722,"gender":[["Hombre",9186],["Mujer",8536]],"transport":[["Pie",16181],["Bicicleta",1485],["Caballo",55],["Silla de ruedas",1]],"age":[["30 - 60",9966],["< 30",5090],["> 60",2666]],"motivation":[["Religioso y otros",9533],["Religioso",6453],["No religioso",1736]],"spanishFrom":[["Madrid",1486],["Galicia",1326],["Andalucía",1016],["Comunidad Valenciana",996],["Cataluña",944],["Castilla León",697],["Castilla la Mancha",457],["Pais Vasco",412],["Canarias",260],["Extremadura",244],["Murcia",210],["Baleares",205],["Asturias",127],["Aragón",106],["Cantabria",72],["Navarra",71],["La Rioja",55],["Ceuta",24],["Otra",15],["Melilla",5]],"byCountry":[["España",8728],["Alemania",1508],["Portugal",1237],["Estados Unidos",684],["Italia",663],["Francia",538],["Irlanda",532],["Reino Unido",468],["Corea",342],["Australia",257],["Brasil",233],["Canadá",214],["Holanda",203],["Dinamarca",159],["Belgica",138],["Suiza",128],["México",120],["Argentina",119],["Polonia",107],["Austria",103],["Finlandia",93],["China",93],["Suecia",85],["Sudáfrica",78],["República Checa",74],["Japón",67],["Venezuela",62],["Colombia",55],["Hungría",46],["Rusia",43],["Lituania",40],["Noruega",39],["Nueva Zelanda",28],["Islandia",28],["Bulgaria",24],["Rumania",23],["Chile",23],["Eslovaquia",21],["Perú",20],["Estonia",19],["Ecuador",19],["Puerto Rico",16],["Malasia",16],["Eslovenia",14],["Uruguay",13],["Taiwán",12],["Filipinas",11],["Botswana",11],["Indonesia",10],["India",10],["Rep. Dominicana",9],["Singapur",9],["Malta",9],["Croacia",9],["Israel",8],["Ucrania",8],["Cuba",8],["Panamá",7],["Marruecos",6],["Turquía",5],["Líbano",5],["Grecia",5],["Honduras",5],["Paraguay",4],["Bolivia",4],["Bielorrusia",3],["Letonia",3],["Luxemburgo",3],["Andorra",3],["Islas Feroe",3],["Kenya",2],["Albania",2],["Nicaragua",2],["Chipre",2],["Serbia",2],["Camerún",2],["Namibia",2],["Zambia",2],["Tailandia",1],["Guatemala",1],["Afganistán",1],["El Salvador",1],["Jordania",1],["Guyana",1],["Arabia Saudita",1],["San Marino",1],["Irán",1],["Armenia",1],["Sudán",1],["Costa Rica",1],["Georgia",1],["Bosnia",1],["Argelia",1],["Togo",1]],"professions":[["Empleados",4293],["Estudiantes",3133],["Liberales",2796],["Jubilados",1995],["Tecnicos",1638],["Profesores",1274],["Funcionarios",811],["Amas de Casa",390],["Directivos",377],["Parados",356],["Obreros",287],["Artistas",131],["Sacerdotes",77],["Religiosas",73],["Agricultores",52],["Marinos",18],["Deportistas",17],["Oikoten",4]],"startingCities":[["Sarria",5548],["S. Jean P. Port",1296],["Tui",1196],["Oporto",941],["Cebreiro",863],["Ferrol",660],["León",647],["Valença do Minho",602],["Ponferrada",544],["Roncesvalles",436],["Astorga",349],["Lugo - C.P.",346],["Pamplona",303],["Ourense",230],["Burgos",217],["Vilafranca",212],["Sevilla",207],["Triacastela",194],["Oviedo - C.P.",189],["Le Puy",166],["Resto Portugal",156],["Irún",128],["Ponte de Lima",124],["Resto Asturias - C.P.",114],["Lisboa",113],["Francia - C.F.",93],["Oviedo - C.N.",91],["Samos",90],["Resto C. León C.F.",87],["Guimaraes",71],["Ribadeo",64],["Bilbao",56],["Santander",53],["Logroño",46],["Resto Asturias - C.N",45],["Braga",44],["Rates, S. Pedro",43],["Gijón",42],["Barcelos",41],["Chaves-Portugal",41],["Madrid - C.F.",37],["Porriño",34],["Salamanca",31],["Gudiña",30],["Verín",28],["Resto Andalucia",26],["San Sebastián",25],["Avilés",23],["Resto País Vasco - C.N.",23],["Abadin",22],["Lourenzá",21],["Zamora",21],["Alemania",21],["Puebla de Sanabria",21],["Vilalba",20],["Laza",20],["Somport",20],["Viana do Castelo",19],["Finisterra",18],["Vigo",17],["Granada",16],["Sahagún",16],["Coimbra",16],["Francia - C.N",15],["Fonsagrada - C.P.",15],["Hospital de Orbigo",15],["Sto. Domingo de la Calzada",14],["Resto Europa",14],["Baamonde",13],["Montserrat",13],["Cadavo",13],["Puente la Reina",12],["Muxia",12],["Jaca",12],["Cataluña - C.F.",12],["Estella",12],["Viseu",11],["Resto Cantabria",11],["Frómista",11],["Ponferrada. C.Inv.",11],["Grandas de Salime - C.P.",11],["Com. Valenciana - O.C.",11],["Huelva",10],["Lourdes",10],["Neda",9],["Zaragoza",9],["Suiza",9],["Tineo - C.P.",8],["Madrid - V.P.",8],["Resto C. León - V.P.",8],["Carrión de los Condes",8],["Molinaseca",8],["Bélgica",8],["Com. Valenciana - C.F.",8],["Navarra",7],["Granja de Moreruela",7],["Holanda",7],["Malaga",7],["Mérida",7],["Fatima",6],["Hendaya",6],["Barcelona",6],["A Guarda",5],["Castrojeriz",5],["Rabanal del Camino",5],["Italia",5],["Mondoñedo",5],["Cruz de Ferro",5],["R.Pais Vasco C.F.",5],["Vega de Valcarce",4],["San Juan de Ortega",4],["Povoa de Varzim",4],["Badajoz",4],["Arles",4],["Xunqueira de Ambia",4],["Vezelay",4],["Valladolid",4],["Resto de Extremadura",3],["Allariz",3],["Esposende",3],["Cáceres",3],["Canfranc",3],["Castilla La Mancha VP",3],["Valencia O.C.",3],["Benavente",2],["Córdoba",2],["Vilabade",2],["Nájera",2],["Salas",2],["Baiona",2],["La Rioja",2],["París",2],["Vegadeo",2],["Austria",1],["Faro",1],["Castilla la Mancha otros",1],["Dinamarca",1],["Fonfría",1],["Aveiro",1],["Betanzos",1],["Cast. la Mancha - C.F.",1],["Monforte de Lemos",1]],"startingRegions":[["Lugo",7218],["Portugal",2193],["León",1911],["France",1616],["Pontevedra",1254],["Navarra",770],["A Coruña",700],["Asturias",527],["Ourense",318],["Sevilla",233],["Burgos",226],["Gipuzkoa",181],["Cantabria",64],["La Rioja",64],["Vizcaya",56],["Zamora",51],["Madrid",45],["Porgugal",41],["Salamanca",31],["Barcelona",31],["Valencia",22],["Germany",21],["Palencia",19],["Granada",16],["Huesca",15],["Badajoz",14],["Europe Other",14],["Huelva",10],["Switzerland",9],["Zaragoza",9],["Belgium",8],["Holland",7],["Málaga",7],["Italy",5],["Albacete",5],["Valladolid",4],["Cáceres",3],["Córdoba",2],["Austria",1],["Denmark",1]],"caminos":[["Frances-Camino de",11433],["Portugues-Camino",3450],["Via de la Plata",746],["Primitivo-Camino",700],["Ingles-Camino",670],["Norte-Camino de",666],["Muxia-Finisterre",30],["Otros caminos",15],["Camino de Invierno",12]]},"5":{"year":"2015","month":"5","pilgrims":31078,"gender":[["Hombre",17127],["Mujer",13951]],"transport":[["Pie",27090],["Bicicleta",3943],["Caballo",42],["Silla de ruedas",3]],"age":[["30 - 60",18001],["> 60",8524],["< 30",4553]],"motivation":[["Religioso y otros",17522],["Religioso",11349],["No religioso",2207]],"spanishFrom":[["Madrid",1657],["Cataluña",1430],["Andalucía",1211],["Galicia",877],["Comunidad Valenciana",793],["Castilla León",524],["Castilla la Mancha",430],["Pais Vasco",412],["Canarias",396],["Extremadura",282],["Aragón",258],["Asturias",168],["Baleares",152],["Murcia",134],["Navarra",98],["Cantabria",92],["La Rioja",55],["Otra",48],["Ceuta",12],["Melilla",8]],"byCountry":[["España",9037],["Alemania",3674],["Portugal",2292],["Italia",2250],["Estados Unidos",2034],["Francia",1664],["Irlanda",1056],["Reino Unido",957],["Brasil",814],["Holanda",779],["Australia",664],["Canadá",614],["Corea",536],["Austria",340],["Polonia",339],["Belgica",333],["Dinamarca",329],["Argentina",229],["Suiza",229],["Finlandia",221],["México",215],["Rusia",175],["Japón",174],["Suecia",157],["República Checa",145],["Hungría",141],["Venezuela",124],["Sudáfrica",114],["Colombia",106],["Nueva Zelanda",105],["Eslovenia",97],["Noruega",96],["China",87],["Malta",76],["Lituania",76],["Uruguay",73],["Eslovaquia",71],["Bulgaria",64],["Chile",60],["Estonia",38],["Rumania",35],["Puerto Rico",29],["Filipinas",28],["Letonia",28],["Ecuador",23],["Islandia",23],["Croacia",22],["Luxemburgo",22],["Israel",21],["Ucrania",19],["Andorra",18],["Malasia",17],["Perú",16],["Singapur",16],["Armenia",15],["Taiwán",15],["Bielorrusia",15],["Indonesia",9],["Rep. Dominicana",9],["Costa Rica",7],["El Salvador",7],["Tailandia",6],["Jordania",6],["Líbano",6],["India",5],["Guatemala",4],["Panamá",4],["Serbia",3],["Honduras",3],["Cuba",3],["Vietnam",3],["Angola",3],["Paraguay",3],["Liechtensein",3],["Túnez",3],["Bolivia",3],["Siria",3],["Grecia",3],["Albania",2],["Egipto",2],["Antigua y Barbuda",2],["Nicaragua",2],["Kazajistán",2],["Jamaica",2],["Bermudas",2],["Argelia",2],["Bosnia",2],["Surinam",1],["Camerún",1],["Turquía",1],["Chipre",1],["Brunei",1],["Moldavia",1],["Ghana",1],["Irán",1],["Marruecos",1],["Islas Feroe",1],["Rwanda",1],["Aruba",1],["Haití",1],["Zambia",1],["Togo",1],["Groenlandia",1],["Urbekistán",1]],"professions":[["Empleados",8181],["Jubilados",6594],["Liberales",4384],["Tecnicos",3329],["Estudiantes",2342],["Funcionarios",1690],["Profesores",1268],["Amas de Casa",776],["Parados",763],["Directivos",669],["Obreros",413],["Artistas",290],["Religiosas",134],["Sacerdotes",105],["Agricultores",76],["Deportistas",38],["Marinos",25],["Oikoten",1]],"startingCities":[["Sarria",6883],["S. Jean P. Port",4400],["Oporto",2363],["León",1579],["Tui",1158],["Cebreiro",1001],["Roncesvalles",959],["Ponferrada",896],["Ferrol",761],["Astorga",752],["Pamplona",733],["Oviedo - C.P.",714],["Le Puy",648],["Sevilla",572],["Burgos",552],["Valença do Minho",483],["Resto Portugal",437],["Irún",397],["Lisboa",366],["Francia - C.F.",302],["Triacastela",298],["Ourense",284],["Lugo - C.P.",275],["Ponte de Lima",252],["Vilafranca",213],["Rates, S. Pedro",179],["Samos",131],["Chaves-Portugal",130],["Bilbao",123],["Santander",111],["Resto Asturias - C.N",109],["Alemania",107],["Braga",106],["Guimaraes",103],["Logroño",102],["Resto C. León C.F.",100],["Salamanca",97],["Gijón",95],["Barcelos",83],["Resto Europa",83],["Holanda",78],["Madrid - C.F.",77],["San Sebastián",70],["Ribadeo",67],["Oviedo - C.N.",67],["Vilalba",63],["Somport",60],["Sahagún",58],["Zamora",51],["Muxia",50],["Puebla de Sanabria",49],["Bélgica",45],["Mérida",44],["Finisterra",42],["Avilés",42],["Coimbra",41],["Resto Cantabria",40],["Hospital de Orbigo",37],["Arles",35],["Viana do Castelo",35],["Lourdes",34],["Allariz",33],["Francia - C.N",32],["Porriño",31],["Com. Valenciana - O.C.",30],["Rabanal del Camino",29],["Fonsagrada - C.P.",28],["A Guarda",26],["Resto País Vasco - C.N.",25],["Resto Andalucia",25],["Baiona",25],["Suiza",24],["Grandas de Salime - C.P.",24],["Fatima",24],["Povoa de Varzim",22],["Frómista",21],["Vezelay",21],["Hendaya",21],["Granja de Moreruela",19],["Resto C. León - V.P.",19],["Vigo",19],["Neda",18],["Barcelona",18],["Carrión de los Condes",17],["Cataluña - C.F.",17],["Austria",17],["Jaca",17],["R.Pais Vasco C.F.",17],["Resto Asturias - C.P.",17],["Cast. la Mancha - C.F.",16],["Baamonde",16],["Granada",16],["Sto. Domingo de la Calzada",15],["Gudiña",15],["Viseu",14],["Ponferrada. C.Inv.",13],["Tineo - C.P.",13],["Com. Valenciana - C.F.",12],["Malaga",12],["Resto de Extremadura",11],["Montserrat",10],["Estella",10],["Zaragoza",10],["Cáceres",10],["Madrid - V.P.",10],["Puente la Reina",10],["Canfranc",9],["Verín",9],["París",9],["Cataluña - O.C.",8],["Vega de Valcarce",8],["Lourenzá",7],["Abadin",7],["Fonfría",6],["Cruz de Ferro",6],["Mondoñedo",6],["Roma",6],["Grado",6],["Valencia O.C.",6],["La Rioja",5],["Cadavo",5],["Reino Unido C.F.",5],["Polonia",5],["Molinaseca",5],["Huelva",5],["Córdoba",5],["",5],["Resto Galicia",4],["Castilla la Mancha otros",4],["Aveiro",4],["Faro",4],["Monforte de Lemos",4],["Castilla La Mancha VP",4],["Esposende",4],["Valladolid",4],["Andorra",4],["Navarra",3],["A Rúa",3],["San Juan de Ortega",3],["Castrojeriz",3],["Italia",3],["Laza",3],["Benavente",2],["Vilabade",2],["Badajoz",2],["Murcia",2],["Luxemburgo",2],["Salas",2],["Valcarlos",1],["Las Médulas",1],["Nájera",1],["Lalín",1],["Irlanda C.F.",1],["mirallos",1],["Finlandia",1],["Hungría",1]],"startingRegions":[["Lugo",8800],["France",5562],["Portugal",4516],["León",3716],["Navarra",1716],["Pontevedra",1260],["Asturias",1089],["A Coruña",875],["Sevilla",597],["Burgos",558],["Gipuzkoa",509],["Ourense",351],["Cantabria",151],["Porgugal",130],["Vizcaya",123],["La Rioja",123],["Zamora",121],["Germany",107],["Salamanca",97],["Madrid",87],["Europe Other",83],["Holland",78],["Badajoz",57],["Barcelona",53],["Valencia",48],["Belgium",45],["Palencia",38],["Huesca",26],["Switzerland",24],["Albacete",24],["Austria",17],["Granada",16],["Málaga",12],["Zaragoza",10],["Cáceres",10],["Italy",9],["City&nbsp;Was Blank",5],["UK",5],["Poland",5],["Huelva",5],["Córdoba",5],["Andorra",4],["Valladolid",4],["Murcia",2],["Luxembourg",2],["Hungary",1],["Ireland",1],["Finland",1]],"caminos":[["Frances-Camino de",20525],["Portugues-Camino",5779],["Via de la Plata",1432],["Norte-Camino de",1304],["Primitivo-Camino",1086],["Ingles-Camino",779],["Muxia-Finisterre",92],["Otros caminos",55],["Camino de Invierno",21],["Otros caminos",5]]},"6":{"year":"2015","month":"6","pilgrims":35925,"gender":[["Hombre",19254],["Mujer",16671]],"transport":[["Pie",31444],["Bicicleta",4431],["Caballo",44],["Silla de ruedas",6]],"age":[["30 - 60",20061],["> 60",8867],["< 30",6997]],"motivation":[["Religioso y otros",19955],["Religioso",13182],["No religioso",2788]],"spanishFrom":[["Madrid",3022],["Andalucía",2085],["Cataluña",1714],["Comunidad Valenciana",1550],["Galicia",1009],["Castilla León",805],["Castilla la Mancha",597],["Pais Vasco",596],["Canarias",491],["Asturias",313],["Extremadura",311],["Aragón",296],["Murcia",244],["Baleares",172],["Navarra",142],["Cantabria",140],["Otra",134],["La Rioja",72],["Ceuta",10],["Melilla",6]],"byCountry":[["España",13709],["Italia",3226],["Estados Unidos",2998],["Alemania",2900],["Francia",1783],["Portugal",1677],["Irlanda",860],["Reino Unido",802],["Holanda",771],["Brasil",720],["Canadá",714],["Australia",657],["Corea",478],["Polonia",400],["Belgica",308],["Argentina",298],["Dinamarca",267],["México",257],["Austria",250],["Suiza",222],["Japón",201],["Sudáfrica",165],["Suecia",156],["Nueva Zelanda",153],["República Checa",149],["Hungría",143],["Noruega",127],["Finlandia",117],["Colombia",111],["Bulgaria",104],["Rusia",103],["Islandia",77],["Venezuela",74],["Lituania",67],["Eslovenia",66],["China",65],["Puerto Rico",59],["Eslovaquia",53],["Ecuador",49],["Rumania",39],["Uruguay",33],["Filipinas",33],["Singapur",30],["Israel",30],["Costa Rica",29],["Chile",28],["Letonia",25],["Taiwán",24],["Estonia",23],["Argelia",23],["Luxemburgo",18],["Perú",17],["Croacia",16],["Armenia",14],["Ucrania",14],["Andorra",13],["Bielorrusia",12],["Rep. Dominicana",11],["Malta",10],["Cuba",10],["Grecia",8],["Guatemala",8],["Bolivia",8],["Paraguay",7],["Indonesia",7],["Panamá",6],["India",6],["El Salvador",5],["Marruecos",5],["Chipre",5],["Malasia",5],["Moldavia",4],["Honduras",4],["Brunei",4],["Jordania",4],["Sri Lanka",4],["Islas Feroe",4],["Líbano",4],["Palestina",3],["Albania",3],["Nicaragua",3],["Namibia",3],["Nigeria",2],["Yugoslavia",2],["Mauricio",2],["Turquía",2],["Guam",1],["Camerún",1],["Kenya",1],["Mauritania",1],["Haití",1],["Benin",1],["Serbia",1],["Irán",1],["Surinam",1],["Angola",1],["Zimbabwe",1],["Mali",1],["Mozambique",1],["Etiopía",1],["Jamaica",1],["San Marino",1],["Martinica",1],["Botswana",1],["Trinidad y Tobago",1]],"professions":[["Empleados",7827],["Jubilados",6865],["Liberales",4690],["Estudiantes",4603],["Tecnicos",4225],["Funcionarios",2218],["Profesores",1689],["Amas de Casa",891],["Parados",839],["Directivos",714],["Obreros",503],["Artistas",362],["Religiosas",177],["Sacerdotes",150],["Agricultores",98],["Deportistas",47],["Marinos",27]],"startingCities":[["Sarria",8397],["S. Jean P. Port",5812],["Oporto",1735],["León",1634],["Cebreiro",1319],["Tui",1304],["Roncesvalles",1207],["Ponferrada",1078],["Ferrol",1051],["Oviedo - C.P.",995],["Astorga",792],["Pamplona",775],["Le Puy",696],["Irún",650],["Burgos",594],["Valença do Minho",558],["Francia - C.F.",453],["Sevilla",445],["Lisboa",346],["Lugo - C.P.",312],["Resto Portugal",302],["Ourense",298],["Vilafranca",257],["Resto C. León C.F.",256],["Resto Asturias - C.N",215],["Holanda",190],["Triacastela",166],["Santander",165],["Bilbao",164],["Ponte de Lima",153],["Logroño",119],["Madrid - C.F.",114],["Resto Europa",108],["Samos",100],["San Sebastián",98],["Finisterra",96],["Barcelos",95],["Puebla de Sanabria",92],["Somport",88],["Alemania",86],["Vilalba",84],["Salamanca",82],["Gijón",79],["Avilés",78],["Muxia",77],["Rates, S. Pedro",73],["Ribadeo",72],["Bélgica",71],["Fonsagrada - C.P.",68],["Zamora",65],["Sahagún",63],["Resto Andalucia",63],["Oviedo - C.N.",62],["Lourdes",60],["Chaves-Portugal",59],["Resto País Vasco - C.N.",57],["Frómista",48],["Resto Asturias - C.P.",45],["Vezelay",45],["A Guarda",44],["Suiza",43],["Braga",42],["Guimaraes",42],["Francia - C.N",39],["Vigo",37],["Resto de Extremadura",36],["Arles",36],["Baamonde",35],["Hendaya",35],["Puente la Reina",34],["Rabanal del Camino",32],["Porriño",32],["Jaca",31],["Viana do Castelo",29],["Com. Valenciana - C.F.",28],["Zaragoza",27],["Gudiña",26],["Cataluña - C.F.",25],["Barcelona",25],["Povoa de Varzim",23],["Mérida",23],["Coimbra",22],["Valencia O.C.",22],["Navarra",22],["Com. Valenciana - O.C.",21],["Fatima",21],["Resto Cantabria",21],["Carrión de los Condes",21],["Baiona",20],["Granja de Moreruela",19],["Granada",18],["Estella",16],["Resto C. León - V.P.",16],["Ponferrada. C.Inv.",15],["R.Pais Vasco C.F.",15],["Verín",15],["Laza",15],["París",15],["Viseu",15],["Montserrat",14],["Grandas de Salime - C.P.",14],["Cáceres",12],["Madrid - V.P.",11],["Vega de Valcarce",10],["Sto. Domingo de la Calzada",10],["Canfranc",10],["Abadin",10],["Castrojeriz",10],["Austria",9],["Italia",9],["Mondoñedo",9],["Tineo - C.P.",8],["Cadavo",8],["Hospital de Orbigo",8],["Xunqueira de Ambia",8],["Faro",8],["Valladolid",7],["Allariz",7],["Aveiro",7],["Badajoz",6],["Cast. la Mancha - C.F.",6],["Castilla la Mancha otros",6],["Neda",6],["Córdoba",6],["La Mesa",6],["Nájera",5],["Resto Galicia",5],["Malaga",5],["San Juan de Ortega",4],["Molinaseca",4],["Vilabade",4],["Reino Unido C.F.",4],["Cataluña - O.C.",4],["Monforte de Lemos",4],["Lourenzá",3],["Roma",3],["Grado",3],["Castilla La Mancha VP",3],["Polonia",3],["Republica Checa",3],["Chantada",2],["Huelva",2],["Borres",2],["Esposende",2],["Ortigueira",2],["La Rioja",2],["Irlanda C.F.",2],["Fonfría",2],["Leyre",1],["Vincios",1],["Luxemburgo",1],["Cruz de Ferro",1],["Sobrado",1],["Salas",1],["Eslovaquia",1],["Betanzos",1]],"startingRegions":[["Lugo",10595],["France",7279],["León",4166],["Portugal",3471],["Navarra",2055],["Asturias",1508],["Pontevedra",1438],["A Coruña",1239],["Gipuzkoa",820],["Burgos",608],["Sevilla",508],["Ourense",371],["Holland",190],["Cantabria",186],["Zamora",176],["Vizcaya",164],["La Rioja",136],["Madrid",125],["Europe Other",108],["Germany",86],["Salamanca",82],["Belgium",71],["Valencia",71],["Palencia",69],["Barcelona",68],["Badajoz",65],["Porgugal",59],["Switzerland",43],["Huesca",41],["Zaragoza",27],["Granada",18],["Albacete",15],["Cáceres",12],["Italy",12],["Austria",9],["Valladolid",7],["Córdoba",6],["Málaga",5],["UK",4],["Poland",3],["Czech Republic",3],["Huelva",2],["Ireland",2],["Luxembourg",1],["Slovakia",1]],"caminos":[["Frances-Camino de",25018],["Portugues-Camino",4911],["Norte-Camino de",1879],["Primitivo-Camino",1466],["Via de la Plata",1339],["Ingles-Camino",1060],["Muxia-Finisterre",173],["Otros caminos",58],["Camino de Invierno",21]]},"7":{"year":"2015","month":"7","pilgrims":44799,"gender":[["Hombre",22949],["Mujer",21850]],"transport":[["Pie",41164],["Bicicleta",3591],["Caballo",33],["Silla de ruedas",11]],"age":[["30 - 60",21617],["< 30",18723],["> 60",4459]],"motivation":[["Religioso y otros",22020],["Religioso",19368],["No religioso",3411]],"spanishFrom":[["Andalucía",6429],["Madrid",5278],["Comunidad Valenciana",2605],["Cataluña",2497],["Castilla León",1892],["Castilla la Mancha",1198],["Extremadura",1158],["Pais Vasco",1129],["Galicia",1022],["Murcia",877],["Canarias",716],["Aragón",708],["Asturias",462],["Navarra",301],["Baleares",270],["Cantabria",260],["La Rioja",95],["Ceuta",65],["Otra",57],["Melilla",56]],"byCountry":[["España",27075],["Italia",3193],["Estados Unidos",2069],["Alemania",1705],["Portugal",1540],["Francia",1194],["Polonia",818],["Reino Unido",611],["Irlanda",527],["Corea",487],["Holanda",398],["Brasil",393],["Canadá",382],["Australia",355],["Dinamarca",352],["Belgica",345],["México",322],["Argentina",212],["Austria",186],["Suiza",180],["Suecia",163],["República Checa",162],["Hungría",160],["Japón",145],["Rusia",132],["Sudáfrica",108],["Colombia",104],["Noruega",103],["Eslovaquia",100],["Lituania",94],["Nueva Zelanda",85],["Bulgaria",76],["Puerto Rico",66],["Rumania",64],["China",63],["Finlandia",60],["Eslovenia",52],["Venezuela",50],["Ecuador",47],["Croacia",45],["Chile",44],["Uruguay",43],["Taiwán",37],["Estonia",35],["Andorra",34],["Perú",32],["Líbano",28],["Ucrania",23],["Malta",19],["Filipinas",19],["Israel",18],["Paraguay",17],["India",15],["Guatemala",13],["Bolivia",13],["Costa Rica",12],["Letonia",12],["Bielorrusia",12],["Singapur",10],["Rep. Dominicana",9],["Cuba",9],["Luxemburgo",9],["Honduras",8],["El Salvador",7],["Malasia",7],["Grecia",7],["Islandia",7],["Turquía",6],["Indonesia",4],["Mauricio",4],["Panamá",4],["Moldavia",3],["Armenia",3],["Georgia",3],["Chipre",3],["Angola",3],["Haití",3],["Jordania",3],["Trinidad y Tobago",2],["Namibia",2],["Nicaragua",2],["Irán",2],["Albania",2],["Serbia",2],["Islas Feroe",2],["Argelia",2],["San Marino",2],["Guinea",2],["Senegal",1],["Kuwait",1],["Irak",1],["Camerún",1],["Montenegro",1],["Kirguistán",1],["Mozambique",1],["Arabia Saudita",1],["Congo",1],["Mongolia",1],["Egipto",1],["Nueva Caledonia",1],["Bahamas",1],["Cabo Verde",1],["Túnez",1],["Sri Lanka",1],["Azerbaiyán",1],["Dominica",1]],"professions":[["Estudiantes",15059],["Empleados",6973],["Profesores",4970],["Tecnicos",4600],["Liberales",4320],["Jubilados",3153],["Funcionarios",2087],["Amas de Casa",998],["Parados",677],["Directivos",430],["Obreros",417],["Artistas",415],["Sacerdotes",318],["Religiosas",210],["Agricultores",132],["Deportistas",18],["Marinos",18],["Oikoten",4]],"startingCities":[["Sarria",11461],["S. Jean P. Port",4034],["Tui",3179],["Cebreiro",1962],["Ferrol",1783],["Ponferrada",1637],["Oporto",1624],["León",1604],["Astorga",1452],["Oviedo - C.P.",1058],["Roncesvalles",1023],["Valença do Minho",975],["Ourense",836],["Irún",710],["Vilafranca",588],["Resto Asturias - C.N",528],["Burgos",511],["Pamplona",481],["Lugo - C.P.",445],["Triacastela",441],["Resto Portugal",401],["Le Puy",395],["Ribadeo",347],["Francia - C.F.",296],["Mondoñedo",281],["Vilalba",277],["Resto C. León C.F.",270],["Ponte de Lima",262],["Santander",222],["Bilbao",218],["Lisboa",217],["Samos",211],["Logroño",191],["Sevilla",184],["Abadin",181],["Gijón",177],["Cruz de Ferro",175],["Rates, S. Pedro",164],["Porriño",133],["Somport",127],["San Sebastián",126],["Grandas de Salime - C.P.",126],["Baamonde",120],["Fonsagrada - C.P.",117],["Xunqueira de Ambia",114],["Holanda",113],["Laza",113],["Puebla de Sanabria",113],["Salamanca",112],["Resto Asturias - C.P.",104],["Resto C. León - V.P.",99],["Avilés",99],["Baiona",89],["Braga",82],["Oviedo - C.N.",76],["Alemania",74],["Barcelos",73],["Bélgica",73],["Gudiña",73],["Lourdes",73],["Resto Europa",59],["Zamora",56],["Madrid - C.F.",55],["Sahagún",54],["Salas",50],["Cadavo",50],["Resto Cantabria",49],["Coimbra",49],["Castrojeriz",47],["Vilabade",46],["Frómista",45],["Vigo",43],["Suiza",42],["A Guarda",42],["Finisterra",40],["Francia - C.N",40],["Granja de Moreruela",39],["Resto País Vasco - C.N.",38],["Esposende",37],["Viana do Castelo",36],["Puente la Reina",36],["Tineo - C.P.",36],["Arles",32],["Lourenzá",31],["Vezelay",30],["Resto Andalucia",30],["Zaragoza",26],["Hendaya",25],["París",24],["Neda",24],["Cataluña - C.F.",21],["R.Pais Vasco C.F.",19],["Valencia O.C.",19],["Carrión de los Condes",18],["Sto. Domingo de la Calzada",18],["Povoa de Varzim",17],["Italia",16],["Barcelona",16],["Com. Valenciana - O.C.",16],["Montserrat",15],["Cáceres",15],["Navarra",15],["Mérida",14],["Jaca",14],["Muxia",13],["Rabanal del Camino",13],["Austria",12],["Huelva",12],["Com. Valenciana - C.F.",12],["Vega de Valcarce",11],["Allariz",11],["Ponferrada. C.Inv.",11],["Hospital de Orbigo",10],["Castilla La Mancha VP",10],["Madrid - V.P.",10],["Estella",10],["Cast. la Mancha - C.F.",10],["Molinaseca",9],["Fatima",9],["Córdoba",9],["Grado",9],["Granada",9],["Guimaraes",8],["Resto de Extremadura",7],["Castilla la Mancha otros",7],["Verín",6],["Valladolid",6],["La Rioja",5],["La Mesa",5],["Nájera",5],["Cataluña - O.C.",5],["A Rúa",5],["Republica Checa",5],["Canfranc",4],["Malaga",4],["Faro",4],["Benavente",4],["Eslovaquia",3],["Guntín",3],["Roma",3],["Badajoz",3],["Dinamarca",3],["",2],["Polonia",2],["Ortigueira",2],["Quiroga",2],["Rusia",2],["Chaves-Portugal",2],["Viseu",2],["Chantada",2],["Irlanda C. Ing",2],["Monforte de Lemos",2],["Reino Unido C.F.",2],["Luxemburgo",2],["Artieda",1],["Aveiro",1],["Leyre",1],["Sobrado",1],["Paradela",1],["Petín",1],["Vegadeo",1],["Betanzos",1],["Resto Galicia",1],["La Bañeza",1],["Viveiro",1],["Gándara",1],["Hungría",1],["Reino Unido C.Ing",1],["San Juan de Ortega",1],["Inglaterra C.F.",1]],"startingRegions":[["Lugo",15978],["León",5934],["France",5076],["Portugal",3924],["Pontevedra",3487],["Asturias",2269],["A Coruña",1868],["Navarra",1566],["Ourense",1196],["Gipuzkoa",893],["Burgos",559],["Cantabria",271],["La Rioja",219],["Vizcaya",218],["Sevilla",214],["Zamora",212],["Holland",113],["Salamanca",112],["Germany",74],["Belgium",73],["Madrid",65],["Palencia",63],["Europe Other",59],["Barcelona",57],["Valencia",47],["Switzerland",42],["Zaragoza",27],["Albacete",27],["Badajoz",24],["Italy",19],["Huesca",18],["Cáceres",15],["Huelva",12],["Austria",12],["Córdoba",9],["Granada",9],["Valladolid",6],["Czech Republic",5],["Málaga",4],["UK",4],["Denmark",3],["Slovakia",3],["City&nbsp;Was Blank",2],["Poland",2],["Russia",2],["Porgugal",2],["Ireland",2],["Luxembourg",2],["Hungary",1]],"caminos":[["Frances-Camino de",27923],["Portugues-Camino",7447],["Norte-Camino de",3551],["Primitivo-Camino",2047],["Via de la Plata",1893],["Ingles-Camino",1813],["Muxia-Finisterre",53],["Otros caminos",48],["Camino de Invierno",22],["Otros caminos",2]]},"8":{"year":"2015","month":"8","pilgrims":54796,"gender":[["Hombre",29071],["Mujer",25725]],"transport":[["Pie",49196],["Bicicleta",5500],["Caballo",84],["Silla de ruedas",16]],"age":[["30 - 60",30779],["< 30",20810],["> 60",3207]],"motivation":[["Religioso y otros",28355],["Religioso",21279],["No religioso",5162]],"spanishFrom":[["Andalucía",6753],["Madrid",6206],["Comunidad Valenciana",4945],["Cataluña",4128],["Castilla la Mancha",1831],["Castilla León",1549],["Murcia",1424],["Galicia",1391],["Pais Vasco",1313],["Extremadura",882],["Aragón",768],["Canarias",612],["Asturias",390],["Navarra",280],["Baleares",260],["Cantabria",183],["La Rioja",144],["Otra",94],["Melilla",43],["Ceuta",27]],"byCountry":[["España",33223],["Italia",7963],["Alemania",2236],["Portugal",2235],["Francia",1582],["Estados Unidos",774],["Polonia",763],["Reino Unido",599],["Irlanda",473],["Corea",438],["Holanda",331],["Hungría",273],["Brasil",257],["Canadá",245],["Belgica",232],["Austria",223],["Dinamarca",219],["Australia",217],["República Checa",213],["Eslovaquia",159],["Argentina",148],["México",139],["China",129],["Colombia",122],["Suiza",120],["Rusia",108],["Japón",101],["Rumania",84],["Suecia",82],["Lituania",69],["Eslovenia",64],["Uruguay",63],["Venezuela",62],["Ecuador",60],["Bulgaria",53],["Noruega",49],["Nueva Zelanda",46],["Perú",39],["Croacia",37],["Ucrania",36],["Finlandia",32],["Chile",31],["Estonia",29],["Sudáfrica",29],["Israel",28],["Paraguay",26],["Luxemburgo",24],["Grecia",23],["India",21],["Malta",20],["Andorra",20],["Letonia",20],["Rep. Dominicana",18],["Taiwán",17],["Bolivia",16],["Filipinas",15],["El Salvador",11],["Bielorrusia",11],["Singapur",8],["Camerún",7],["Marruecos",7],["Armenia",7],["Cuba",7],["Moldavia",7],["Jordania",7],["Guatemala",7],["Argelia",5],["Costa Rica",5],["Albania",5],["Líbano",4],["Turquía",4],["Malasia",4],["Siria",4],["Puerto Rico",4],["Chipre",4],["Indonesia",4],["Irán",3],["Nicaragua",3],["Honduras",3],["Nigeria",2],["Dominica",2],["Angola",2],["Senegal",2],["Georgia",2],["Sudán",1],["Egipto",1],["San Marino",1],["Kenya",1],["Tailandia",1],["Trinidad y Tobago",1],["Azerbaiyán",1],["Serbia",1],["Myanmar",1],["Islandia",1],["Palestina",1],["Sri Lanka",1],["Zambia",1],["Liechtensein",1],["Jamaica",1],["Gabón",1],["Uganda",1],["Congo",1],["Kazajistán",1],["Nepal",1]],"professions":[["Estudiantes",14024],["Empleados",11332],["Liberales",8536],["Tecnicos",6231],["Profesores",5571],["Funcionarios",2334],["Jubilados",2060],["Obreros",1002],["Amas de Casa",980],["Parados",778],["Directivos",674],["Artistas",445],["Sacerdotes",369],["Agricultores",185],["Religiosas",163],["Deportistas",73],["Marinos",37],["Oikoten",2]],"startingCities":[["Sarria",15267],["S. Jean P. Port",3901],["Tui",3799],["León",2422],["Cebreiro",2236],["Ferrol",2130],["Oporto",2050],["Ponferrada",1952],["Oviedo - C.P.",1646],["Roncesvalles",1505],["Valença do Minho",1473],["Astorga",1086],["Irún",957],["Lugo - C.P.",810],["Pamplona",705],["Burgos",682],["Triacastela",653],["Ribadeo",570],["Vilafranca",555],["Ourense",536],["Resto Asturias - C.N",481],["Neda",454],["Vilalba",443],["Resto C. León C.F.",397],["Resto Portugal",369],["Gijón",348],["Le Puy",347],["Ponte de Lima",343],["Lisboa",336],["Bilbao",320],["Samos",309],["Santander",302],["Francia - C.F.",282],["Sevilla",217],["Fonsagrada - C.P.",198],["Avilés",195],["Porriño",158],["Logroño",147],["San Sebastián",145],["Muxia",139],["Resto País Vasco - C.N.",137],["Zamora",121],["Barcelos",114],["Mondoñedo",111],["Rates, S. Pedro",110],["Madrid - C.F.",102],["Braga",99],["Resto Asturias - C.P.",98],["Sahagún",97],["Alemania",96],["Vigo",88],["Resto Cantabria",88],["Salamanca",87],["Baamonde",83],["Grandas de Salime - C.P.",81],["Somport",79],["Puebla de Sanabria",75],["Fatima",73],["Lourenzá",68],["Sto. Domingo de la Calzada",68],["Oviedo - C.N.",67],["Holanda",65],["Vega de Valcarce",60],["Abadin",56],["Cáceres",54],["Lourdes",54],["A Guarda",53],["Resto Europa",53],["Hendaya",49],["Finisterra",49],["Carrión de los Condes",47],["Cadavo",45],["Tineo - C.P.",44],["Chaves-Portugal",43],["Granja de Moreruela",40],["Cataluña - C.F.",39],["Resto C. León - V.P.",38],["Allariz",38],["Viana do Castelo",37],["Francia - C.N",37],["Frómista",36],["Gudiña",35],["Resto Andalucia",35],["Bélgica",35],["Vezelay",34],["Jaca",34],["Coimbra",32],["Madrid - V.P.",32],["Guimaraes",29],["Zaragoza",28],["Estella",27],["Com. Valenciana - O.C.",27],["Montserrat",25],["Rabanal del Camino",25],["Salas",22],["Barcelona",21],["Monforte de Lemos",21],["Molinaseca",20],["París",20],["Navarra",20],["Italia",19],["Suiza",19],["Laza",19],["Cast. la Mancha - C.F.",19],["Baiona",18],["Cruz de Ferro",18],["Mérida",18],["R.Pais Vasco C.F.",18],["Resto de Extremadura",17],["Arles",17],["Puente la Reina",17],["Chantada",16],["Malaga",15],["Hospital de Orbigo",14],["Austria",13],["Grado",13],["Com. Valenciana - C.F.",13],["Xunqueira de Ambia",12],["Castilla la Mancha otros",12],["Verín",11],["Polonia",11],["Canfranc",11],["Valencia O.C.",11],["Castilla La Mancha VP",10],["Ponferrada. C.Inv.",10],["Cataluña - O.C.",9],["Resto Galicia",9],["Granada",8],["Esposende",8],["Murcia",8],["Nájera",8],["Badajoz",7],["Benavente",7],["Valladolid",7],["Povoa de Varzim",7],["Huelva",6],["La Mesa",6],["Quiroga",6],["Roma",6],["Viseu",5],["Reino Unido C.F.",5],["San Juan de Ortega",5],["",4],["Fonfría",4],["Castrojeriz",4],["O Barco de Valdeorras",3],["Republica Checa",3],["Córdoba",3],["Aveiro",2],["Luxemburgo",2],["Faro",2],["Hungría",2],["Inglaterra C.F.",1],["Vincios",1],["Dinamarca",1],["Covelo",1],["Leyre",1],["Sobrado",1],["Peñaseita",1],["La Rioja",1],["Lalín",1],["Pontedeume",1],["La Bañeza",1],["Guntín",1],["Sobrado dos Monxes",1]],"startingRegions":[["Lugo",20896],["León",6695],["Portugal",5081],["France",4820],["Pontevedra",4119],["Asturias",3002],["A Coruña",2785],["Navarra",2275],["Gipuzkoa",1257],["Burgos",691],["Ourense",662],["Cantabria",390],["Vizcaya",320],["Sevilla",252],["Zamora",243],["La Rioja",224],["Madrid",134],["Germany",96],["Barcelona",94],["Salamanca",87],["Palencia",83],["Holland",65],["Cáceres",54],["Europe Other",53],["Valencia",51],["Huesca",45],["Porgugal",43],["Badajoz",42],["Albacete",41],["Belgium",35],["Zaragoza",28],["Italy",25],["Switzerland",19],["Málaga",15],["Austria",13],["Poland",11],["Murcia",8],["Granada",8],["Valladolid",7],["Huelva",6],["UK",6],["City&nbsp;Was Blank",4],["Czech Republic",3],["Córdoba",3],["Hungary",2],["Luxembourg",2],["Denmark",1]],"caminos":[["Frances-Camino de",33759],["Portugues-Camino",9207],["Norte-Camino de",4463],["Primitivo-Camino",2965],["Ingles-Camino",2585],["Via de la Plata",1493],["Muxia-Finisterre",188],["Otros caminos",76],["Camino de Invierno",56],["Otros caminos",4]]},"9":{"year":"2015","month":"9","pilgrims":37433,"gender":[["Hombre",18951],["Mujer",18482]],"transport":[["Pie",33592],["Bicicleta",3802],["Caballo",30],["Silla de ruedas",9]],"age":[["30 - 60",20950],["> 60",8277],["< 30",8206]],"motivation":[["Religioso y otros",20111],["Religioso",14283],["No religioso",3039]],"spanishFrom":[["Andalucía",3057],["Madrid",2854],["Cataluña",1791],["Comunidad Valenciana",1645],["Galicia",1152],["Castilla León",965],["Castilla la Mancha",689],["Canarias",533],["Pais Vasco",469],["Murcia",444],["Extremadura",439],["Asturias",331],["Aragón",281],["Cantabria",186],["Baleares",185],["Navarra",169],["Otra",77],["La Rioja",76],["Ceuta",12],["Melilla",12]],"byCountry":[["España",15367],["Alemania",3220],["Italia",2820],["Estados Unidos",1947],["Portugal",1671],["Francia",1497],["Irlanda",1053],["Reino Unido",990],["Polonia",873],["Canadá",777],["Australia",733],["Brasil",647],["Holanda",463],["Belgica",418],["Dinamarca",415],["Corea",314],["México",305],["Suiza",267],["Austria",265],["República Checa",260],["Argentina",231],["Suecia",228],["Noruega",215],["Hungría",189],["Sudáfrica",187],["Japón",149],["Colombia",148],["Rusia",141],["Finlandia",133],["Eslovaquia",114],["Venezuela",108],["Nueva Zelanda",103],["China",85],["Lituania",84],["Bulgaria",79],["Eslovenia",78],["Rumania",64],["Filipinas",62],["Israel",56],["Estonia",48],["Uruguay",44],["Islandia",42],["Ecuador",41],["Letonia",36],["Ucrania",35],["Chile",34],["Perú",33],["Puerto Rico",32],["Taiwán",28],["Malasia",26],["Singapur",21],["Croacia",17],["Andorra",17],["Malta",15],["Panamá",13],["Bielorrusia",12],["Guatemala",11],["Líbano",10],["Rep. Dominicana",10],["Armenia",10],["Costa Rica",10],["Luxemburgo",10],["Honduras",9],["Cuba",9],["Jordania",6],["Indonesia",6],["India",6],["Albania",6],["El Salvador",6],["Serbia",6],["Moldavia",5],["Bolivia",4],["Grecia",4],["Turquía",4],["Argelia",3],["Vietnam",3],["Irán",3],["San Marino",3],["Sri Lanka",3],["Macedonia",2],["Namibia",2],["Trinidad y Tobago",2],["Siria",2],["Chipre",2],["Cabo Verde",2],["Azerbaiyán",1],["Islas Feroe",1],["Lesotho",1],["Egipto",1],["Emiratos Arabes Unidos",1],["Marruecos",1],["Guinea",1],["Mongolia",1],["Rwanda",1],["Groenlandia",1],["Bosnia",1],["Kenya",1],["Mónaco",1],["Liechtensein",1],["Nigeria",1],["Montenegro",1],["Tanzania",1],["Tailandia",1],["Nepal",1],["Nicaragua",1],["Haití",1],["I. Reunión",1],["Yugoslavia",1],["Paraguay",1]],"professions":[["Empleados",8435],["Jubilados",6154],["Tecnicos",6000],["Liberales",5121],["Estudiantes",4832],["Funcionarios",1992],["Profesores",1402],["Amas de Casa",823],["Directivos",694],["Parados",669],["Obreros",405],["Artistas",355],["Sacerdotes",211],["Religiosas",151],["Agricultores",130],["Marinos",34],["Deportistas",25]],"startingCities":[["Sarria",9865],["S. Jean P. Port",3823],["Oporto",2454],["León",1993],["Tui",1793],["Cebreiro",1470],["Ferrol",1246],["Ponferrada",1196],["Oviedo - C.P.",1116],["Roncesvalles",1072],["Astorga",914],["Valença do Minho",796],["Pamplona",678],["Irún",651],["Le Puy",651],["Burgos",509],["Lugo - C.P.",434],["Vilafranca",396],["Ourense",300],["Francia - C.F.",288],["Lisboa",274],["Resto Portugal",269],["Samos",266],["Resto Asturias - C.N",233],["Triacastela",224],["Sevilla",223],["Ponte de Lima",202],["Santander",193],["Bilbao",193],["Resto C. León C.F.",167],["Baiona",138],["Ribadeo",134],["Gijón",126],["Logroño",124],["Alemania",117],["Barcelos",94],["Rates, S. Pedro",91],["Avilés",86],["Vilalba",85],["Fonsagrada - C.P.",84],["San Sebastián",83],["Resto Asturias - C.P.",80],["Somport",74],["Holanda",74],["Madrid - C.F.",67],["Salamanca",62],["Braga",60],["Muxia",59],["Francia - C.N",57],["Cadavo",56],["Sahagún",55],["Resto País Vasco - C.N.",53],["Resto Cantabria",52],["Coimbra",50],["Hendaya",49],["Zamora",47],["Suiza",46],["Puebla de Sanabria",45],["Oviedo - C.N.",44],["Baamonde",41],["Porriño",39],["Mondoñedo",36],["Resto Europa",36],["Viana do Castelo",35],["A Guarda",35],["Hospital de Orbigo",35],["Grandas de Salime - C.P.",35],["Bélgica",34],["Resto Andalucia",33],["Vega de Valcarce",33],["Finisterra",31],["Chaves-Portugal",30],["Abadin",30],["Vigo",30],["Frómista",30],["Vezelay",29],["Lourdes",28],["Fatima",26],["Arles",23],["Madrid - V.P.",23],["Carrión de los Condes",23],["Molinaseca",22],["Cataluña - C.F.",22],["Resto C. León - V.P.",22],["Guimaraes",22],["Tineo - C.P.",21],["Neda",19],["Castrojeriz",19],["Granada",18],["Barcelona",18],["Com. Valenciana - O.C.",18],["Mérida",17],["Malaga",16],["Gudiña",16],["Italia",16],["Granja de Moreruela",16],["Austria",15],["París",15],["Rabanal del Camino",15],["Sto. Domingo de la Calzada",14],["Cáceres",14],["Resto de Extremadura",14],["Ponferrada. C.Inv.",14],["Puente la Reina",13],["Povoa de Varzim",13],["Lourenzá",13],["Castilla La Mancha VP",13],["Allariz",13],["Polonia",12],["Com. Valenciana - C.F.",12],["Jaca",12],["Laza",11],["Zaragoza",11],["Verín",10],["Navarra",9],["Esposende",8],["Valencia O.C.",8],["Xunqueira de Ambia",7],["Faro",7],["Salas",7],["Monforte de Lemos",7],["Estella",7],["R.Pais Vasco C.F.",6],["Montserrat",6],["Castilla la Mancha otros",6],["Valladolid",6],["Cruz de Ferro",5],["Badajoz",5],["Murcia",5],["Benavente",4],["Nájera",3],["Cataluña - O.C.",3],["Cast. la Mancha - C.F.",3],["Aveiro",3],["Canfranc",3],["Dinamarca",3],["Vilabade",2],["Córdoba",2],["Fonfría",2],["Roma",2],["La Rioja",2],["San Juan de Ortega",1],["mirallos",1],["Lalín",1],["Grado",1],["Resto Galicia",1],["Covelo",1],["Luxemburgo",1],["Republica Checa",1],["Valcarlos",1],["La Mesa",1]],"startingRegions":[["Lugo",12750],["France",5037],["León",4867],["Portugal",4396],["Pontevedra",2037],["Navarra",1780],["Asturias",1750],["A Coruña",1356],["Gipuzkoa",793],["Burgos",529],["Ourense",365],["Sevilla",256],["Cantabria",245],["Vizcaya",193],["La Rioja",143],["Germany",117],["Zamora",112],["Madrid",90],["Holland",74],["Salamanca",62],["Palencia",53],["Barcelona",49],["Switzerland",46],["Valencia",38],["Badajoz",36],["Europe Other",36],["Belgium",34],["Porgugal",30],["Albacete",22],["Italy",18],["Granada",18],["Málaga",16],["Austria",15],["Huesca",15],["Cáceres",14],["Poland",12],["Zaragoza",11],["Valladolid",6],["Murcia",5],["Denmark",3],["Córdoba",2],["Luxembourg",1],["Czech Republic",1]],"caminos":[["Frances-Camino de",24609],["Portugues-Camino",6440],["Norte-Camino de",2161],["Primitivo-Camino",1837],["Ingles-Camino",1265],["Via de la Plata",968],["Muxia-Finisterre",90],["Otros caminos",42],["Camino de Invierno",21]]},"10":{"year":"2015","month":"10","pilgrims":25574,"gender":[["Hombre",13352],["Mujer",12222]],"transport":[["Pie",23782],["Bicicleta",1741],["Caballo",36],["Silla de ruedas",15]],"age":[["30 - 60",14516],["> 60",6312],["< 30",4746]],"motivation":[["Religioso y otros",14949],["Religioso",9261],["No religioso",1364]],"spanishFrom":[["Madrid",1806],["Andalucía",1233],["Cataluña",998],["Comunidad Valenciana",812],["Galicia",652],["Castilla León",442],["Castilla la Mancha",393],["Canarias",289],["Pais Vasco",276],["Asturias",255],["Extremadura",184],["Aragón",166],["Murcia",155],["Baleares",123],["Navarra",90],["Cantabria",75],["La Rioja",39],["Otra",35],["Melilla",5],["Ceuta",2]],"byCountry":[["España",8030],["Alemania",2682],["Estados Unidos",2454],["Italia",1363],["Francia",1262],["Canadá",1009],["Portugal",789],["Australia",755],["Reino Unido",744],["Irlanda",673],["Brasil",609],["Corea",588],["Holanda",424],["Polonia",362],["Dinamarca",337],["México",275],["Finlandia",216],["Suiza",192],["Suecia",183],["Argentina",183],["Japón",174],["Belgica",170],["Austria",156],["Hungría",152],["Nueva Zelanda",139],["Noruega",135],["Colombia",119],["Lituania",105],["Eslovaquia",103],["Sudáfrica",102],["China",99],["Venezuela",96],["República Checa",79],["Israel",75],["Rusia",72],["Filipinas",54],["Bulgaria",48],["Chile",41],["Rumania",39],["Letonia",38],["Uruguay",36],["Eslovenia",35],["Puerto Rico",30],["Croacia",29],["Taiwán",26],["Costa Rica",24],["Estonia",23],["Ecuador",22],["Islandia",17],["Grecia",15],["Singapur",15],["Malta",13],["Guatemala",13],["Perú",11],["Luxemburgo",10],["Ucrania",10],["Andorra",10],["Bielorrusia",8],["Rep. Dominicana",8],["Malasia",8],["Indonesia",6],["Cuba",6],["Turquía",4],["Jordania",4],["Albania",4],["India",4],["Chipre",3],["Líbano",3],["Paraguay",3],["Irán",3],["Serbia",3],["El Salvador",3],["Bolivia",2],["Marruecos",2],["Irak",2],["Dominica",2],["Tailandia",2],["Mónaco",2],["Emiratos Arabes Unidos",2],["Islas Feroe",2],["Mauricio",2],["Moldavia",2],["Nicaragua",2],["Palestina",2],["Vietnam",2],["Guam",2],["Honduras",2],["Cabo Verde",1],["Sudán",1],["Panamá",1],["Bermudas",1],["Tanzania",1],["Kirguistán",1],["Camerún",1],["Jamaica",1],["Armenia",1]],"professions":[["Empleados",5860],["Jubilados",4887],["Liberales",3928],["Tecnicos",3262],["Estudiantes",2654],["Funcionarios",1244],["Profesores",1173],["Parados",587],["Amas de Casa",560],["Directivos",448],["Artistas",365],["Obreros",206],["Sacerdotes",131],["Agricultores",121],["Religiosas",92],["Marinos",30],["Deportistas",26]],"startingCities":[["Sarria",5987],["S. Jean P. Port",5457],["Oporto",1328],["León",1074],["Tui",828],["Roncesvalles",748],["Cebreiro",728],["Ponferrada",650],["Ferrol",576],["Pamplona",561],["Irún",523],["Le Puy",513],["Oviedo - C.P.",472],["Astorga",452],["Valença do Minho",429],["Burgos",360],["Samos",320],["Francia - C.F.",302],["Lisboa",297],["Sevilla",255],["Lugo - C.P.",233],["Vilafranca",209],["Ourense",182],["Ponte de Lima",143],["Triacastela",137],["Resto Portugal",118],["Bilbao",111],["Resto C. León C.F.",106],["Resto Asturias - C.N",84],["Baiona",83],["Logroño",82],["Alemania",81],["Vigo",81],["Barcelos",80],["Santander",79],["Ribadeo",69],["San Sebastián",65],["Rates, S. Pedro",59],["Francia - C.N",53],["Vilalba",52],["Allariz",51],["Somport",48],["Suiza",45],["Salamanca",44],["Lourdes",43],["Resto Asturias - C.P.",43],["Zamora",41],["Resto Europa",39],["Gijón",38],["Madrid - C.F.",37],["Sahagún",37],["Finisterra",37],["Holanda",37],["Fonsagrada - C.P.",36],["Porriño",36],["Vezelay",35],["Vega de Valcarce",33],["Braga",32],["Arles",30],["Coimbra",30],["Grandas de Salime - C.P.",29],["Resto País Vasco - C.N.",29],["Puebla de Sanabria",26],["Hendaya",23],["A Guarda",22],["Baamonde",22],["Granja de Moreruela",22],["Muxia",22],["Hospital de Orbigo",21],["Avilés",19],["Barcelona",19],["Rabanal del Camino",18],["Viana do Castelo",17],["Resto Andalucia",16],["Puente la Reina",16],["Ponferrada. C.Inv.",16],["Bélgica",15],["Valencia O.C.",15],["Oviedo - C.N.",15],["Resto C. León - V.P.",15],["Montserrat",15],["Guimaraes",14],["Gudiña",14],["Com. Valenciana - C.F.",12],["Resto Cantabria",12],["Povoa de Varzim",12],["Zaragoza",12],["Jaca",12],["Nájera",12],["París",12],["Frómista",12],["Fatima",11],["Madrid - V.P.",11],["Sto. Domingo de la Calzada",10],["Carrión de los Condes",10],["R.Pais Vasco C.F.",10],["Austria",10],["Tineo - C.P.",10],["Monforte de Lemos",9],["Navarra",9],["Cáceres",9],["Chaves-Portugal",8],["Estella",8],["Com. Valenciana - O.C.",8],["Faro",8],["Cataluña - C.F.",8],["Cadavo",8],["Cast. la Mancha - C.F.",7],["Canfranc",7],["Castrojeriz",7],["Cruz de Ferro",6],["Mondoñedo",6],["Viseu",6],["Resto de Extremadura",6],["Roma",6],["Lourenzá",6],["Reino Unido C.F.",6],["Mérida",5],["Xunqueira de Ambia",5],["Polonia",5],["Castilla la Mancha otros",5],["Valladolid",4],["Republica Checa",4],["La Rioja",4],["La Mesa",4],["Grado",4],["Badajoz",4],["Laza",3],["Italia",3],["Verín",3],["Granada",3],["Salas",3],["Resto Galicia",3],["Murcia",2],["San Juan de Ortega",2],["Córdoba",2],["Neda",2],["Benavente",2],["Esposende",2],["Valcarlos",2],["Castilla La Mancha VP",2],["Borres",2],["Ortigueira",1],["Las Médulas",1],["Molinaseca",1],["La Bañeza",1],["Malaga",1],["",1],["Pontedeume",1],["Abadin",1],["Huelva",1]],"startingRegions":[["Lugo",7614],["France",6516],["León",2640],["Portugal",2584],["Navarra",1344],["Pontevedra",1050],["Asturias",723],["A Coruña",642],["Gipuzkoa",627],["Burgos",369],["Sevilla",271],["Ourense",260],["Vizcaya",111],["La Rioja",108],["Cantabria",91],["Zamora",91],["Germany",81],["Madrid",48],["Switzerland",45],["Salamanca",44],["Barcelona",42],["Europe Other",39],["Holland",37],["Valencia",35],["Palencia",22],["Huesca",19],["Badajoz",15],["Belgium",15],["Albacete",14],["Zaragoza",12],["Austria",10],["Italy",9],["Cáceres",9],["Porgugal",8],["UK",6],["Poland",5],["Valladolid",4],["Czech Republic",4],["Granada",3],["Murcia",2],["Córdoba",2],["Málaga",1],["City&nbsp;Was Blank",1],["Huelva",1]],"caminos":[["Frances-Camino de",18452],["Portugues-Camino",3636],["Norte-Camino de",1207],["Primitivo-Camino",844],["Via de la Plata",736],["Ingles-Camino",580],["Muxia-Finisterre",59],["Otros caminos",33],["Camino de Invierno",26],["Otros caminos",1]]},"11":{"year":"2015","month":"11","pilgrims":5229,"gender":[["Hombre",3105],["Mujer",2124]],"transport":[["Pie",4924],["Bicicleta",299],["Silla de ruedas",6]],"age":[["30 - 60",3179],["< 30",1329],["> 60",721]],"motivation":[["Religioso y otros",3595],["Religioso",1317],["No religioso",317]],"spanishFrom":[["Galicia",427],["Andalucía",339],["Madrid",259],["Cataluña",246],["Comunidad Valenciana",188],["Baleares",182],["Castilla León",87],["Castilla la Mancha",76],["Canarias",50],["Extremadura",40],["Murcia",38],["Pais Vasco",34],["Asturias",32],["Aragón",30],["La Rioja",17],["Cantabria",12],["Navarra",11],["Otra",3]],"byCountry":[["España",2071],["Estados Unidos",358],["Alemania",318],["Corea",315],["Italia",279],["Francia",231],["Portugal",184],["Canadá",157],["Australia",149],["Belgica",115],["Brasil",114],["Reino Unido",114],["Japón",66],["Suiza",55],["Holanda",53],["Polonia",53],["Rusia",47],["México",45],["Argentina",41],["Dinamarca",37],["Irlanda",36],["Austria",35],["República Checa",29],["Colombia",27],["Hungría",25],["Suecia",23],["Lituania",21],["Nueva Zelanda",18],["China",14],["Noruega",13],["Venezuela",13],["Sudáfrica",13],["Eslovaquia",12],["Taiwán",11],["Uruguay",11],["Rumania",10],["Finlandia",8],["Puerto Rico",8],["Ucrania",8],["Letonia",8],["Bulgaria",8],["Estonia",7],["Chile",7],["Filipinas",7],["Croacia",6],["Costa Rica",5],["Grecia",5],["Perú",5],["Israel",5],["India",4],["Malta",3],["Cuba",3],["Malasia",3],["Paraguay",2],["Singapur",2],["Brunei",2],["Azerbaiyán",1],["Papúa - Nueva Guinea",1],["Indonesia",1],["Panamá",1],["Turquía",1],["Groenlandia",1],["Nicaragua",1],["Irán",1],["Moldavia",1],["Eslovenia",1]],"professions":[["Empleados",1650],["Estudiantes",622],["Liberales",615],["Jubilados",568],["Tecnicos",428],["Funcionarios",324],["Parados",267],["Profesores",226],["Directivos",126],["Obreros",102],["Artistas",102],["Amas de Casa",96],["Agricultores",33],["Marinos",19],["Religiosas",18],["Deportistas",17],["Sacerdotes",14],["Oikoten",2]],"startingCities":[["S. Jean P. Port",1386],["Sarria",860],["Cebreiro",224],["Oporto",208],["Roncesvalles",201],["León",177],["Ferrol",164],["Pamplona",158],["Tui",144],["Ponferrada",128],["Oviedo - C.P.",122],["Le Puy",111],["Sevilla",100],["Francia - C.F.",86],["Irún",86],["Burgos",67],["Lugo - C.P.",67],["Astorga",65],["Valença do Minho",63],["Vilafranca",45],["Lisboa",32],["Logroño",31],["Vilalba",29],["Resto Portugal",28],["Ourense",25],["Ponte de Lima",21],["Bilbao",21],["Resto Asturias - C.N",20],["Suiza",20],["Braga",19],["Salamanca",19],["Lourdes",17],["Ribadeo",17],["Alemania",17],["Gijón",17],["Arles",15],["Resto Andalucia",13],["Santander",13],["Triacastela",13],["Somport",12],["Resto Europa",12],["Resto C. León C.F.",12],["Puebla de Sanabria",12],["Francia - C.N",12],["Finisterra",11],["Barcelona",10],["Zamora",10],["Vezelay",9],["San Sebastián",9],["Holanda",8],["Ponferrada. C.Inv.",8],["A Guarda",8],["Resto C. León - V.P.",8],["Resto País Vasco - C.N.",7],["Fonsagrada - C.P.",7],["Bélgica",7],["Vigo",7],["Hendaya",7],["Resto Asturias - C.P.",7],["Cáceres",6],["Xunqueira de Ambia",6],["Guimaraes",6],["Rates, S. Pedro",6],["Jaca",6],["Madrid - C.F.",6],["Sahagún",6],["Mondoñedo",6],["Rabanal del Camino",5],["Valencia O.C.",5],["Resto Cantabria",5],["Montserrat",5],["Austria",5],["Esposende",5],["Cadavo",5],["Cataluña - C.F.",5],["Avilés",5],["Barcelos",5],["Oviedo - C.N.",4],["Samos",4],["Polonia",4],["Fatima",3],["París",3],["Navarra",3],["Granja de Moreruela",3],["Cataluña - O.C.",3],["Córdoba",3],["Frómista",3],["Porriño",3],["Resto de Extremadura",3],["Castilla la Mancha otros",3],["Abadin",3],["Viana do Castelo",2],["Vega de Valcarce",2],["Puente de Domingo Flórez",2],["Com. Valenciana - O.C.",2],["Mérida",2],["Castrojeriz",2],["Quiroga",2],["Castilla La Mancha VP",2],["Baiona",2],["Italia",2],["Cast. la Mancha - C.F.",2],["Reino Unido C.Ing",2],["Dinamarca",2],["Laza",2],["Tineo - C.P.",2],["Roma",2],["O Barco de Valdeorras",2],["Neda",1],["Hungría",1],["Sto. Domingo de la Calzada",1],["Coimbra",1],["Hospital de Orbigo",1],["Molinaseca",1],["Com. Valenciana - C.F.",1],["Canfranc",1],["Malaga",1],["Huelva",1],["Carrión de los Condes",1],["Muxia",1],["Lourenzá",1],["Verín",1],["Sobrado",1],["Viseu",1],["Gudiña",1],["Aveiro",1],["Republica Checa",1],["Granada",1]],"startingRegions":[["France",1658],["Lugo",1238],["León",460],["Portugal",396],["Navarra",362],["A Coruña",178],["Asturias",177],["Pontevedra",164],["Sevilla",113],["Gipuzkoa",102],["Burgos",69],["Ourense",42],["La Rioja",32],["Zamora",25],["Barcelona",23],["Vizcaya",21],["Switzerland",20],["Salamanca",19],["Cantabria",18],["Germany",17],["Europe Other",12],["Holland",8],["Valencia",8],["Huesca",7],["Belgium",7],["Albacete",7],["Madrid",6],["Cáceres",6],["Austria",5],["Badajoz",5],["Palencia",4],["Poland",4],["Italy",4],["Córdoba",3],["UK",2],["Denmark",2],["Hungary",1],["Málaga",1],["Huelva",1],["Czech Republic",1],["Granada",1]],"caminos":[["Frances-Camino de",3766],["Portugues-Camino",565],["Norte-Camino de",263],["Via de la Plata",219],["Primitivo-Camino",210],["Ingles-Camino",167],["Camino de Invierno",14],["Otros caminos",13],["Muxia-Finisterre",12]]},"12":{"year":"2015","month":"12","pilgrims":2062,"gender":[["Hombre",1368],["Mujer",694]],"transport":[["Pie",1911],["Bicicleta",149],["Caballo",2]],"age":[["30 - 60",1318],["< 30",581],["> 60",163]],"motivation":[["Religioso y otros",1353],["Religioso",585],["No religioso",124]],"spanishFrom":[["Galicia",265],["Madrid",170],["Andalucía",143],["Comunidad Valenciana",119],["Cataluña",80],["Castilla León",53],["Baleares",53],["Extremadura",50],["Castilla la Mancha",50],["Pais Vasco",35],["Asturias",28],["Murcia",12],["Canarias",12],["Navarra",11],["Aragón",7],["Cantabria",3],["La Rioja",3],["Otra",2]],"byCountry":[["España",1096],["Corea",117],["Italia",111],["Portugal",105],["Alemania",83],["Francia",73],["Estados Unidos",60],["Brasil",41],["Japón",37],["Reino Unido",28],["México",28],["Holanda",24],["Australia",22],["Canadá",22],["China",19],["Argentina",18],["Polonia",15],["Suiza",14],["Austria",13],["Lituania",11],["Irlanda",11],["Belgica",10],["Finlandia",10],["Dinamarca",10],["Colombia",7],["Nueva Zelanda",7],["Rumania",6],["República Checa",6],["Rusia",5],["Hungría",4],["India",4],["Venezuela",3],["Grecia",3],["Noruega",3],["Letonia",3],["Ecuador",2],["Eslovaquia",2],["Taiwán",2],["Mozambique",2],["Suecia",2],["Tailandia",2],["Uruguay",2],["Sudáfrica",2],["Chile",2],["Moldavia",1],["Israel",1],["Arabia Saudita",1],["Vietnam",1],["Jordania",1],["Singapur",1],["Nepal",1],["Eslovenia",1],["Kazajistán",1],["Martinica",1],["Andorra",1],["Bulgaria",1],["Guinea Ecuatorial",1],["Perú",1],["Estonia",1]],"professions":[["Empleados",547],["Liberales",379],["Estudiantes",305],["Tecnicos",163],["Profesores",131],["Funcionarios",129],["Jubilados",127],["Parados",102],["Obreros",74],["Directivos",26],["Artistas",26],["Amas de Casa",25],["Sacerdotes",8],["Agricultores",7],["Religiosas",7],["Marinos",4],["Deportistas",2]],"startingCities":[["Sarria",472],["S. Jean P. Port",292],["Ferrol",104],["Oporto",96],["Tui",86],["León",84],["Valença do Minho",65],["Roncesvalles",65],["Cebreiro",57],["Ponferrada",53],["Ribadeo",50],["Pamplona",49],["Astorga",38],["Ourense",30],["Burgos",27],["Francia - C.F.",26],["Le Puy",26],["Irún",26],["Oviedo - C.P.",22],["Sevilla",21],["Lugo - C.P.",17],["Ponte de Lima",17],["Lisboa",15],["Vilafranca",13],["Suiza",13],["Resto Portugal",12],["Logroño",11],["Malaga",10],["Resto C. León C.F.",9],["Bilbao",9],["Madrid - C.F.",8],["Resto Cantabria",8],["Grandas de Salime - C.P.",8],["Resto Asturias - C.N",8],["Muxia",7],["Somport",7],["Ponferrada. C.Inv.",7],["Fonsagrada - C.P.",7],["Vega de Valcarce",7],["Triacastela",7],["Braga",6],["Barcelos",6],["Salamanca",6],["Alemania",6],["Finisterra",6],["Lourdes",6],["Guimaraes",6],["Hendaya",6],["Vigo",5],["Oviedo - C.N.",5],["Holanda",5],["Arles",5],["París",4],["Zamora",4],["Sto. Domingo de la Calzada",4],["San Sebastián",4],["Xunqueira de Ambia",4],["Vezelay",4],["Cataluña - C.F.",3],["Sahagún",3],["Resto Andalucia",3],["Resto Europa",3],["Carrión de los Condes",3],["Valencia O.C.",3],["Com. Valenciana - O.C.",3],["Samos",3],["Resto Asturias - C.P.",2],["Granada",2],["Puente de Domingo Flórez",2],["Neda",2],["Gudiña",2],["Resto País Vasco - C.N.",2],["Italia",2],["Roma",2],["Hospital de Orbigo",2],["Laza",2],["Cadavo",2],["Viana do Castelo",2],["Abadin",2],["Bélgica",2],["Vilalba",2],["Montserrat",2],["Avilés",2],["Castilla La Mancha VP",2],["Fatima",2],["Canfranc",1],["Puente la Reina",1],["Aveiro",1],["Estella",1],["Com. Valenciana - C.F.",1],["Mondoñedo",1],["Jaca",1],["Gijón",1],["Santander",1],["Puebla de Sanabria",1],["Cáceres",1],["Cataluña - O.C.",1],["Chaves-Portugal",1],["Tineo - C.P.",1],["Francia - C.N",1],["Baiona",1],["Granja de Moreruela",1],["Coimbra",1],["A Guarda",1]],"startingRegions":[["Lugo",620],["France",377],["Portugal",229],["León",218],["A Coruña",119],["Navarra",116],["Pontevedra",93],["Asturias",49],["Ourense",38],["Gipuzkoa",32],["Burgos",27],["Sevilla",24],["La Rioja",15],["Switzerland",13],["Málaga",10],["Vizcaya",9],["Cantabria",9],["Madrid",8],["Valencia",7],["Salamanca",6],["Germany",6],["Zamora",6],["Barcelona",6],["Holland",5],["Italy",4],["Europe Other",3],["Palencia",3],["Granada",2],["Belgium",2],["Albacete",2],["Huesca",2],["Cáceres",1],["Porgugal",1]],"caminos":[["Frances-Camino de",1328],["Portugues-Camino",322],["Norte-Camino de",128],["Ingles-Camino",106],["Via de la Plata",90],["Primitivo-Camino",59],["Muxia-Finisterre",13],["Camino de Invierno",9],["Otros caminos",7]]},"all":{"year":"2015","month":"","pilgrims":262459,"gender":[["Hombre",138929],["Mujer",123530]],"transport":[["Pie",236716],["Bicicleta",25346],["Silla de ruedas",71],["Caballo",326]],"age":[["30 - 60",144031],["< 30",74691],["> 60",43737]],"motivation":[["Religioso y otros",141969],["Religioso",99681],["No religioso",20809]],"spanishFrom":[["Madrid",23823],["Andalucía",22866],["Cataluña",14107],["Comunidad Valenciana",14090],["Galicia",8661],["Castilla León",7315],["Castilla la Mancha",5945],["Pais Vasco",4746],["Extremadura",3673],["Murcia",3616],["Canarias",3486],["Aragón",2639],["Asturias",2153],["Baleares",1706],["Navarra",1197],["Cantabria",1035],["La Rioja",564],["Otra",471],["Ceuta",157],["Melilla",137]],"byCountry":[["España",122387],["Italia",22148],["Alemania",18869],["Estados Unidos",13669],["Portugal",12481],["Francia",9912],["Reino Unido",5417],["Irlanda",5367],["Canadá",4199],["Corea",4073],["Brasil",3937],["Australia",3856],["Polonia",3782],["Holanda",3500],["Dinamarca",2163],["Belgica",2102],["México",1768],["Austria",1607],["Argentina",1530],["Suiza",1446],["Japón",1197],["Hungría",1158],["República Checa",1145],["Suecia",1093],["Finlandia",897],["Rusia",873],["Colombia",823],["Sudáfrica",808],["Noruega",800],["China",706],["Nueva Zelanda",692],["Eslovaquia",646],["Venezuela",608],["Lituania",586],["Bulgaria",464],["Eslovenia",411],["Rumania",378],["Uruguay",330],["Chile",282],["Ecuador",274],["Israel",248],["Puerto Rico",247],["Filipinas",236],["Estonia",230],["Islandia",199],["Croacia",182],["Perú",181],["Letonia",176],["Taiwán",175],["Malta",172],["Ucrania",159],["Andorra",128],["Singapur",116],["Luxemburgo",99],["Costa Rica",95],["Malasia",90],["Rep. Dominicana",78],["India",78],["Bielorrusia",75],["Grecia",74],["Paraguay",64],["Guatemala",61],["Líbano",60],["Bolivia",58],["Cuba",55],["Armenia",53],["Indonesia",48],["El Salvador",40],["Argelia",36],["Panamá",36],["Honduras",35],["Jordania",32],["Moldavia",28],["Turquía",27],["Albania",24],["Marruecos",22],["Chipre",22],["Serbia",19],["Nicaragua",16],["Irán",15],["Camerún",13],["Islas Feroe",13],["Tailandia",13],["Botswana",12],["Angola",12],["Siria",9],["Namibia",9],["Vietnam",9],["Sri Lanka",9],["Mauricio",8],["San Marino",8],["Brunei",7],["Georgia",6],["Palestina",6],["Haití",6],["Trinidad y Tobago",6],["Jamaica",5],["Nigeria",5],["Egipto",5],["Dominica",5],["Kenya",5],["Liechtensein",5],["Mozambique",4],["Kazajistán",4],["Zambia",4],["Bermudas",4],["Bosnia",4],["Azerbaiyán",4],["Cabo Verde",4],["Túnez",4],["Mongolia",4],["Arabia Saudita",3],["Guam",3],["Macedonia",3],["Guinea",3],["Senegal",3],["Irak",3],["Yugoslavia",3],["Sudán",3],["Groenlandia",3],["Nepal",3],["Emiratos Arabes Unidos",3],["Mónaco",3],["Kirguistán",2],["Congo",2],["Martinica",2],["Togo",2],["Rwanda",2],["Tanzania",2],["Antigua y Barbuda",2],["Montenegro",2],["Surinam",2],["Mauritania",1],["Benin",1],["Zimbabwe",1],["Mali",1],["Nueva Caledonia",1],["Bahamas",1],["Aruba",1],["Etiopía",1],["Afganistán",1],["Myanmar",1],["Gabón",1],["Uganda",1],["Guyana",1],["Lesotho",1],["Ghana",1],["Guinea Ecuatorial",1],["Kuwait",1],["I. Reunión",1],["Papúa - Nueva Guinea",1],["Urbekistán",1]],"professions":[["Empleados",56487],["Estudiantes",50479],["Liberales",35755],["Jubilados",32797],["Tecnicos",30590],["Profesores",18160],["Funcionarios",13102],["Amas de Casa",5639],["Parados",5266],["Directivos",4213],["Obreros",3556],["Artistas",2557],["Sacerdotes",1419],["Religiosas",1053],["Agricultores",860],["Deportistas",274],["Marinos",239],["Oikoten",13]],"startingCities":[["Sarria",67406],["S. Jean P. Port",31053],["Tui",13800],["Oporto",13199],["León",11495],["Cebreiro",10351],["Ferrol",8685],["Ponferrada",8400],["Roncesvalles",7414],["Oviedo - C.P.",6410],["Astorga",6033],["Valença do Minho",5697],["Pamplona",4639],["Irún",4174],["Burgos",3616],["Le Puy",3577],["Lugo - C.P.",3071],["Ourense",2853],["Vilafranca",2553],["Sevilla",2290],["Triacastela",2213],["Francia - C.F.",2144],["Resto Portugal",2141],["Lisboa",2059],["Resto Asturias - C.N",1746],["Ponte de Lima",1564],["Samos",1508],["Resto C. León C.F.",1430],["Ribadeo",1415],["Bilbao",1230],["Santander",1154],["Vilalba",1061],["Gijón",938],["Logroño",882],["Rates, S. Pedro",765],["San Sebastián",630],["Barcelos",609],["Alemania",607],["Fonsagrada - C.P.",596],["Holanda",578],["Salamanca",559],["Avilés",558],["Neda",547],["Somport",524],["Resto Asturias - C.P.",517],["Madrid - C.F.",516],["Braga",505],["Porriño",469],["Mondoñedo",461],["Puebla de Sanabria",454],["Oviedo - C.N.",453],["Vigo",440],["Zamora",427],["Resto Europa",412],["Muxia",405],["Sahagún",400],["Resto País Vasco - C.N.",378],["Baiona",378],["Finisterra",353],["Baamonde",337],["Grandas de Salime - C.P.",328],["Lourdes",327],["Chaves-Portugal",322],["Abadin",313],["Guimaraes",310],["Bélgica",294],["Francia - C.N",289],["Resto Cantabria",287],["Suiza",267],["A Guarda",257],["Coimbra",253],["Resto Andalucia",248],["Resto C. León - V.P.",228],["Viana do Castelo",227],["Hendaya",222],["Vezelay",216],["Cruz de Ferro",216],["Gudiña",215],["Frómista",207],["Arles",200],["Cadavo",192],["Laza",190],["Fatima",176],["Granja de Moreruela",171],["Vega de Valcarce",168],["Xunqueira de Ambia",160],["Allariz",159],["Cataluña - C.F.",157],["Sto. Domingo de la Calzada",155],["Lourenzá",151],["Carrión de los Condes",148],["Tineo - C.P.",146],["Hospital de Orbigo",145],["Rabanal del Camino",144],["Jaca",140],["Puente la Reina",140],["Com. Valenciana - O.C.",139],["Barcelona",137],["Mérida",134],["Cáceres",125],["Zaragoza",123],["Ponferrada. C.Inv.",117],["Montserrat",113],["Madrid - V.P.",108],["París",105],["Resto de Extremadura",102],["Valencia O.C.",99],["Com. Valenciana - C.F.",99],["Povoa de Varzim",98],["Castrojeriz",97],["Granada",94],["Estella",91],["R.Pais Vasco C.F.",91],["Navarra",89],["Salas",89],["Verín",86],["Austria",82],["Italia",76],["Malaga",75],["Esposende",74],["Molinaseca",70],["Cast. la Mancha - C.F.",65],["Viseu",56],["Vilabade",56],["Castilla La Mancha VP",50],["Canfranc",49],["Monforte de Lemos",48],["Castilla la Mancha otros",45],["Polonia",42],["Valladolid",41],["Huelva",37],["Nájera",37],["Faro",36],["Grado",36],["Córdoba",34],["Cataluña - O.C.",33],["Badajoz",31],["Roma",31],["Resto Galicia",24],["Chantada",22],["La Mesa",22],["Reino Unido C.F.",22],["La Rioja",22],["Benavente",21],["Aveiro",20],["San Juan de Ortega",20],["Republica Checa",19],["Murcia",17],["Fonfría",15],["Quiroga",14],["",12],["Dinamarca",10],["A Rúa",8],["Luxemburgo",8],["O Barco de Valdeorras",7],["Eslovaquia",5],["Vegadeo",5],["Ortigueira",5],["Hungría",5],["Sobrado",4],["Guntín",4],["Valcarlos",4],["Leyre",4],["Borres",4],["Andorra",4],["Irlanda C.F.",4],["Puente de Domingo Flórez",4],["Betanzos",3],["Lalín",3],["La Bañeza",3],["Reino Unido C.Ing",3],["Rusia",2],["Las Médulas",2],["mirallos",2],["Vincios",2],["Pontedeume",2],["Inglaterra C.F.",2],["Covelo",2],["Irlanda C. Ing",2],["Viveiro",1],["Gándara",1],["Artieda",1],["Paradela",1],["Finlandia",1],["Peñaseita",1],["Pardellas",1],["Sobrado dos Monxes",1],["Petín",1]],"startingRegions":[["Lugo",89234],["France",38657],["León",31408],["Portugal",27715],["Pontevedra",15353],["Navarra",12381],["Asturias",11253],["A Coruña",10033],["Gipuzkoa",5273],["Ourense",3753],["Burgos",3733],["Sevilla",2538],["Cantabria",1441],["Vizcaya",1230],["La Rioja",1096],["Zamora",1073],["Madrid",624],["Germany",607],["Holland",578],["Salamanca",559],["Barcelona",440],["Europe Other",412],["Palencia",355],["Valencia",337],["Porgugal",322],["Belgium",294],["Switzerland",267],["Badajoz",267],["Huesca",189],["Albacete",160],["Cáceres",125],["Zaragoza",124],["Italy",107],["Granada",94],["Austria",82],["Málaga",75],["Poland",42],["Valladolid",41],["Huelva",37],["Córdoba",34],["UK",27],["Czech Republic",19],["Murcia",17],["City&nbsp;Was Blank",12],["Denmark",10],["Luxembourg",8],["Ireland",6],["Slovakia",5],["Hungary",5],["Andorra",4],["Russia",2],["Finland",1]],"caminos":[["Frances-Camino de",172206],["Portugues-Camino",43137],["Norte-Camino de",15826],["Primitivo-Camino",11471],["Ingles-Camino",9247],["Via de la Plata",9221],["Muxia-Finisterre",758],["Otros caminos",383],["Camino de Invierno",210]]}},"2016":{"1":{"year":"2016","month":"1","pilgrims":1304,"gender":[["Hombre",893],["Mujer",411]],"transport":[["Pie",1274],["Bicicleta",30]],"age":[["30 - 60",802],["< 30",419],["> 60",83]],"motivation":[["Religioso y otros",896],["Religioso",299],["No religioso",109]],"spanishFrom":[["Madrid",107],["Andalucía",83],["Galicia",77],["Cataluña",69],["Comunidad Valenciana",67],["Baleares",44],["Castilla León",31],["Castilla la Mancha",25],["Canarias",13],["Pais Vasco",12],["Asturias",10],["Murcia",10],["Extremadura",9],["Navarra",7],["Aragón",7],["Ceuta",2],["Cantabria",2],["Otra",2],["La Rioja",1],["Melilla",1]],"byCountry":[["España",579],["Corea",170],["Italia",86],["Portugal",69],["Alemania",60],["Estados Unidos",50],["Brasil",44],["China",19],["Polonia",19],["Argentina",18],["Australia",16],["Francia",15],["Japón",15],["Holanda",14],["México",13],["Reino Unido",13],["Rusia",13],["Colombia",12],["Hungría",7],["República Checa",6],["Irlanda",5],["Sudáfrica",5],["Taiwán",5],["Austria",5],["Suiza",4],["Perú",4],["Uruguay",4],["Canadá",3],["Finlandia",2],["Suecia",2],["Lituania",2],["Honduras",2],["Costa Rica",2],["Ecuador",2],["Nueva Zelanda",2],["Bulgaria",2],["Croacia",1],["Albania",1],["Bielorrusia",1],["Indonesia",1],["Marruecos",1],["Groenlandia",1],["Túnez",1],["Panamá",1],["Eslovenia",1],["Armenia",1],["Turquía",1],["Singapur",1],["Moldavia",1],["Chile",1],["Belgica",1]],"professions":[["Empleados",301],["Estudiantes",253],["Liberales",209],["Tecnicos",111],["Profesores",99],["Funcionarios",89],["Obreros",61],["Parados",51],["Jubilados",45],["Artistas",20],["Amas de Casa",20],["Directivos",19],["Agricultores",11],["Sacerdotes",9],["Religiosas",3],["Marinos",3]],"startingCities":[["Sarria",282],["S. Jean P. Port",167],["León",75],["Oporto",66],["Tui",61],["Ferrol",58],["Cebreiro",57],["Ponferrada",44],["Pamplona",44],["Astorga",44],["Roncesvalles",38],["Valença do Minho",31],["Lugo - C.P.",27],["Oviedo - C.P.",25],["Burgos",16],["Vilafranca",15],["Lisboa",13],["Ourense",12],["Gijón",12],["Triacastela",12],["Samos",11],["Fonsagrada - C.P.",10],["Ribadeo",10],["Braga",10],["Resto C. León C.F.",8],["Puebla de Sanabria",7],["Francia - C.F.",7],["Ponte de Lima",7],["Irún",6],["Sevilla",6],["Sahagún",5],["Muxia",5],["Le Puy",5],["Guimaraes",5],["Resto Portugal",4],["Zamora",4],["Cáceres",4],["Rates, S. Pedro",4],["Vigo",4],["Logroño",3],["Xunqueira de Ambia",3],["Fatima",3],["Oviedo - C.N.",3],["Francia - C.N",3],["Jaca",3],["Alemania",3],["Finisterra",3],["Tineo - C.P.",2],["Neda",2],["Rabanal del Camino",2],["Barcelos",2],["Frómista",2],["Barcelona",2],["Resto Asturias - C.P.",2],["San Sebastián",2],["Resto Asturias - C.N",2],["Montserrat",2],["Chaves-Portugal",2],["Esposende",2],["Somport",2],["Porriño",2],["Avilés",2],["Resto de Extremadura",1],["Vilalba",1],["Malaga",1],["Granada",1],["O Barco de Valdeorras",1],["Carrión de los Condes",1],["Viana do Castelo",1],["París",1],["Holanda",1],["Resto Cantabria",1],["Castrojeriz",1],["La Rioja",1],["Resto País Vasco - C.N.",1],["Salamanca",1],["Bilbao",1],["Com. Valenciana - C.F.",1],["Vega de Valcarce",1],["Cataluña - O.C.",1],["Dinamarca",1],["Valencia O.C.",1],["Cast. la Mancha - C.F.",1],["Suiza",1],["Laza",1],["Polonia",1],["Navarra",1],["Puente la Reina",1],["Aveiro",1],["Coimbra",1],["Santander",1]],"startingRegions":[["Lugo",410],["León",194],["France",185],["Portugal",148],["Navarra",84],["A Coruña",68],["Pontevedra",67],["Asturias",48],["Ourense",19],["Burgos",17],["Zamora",11],["Gipuzkoa",9],["Sevilla",6],["Barcelona",5],["Cáceres",4],["La Rioja",4],["Germany",3],["Palencia",3],["Huesca",3],["Porgugal",2],["Cantabria",2],["Valencia",2],["Granada",1],["Poland",1],["Holland",1],["Badajoz",1],["Vizcaya",1],["Málaga",1],["Denmark",1],["Albacete",1],["Switzerland",1],["Salamanca",1]],"caminos":[["Frances-Camino de",862],["Portugues-Camino",217],["Primitivo-Camino",66],["Ingles-Camino",60],["Norte-Camino de",45],["Via de la Plata",43],["Muxia-Finisterre",8],["Otros caminos",2],["Camino de Invierno",1]]},"2":{"year":"2016","month":"2","pilgrims":1733,"gender":[["Hombre",1113],["Mujer",620]],"transport":[["Pie",1648],["Bicicleta",85]],"age":[["30 - 60",891],["< 30",709],["> 60",133]],"motivation":[["Religioso y otros",1067],["Religioso",532],["No religioso",134]],"spanishFrom":[["Andalucía",140],["Galicia",127],["Castilla León",85],["Comunidad Valenciana",78],["Cataluña",68],["Madrid",63],["Castilla la Mancha",27],["Baleares",24],["Canarias",19],["Pais Vasco",16],["Aragón",10],["Murcia",7],["Navarra",7],["La Rioja",6],["Extremadura",5],["Cantabria",3],["Otra",2],["Asturias",2]],"byCountry":[["España",689],["Portugal",259],["Corea",249],["Italia",86],["Alemania",84],["Estados Unidos",42],["Irlanda",36],["Japón",34],["Brasil",33],["Francia",32],["Reino Unido",24],["China",15],["Polonia",13],["Suiza",12],["Canadá",12],["México",10],["Holanda",10],["Australia",9],["Argentina",9],["República Checa",5],["Taiwán",5],["Dinamarca",4],["Hungría",4],["Letonia",4],["Belgica",4],["Rusia",4],["Lituania",3],["Suecia",3],["Austria",3],["Venezuela",3],["Chile",3],["Perú",3],["Colombia",2],["Uruguay",2],["Eslovaquia",2],["Finlandia",2],["Bielorrusia",2],["Costa Rica",2],["Ucrania",2],["Bolivia",2],["Rumania",1],["Paraguay",1],["Cuba",1],["Aruba",1],["Noruega",1],["Luxemburgo",1],["Angola",1],["Kenya",1],["Ecuador",1],["Nigeria",1],["Estonia",1]],"professions":[["Estudiantes",540],["Empleados",374],["Liberales",164],["Tecnicos",113],["Profesores",109],["Funcionarios",98],["Jubilados",82],["Amas de Casa",76],["Parados",57],["Obreros",47],["Artistas",21],["Sacerdotes",14],["Agricultores",10],["Directivos",10],["Religiosas",8],["Marinos",8],["Deportistas",2]],"startingCities":[["Sarria",505],["S. Jean P. Port",184],["Ferrol",115],["Cebreiro",113],["Oporto",104],["León",89],["Tui",77],["Pamplona",70],["Ponferrada",53],["Roncesvalles",48],["Valença do Minho",40],["Astorga",30],["Vilafranca",20],["Samos",20],["Oviedo - C.P.",20],["Resto Portugal",17],["Sevilla",17],["Lisboa",14],["Burgos",14],["Lugo - C.P.",14],["Quiroga",11],["Irún",11],["Ourense",10],["Barcelos",10],["Francia - C.F.",9],["Resto C. León C.F.",7],["Vilalba",6],["Coimbra",6],["Triacastela",6],["Logroño",5],["Finisterra",5],["Esposende",5],["Ponte de Lima",5],["Francia - C.N",5],["Bilbao",4],["Le Puy",4],["Santander",4],["Huelva",4],["Avilés",3],["Fonsagrada - C.P.",3],["Rates, S. Pedro",3],["Resto C. León - V.P.",3],["Resto Andalucia",2],["Allariz",2],["Fatima",2],["Madrid - C.F.",2],["Neda",2],["Jaca",2],["Sahagún",2],["Ribadeo",2],["Resto Asturias - C.N",2],["Ponferrada. C.Inv.",1],["Italia",1],["Com. Valenciana - C.F.",1],["Alemania",1],["Resto País Vasco - C.N.",1],["París",1],["Lourdes",1],["Carrión de los Condes",1],["Baiona",1],["San Sebastián",1],["Somport",1],["Porriño",1],["Gijón",1],["Hospital de Orbigo",1],["Puente la Reina",1],["Mérida",1],["Montserrat",1],["Frómista",1],["Guimaraes",1],["Verín",1],["Roma",1],["Grandas de Salime - C.P.",1]],"startingRegions":[["Lugo",680],["León",206],["France",205],["Portugal",202],["A Coruña",122],["Navarra",119],["Pontevedra",79],["Asturias",27],["Sevilla",19],["Ourense",18],["Burgos",14],["Gipuzkoa",13],["La Rioja",5],["Vizcaya",4],["Huelva",4],["Cantabria",4],["Madrid",2],["Huesca",2],["Italy",2],["Palencia",2],["Germany",1],["Valencia",1],["Badajoz",1],["Barcelona",1]],"caminos":[["Frances-Camino de",1195],["Portugues-Camino",286],["Ingles-Camino",117],["Norte-Camino de",40],["Via de la Plata",40],["Primitivo-Camino",38],["Camino de Invierno",12],["Muxia-Finisterre",5]]},"3":{"year":"2016","month":"3","pilgrims":11067,"gender":[["Hombre",5816],["Mujer",5251]],"transport":[["Pie",10348],["Bicicleta",698],["Caballo",20],["Silla de ruedas",1]],"age":[["30 - 60",5427],["< 30",4858],["> 60",782]],"motivation":[["Religioso y otros",5367],["Religioso",4639],["No religioso",1061]],"spanishFrom":[["Madrid",1679],["Andalucía",1028],["Cataluña",727],["Galicia",719],["Comunidad Valenciana",584],["Castilla León",418],["Castilla la Mancha",339],["Pais Vasco",245],["Extremadura",230],["Canarias",210],["Murcia",199],["Baleares",169],["Asturias",91],["Aragón",81],["Cantabria",39],["Navarra",31],["Otra",20],["La Rioja",17],["Melilla",4],["Ceuta",2]],"byCountry":[["España",6832],["Portugal",885],["Alemania",819],["Irlanda",329],["Estados Unidos",284],["Italia",247],["Reino Unido",163],["México",120],["Corea",114],["Brasil",111],["China",86],["Francia",85],["Argentina",72],["Japón",70],["Dinamarca",59],["Venezuela",57],["Canadá",51],["Australia",51],["Colombia",46],["Polonia",46],["Uruguay",39],["Austria",37],["Finlandia",33],["Holanda",33],["Ecuador",28],["Sudáfrica",25],["Chile",22],["Belgica",20],["Lituania",20],["Noruega",18],["República Checa",18],["Rusia",17],["Perú",17],["Suiza",17],["Hungría",15],["Suecia",15],["Puerto Rico",13],["Rumania",12],["Eslovaquia",11],["Singapur",10],["Taiwán",9],["Bulgaria",8],["Estonia",6],["Nueva Zelanda",6],["Andorra",6],["Letonia",5],["Grecia",5],["Malta",5],["Costa Rica",5],["Luxemburgo",5],["Marruecos",4],["Indonesia",4],["Islandia",4],["Paraguay",4],["Filipinas",4],["Eslovenia",4],["El Salvador",3],["Ucrania",3],["Tailandia",3],["Malasia",3],["Croacia",2],["Turquía",2],["Siria",2],["Bolivia",2],["Chipre",2],["Rep. Dominicana",2],["Honduras",1],["Namibia",1],["Nepal",1],["Nicaragua",1],["Madagascar",1],["Somalia",1],["India",1],["Panamá",1],["Albania",1],["Gambia",1],["Armenia",1],["Jordania",1]],"professions":[["Estudiantes",3533],["Empleados",1852],["Liberales",1400],["Tecnicos",1360],["Profesores",988],["Funcionarios",542],["Jubilados",509],["Parados",177],["Amas de Casa",176],["Directivos",166],["Obreros",162],["Artistas",88],["Agricultores",38],["Sacerdotes",21],["Marinos",20],["Religiosas",18],["Deportistas",9],["Oikoten",8]],"startingCities":[["Sarria",4276],["Tui",645],["Oporto",567],["Ferrol",505],["Cebreiro",501],["S. Jean P. Port",460],["Valença do Minho",401],["Ponferrada",360],["León",301],["Roncesvalles",254],["Ourense",237],["Lugo - C.P.",212],["Vigo",203],["Astorga",160],["Oviedo - C.P.",140],["Ponte de Lima",129],["Vilafranca",102],["Pamplona",100],["Burgos",99],["Porriño",82],["Allariz",82],["Samos",80],["Irún",70],["Triacastela",66],["Sevilla",62],["Resto Portugal",54],["Lisboa",54],["Resto C. León C.F.",43],["Baamonde",41],["Barcelos",36],["Resto Asturias - C.N",34],["Logroño",33],["Zamora",25],["Sahagún",23],["Vilalba",23],["Gijón",23],["Puebla de Sanabria",23],["Fonsagrada - C.P.",23],["Ribadeo",21],["Santander",20],["Bilbao",18],["Le Puy",18],["Braga",17],["Cadavo",16],["Alemania",15],["Chaves-Portugal",15],["Francia - C.F.",15],["Oviedo - C.N.",14],["Puente la Reina",14],["A Guarda",14],["Madrid - C.F.",13],["Grandas de Salime - C.P.",12],["Salamanca",12],["Abadin",11],["San Sebastián",11],["Lourenzá",11],["Granja de Moreruela",11],["Muxia",10],["Viana do Castelo",10],["Avilés",9],["Gudiña",8],["Mérida",8],["Resto Asturias - C.P.",7],["Esposende",7],["Navarra",7],["Ponferrada. C.Inv.",7],["Carrión de los Condes",7],["Baiona",6],["Vega de Valcarce",6],["Resto C. León - V.P.",6],["Verín",6],["Castilla la Mancha otros",6],["Resto de Extremadura",6],["Viseu",6],["Com. Valenciana - O.C.",5],["Cast. la Mancha - C.F.",5],["Benavente",5],["Finisterra",5],["Monforte de Lemos",5],["Resto Andalucia",5],["Cataluña - C.F.",4],["Sto. Domingo de la Calzada",4],["Resto País Vasco - C.N.",4],["Zaragoza",4],["Córdoba",4],["Malaga",3],["Rates, S. Pedro",3],["Grado",3],["Bélgica",3],["Com. Valenciana - C.F.",3],["Xunqueira de Ambia",3],["Valladolid",2],["Huelva",2],["Estella",2],["Barcelona",2],["Somport",2],["Mondoñedo",2],["Resto Galicia",2],["Lourdes",2],["Tineo - C.P.",2],["Neda",2],["Frómista",2],["Cataluña - O.C.",2],["Montserrat",2],["Jaca",2],["Arles",2],["Coimbra",2],["XFonsagrada",2],["Fonfría",2],["Castilla La Mancha VP",2],["Cáceres",2],["Guimaraes",2],["Hendaya",2],["Aveiro",2],["Italia",1],["Leyre",1],["Castrojeriz",1],["Resto Cantabria",1],["Polonia",1],["Rabanal del Camino",1],["Povoa de Varzim",1],["R.Pais Vasco C.F.",1],["Guitiriz",1],["París",1],["Nájera",1],["Vezelay",1],["Murcia",1],["Valcarlos",1],["Holanda",1],["Resto Europa",1],["Madrid - V.P.",1],["Borres",1],["Suiza",1],["Covelo",1],["Fatima",1],["Hospital de Orbigo",1],["Francia - C.N",1],["Valencia O.C.",1]],"startingRegions":[["Lugo",5293],["Portugal",1285],["León",1010],["Pontevedra",951],["A Coruña",524],["France",504],["Navarra",379],["Ourense",343],["Asturias",245],["Burgos",100],["Gipuzkoa",86],["Sevilla",67],["Zamora",64],["La Rioja",38],["Cantabria",21],["Vizcaya",18],["Germany",15],["Porgugal",15],["Madrid",14],["Badajoz",14],["Albacete",13],["Salamanca",12],["Barcelona",10],["Palencia",9],["Valencia",9],["Córdoba",4],["Zaragoza",4],["Málaga",3],["Belgium",3],["Valladolid",2],["Huelva",2],["Huesca",2],["Cáceres",2],["Murcia",1],["Poland",1],["Italy",1],["Holland",1],["Europe Other",1],["Switzerland",1]],"caminos":[["Frances-Camino de",7006],["Portugues-Camino",2243],["Via de la Plata",530],["Ingles-Camino",507],["Primitivo-Camino",416],["Norte-Camino de",321],["Otros caminos",17],["Muxia-Finisterre",15],["Camino de Invierno",12]]},"4":{"year":"2016","month":"4","pilgrims":15103,"gender":[["Hombre",8029],["Mujer",7074]],"transport":[["Pie",13857],["Bicicleta",1215],["Silla de ruedas",25],["Caballo",6]],"age":[["30 - 60",8431],["< 30",3565],["> 60",3107]],"motivation":[["Religioso",7296],["Religioso y otros",6676],["No religioso",1131]],"spanishFrom":[["Comunidad Valenciana",1035],["Andalucía",807],["Madrid",652],["Galicia",455],["Cataluña",434],["Castilla León",416],["Castilla la Mancha",261],["Canarias",236],["Pais Vasco",138],["Baleares",125],["Aragón",120],["Murcia",104],["Extremadura",86],["Cantabria",56],["Asturias",50],["Otra",50],["Navarra",46],["Ceuta",36],["La Rioja",26],["Melilla",3]],"byCountry":[["España",5136],["Alemania",1559],["Portugal",1511],["Italia",951],["Estados Unidos",679],["Francia",666],["Irlanda",651],["Reino Unido",561],["Corea",433],["Brasil",252],["Australia",226],["Holanda",224],["Canadá",196],["Dinamarca",194],["Polonia",132],["Suiza",132],["Austria",122],["Argentina",113],["México",112],["República Checa",97],["Belgica",91],["Finlandia",88],["Colombia",67],["Rusia",65],["Noruega",62],["Suecia",58],["China",56],["Hungría",53],["Japón",47],["Venezuela",47],["Lituania",43],["Sudáfrica",37],["Filipinas",34],["Eslovaquia",32],["Rumania",26],["Estonia",24],["Eslovenia",23],["Chile",21],["Bulgaria",20],["Nueva Zelanda",19],["Uruguay",17],["Croacia",17],["Taiwán",15],["Malasia",14],["Ucrania",13],["Ecuador",12],["Emiratos Arabes Unidos",12],["Letonia",11],["Israel",9],["Puerto Rico",9],["Bolivia",8],["Singapur",7],["Paraguay",6],["Perú",6],["Luxemburgo",6],["Costa Rica",5],["El Salvador",5],["Turquía",5],["Guatemala",4],["India",4],["Kuwait",4],["Sri Lanka",4],["Grecia",4],["Malta",3],["Indonesia",3],["Moldavia",3],["Panamá",3],["Cuba",3],["Bielorrusia",3],["Islandia",3],["Serbia",2],["Nicaragua",2],["Líbano",2],["Botswana",2],["Kazajistán",1],["Jordania",1],["Trinidad y Tobago",1],["Zimbabwe",1],["Albania",1],["Macedonia",1],["Nigeria",1],["Tailandia",1],["Arabia Saudita",1],["Egipto",1],["Rep. Dominicana",1],["Marruecos",1],["Andorra",1],["Pakistán",1],["Cabo Verde",1],["Irak",1],["Guinea Ecuatorial",1]],"professions":[["Empleados",3386],["Estudiantes",2304],["Jubilados",2229],["Liberales",2212],["Tecnicos",1945],["Funcionarios",844],["Profesores",825],["Amas de Casa",343],["Parados",256],["Directivos",207],["Obreros",173],["Artistas",140],["Sacerdotes",99],["Religiosas",63],["Agricultores",46],["Marinos",18],["Deportistas",12],["Oikoten",1]],"startingCities":[["Sarria",4394],["S. Jean P. Port",1476],["Oporto",1298],["León",682],["Tui",594],["Valença do Minho",502],["Ferrol",462],["Cebreiro",451],["Ponferrada",340],["Roncesvalles",319],["Pamplona",308],["Astorga",300],["Oviedo - C.P.",300],["Le Puy",215],["Ponte de Lima",214],["Sevilla",213],["Burgos",184],["Ourense",177],["Lugo - C.P.",161],["Resto Portugal",156],["Lisboa",155],["Francia - C.F.",148],["Triacastela",144],["Irún",143],["Vilafranca",129],["Samos",99],["Braga",93],["Resto C. León - V.P.",78],["Resto Asturias - C.N",71],["Zamora",62],["Rates, S. Pedro",62],["Porriño",57],["Bilbao",52],["Santander",45],["Barcelos",43],["Chaves-Portugal",40],["Logroño",40],["Resto C. León C.F.",36],["Vilalba",35],["Ribadeo",35],["Gijón",32],["Salamanca",31],["Alemania",30],["Avilés",29],["Baiona",24],["Resto Andalucia",22],["Resto Europa",22],["Sahagún",18],["Puebla de Sanabria",18],["Somport",17],["Viana do Castelo",17],["Vigo",17],["San Sebastián",16],["Resto País Vasco - C.N.",16],["Frómista",14],["Povoa de Varzim",14],["Vega de Valcarce",14],["Viseu",13],["Jaca",13],["Guimaraes",13],["Coimbra",12],["Madrid - C.F.",12],["Hendaya",12],["Esposende",11],["Fatima",11],["Granja de Moreruela",10],["Vezelay",10],["Baamonde",10],["Com. Valenciana - C.F.",9],["Grandas de Salime - C.P.",9],["Francia - C.N",9],["Oviedo - C.N.",9],["Cataluña - C.F.",9],["Fonsagrada - C.P.",9],["Resto Asturias - C.P.",8],["Gudiña",8],["Mérida",8],["Allariz",7],["Puente la Reina",7],["Cruz de Ferro",7],["Neda",7],["A Guarda",7],["Abadin",7],["Montserrat",7],["Lourdes",7],["Arles",7],["Com. Valenciana - O.C.",7],["Xunqueira de Ambia",7],["Cadavo",6],["Muxia",6],["Sto. Domingo de la Calzada",6],["Navarra",6],["R.Pais Vasco C.F.",6],["Carrión de los Condes",6],["Zaragoza",5],["Resto Cantabria",5],["Ponferrada. C.Inv.",5],["París",5],["Madrid - V.P.",5],["Malaga",4],["Finisterra",4],["Hospital de Orbigo",4],["Bélgica",4],["Suiza",4],["Italia",4],["Holanda",3],["Mondoñedo",3],["Lourenzá",3],["Austria",3],["Hungría",3],["Paradela",3],["Estella",3],["Tineo - C.P.",3],["Nájera",3],["Polonia",2],["Valencia O.C.",2],["Laza",2],["Castilla La Mancha VP",2],["Roma",2],["Molinaseca",2],["Benavente",2],["Grado",2],["Huelva",2],["Castilla la Mancha otros",2],["Canfranc",2],["Barcelona",2],["",2],["La Rioja",2],["Luxemburgo",1],["Aveiro",1],["Salas",1],["Pontedeume",1],["Monforte de Lemos",1],["Irlanda C.F.",1],["Cataluña - O.C.",1],["Resto de Extremadura",1],["Reino Unido C.F.",1],["Covelo",1],["Sobrado",1],["Egipto",1],["San Juan de Ortega",1],["Vincios",1],["Castrojeriz",1],["Resto Galicia",1],["Granada",1]],"startingRegions":[["Lugo",5361],["Portugal",2604],["France",1906],["León",1615],["Pontevedra",701],["Navarra",643],["A Coruña",482],["Asturias",464],["Sevilla",235],["Ourense",212],["Burgos",186],["Gipuzkoa",181],["Zamora",92],["Vizcaya",52],["La Rioja",51],["Cantabria",50],["Porgugal",40],["Salamanca",31],["Germany",30],["Europe Other",22],["Palencia",20],["Barcelona",19],["Valencia",18],["Madrid",17],["Huesca",15],["Badajoz",9],["Italy",6],["Zaragoza",5],["Albacete",4],["Belgium",4],["Switzerland",4],["Málaga",4],["Austria",3],["Holland",3],["Hungary",3],["Poland",2],["Huelva",2],["City&nbsp;Was Blank",2],["Luxembourg",1],["Granada",1],["Ireland",1],["UK",1],["Egypt",1]],"caminos":[["Frances-Camino de",9554],["Portugues-Camino",3316],["Via de la Plata",700],["Norte-Camino de",533],["Primitivo-Camino",499],["Ingles-Camino",470],["Otros caminos",13],["Muxia-Finisterre",10],["Camino de Invierno",6],["Otros caminos",2]]},"5":{"year":"2016","month":"5","pilgrims":32782,"gender":[["Hombre",17075],["Mujer",15707]],"transport":[["Pie",29790],["Bicicleta",2920],["Caballo",60],["Silla de ruedas",12]],"age":[["30 - 60",18741],["> 60",9475],["< 30",4566]],"motivation":[["Religioso y otros",16218],["Religioso",14420],["No religioso",2144]],"spanishFrom":[["Madrid",1698],["Andalucía",1357],["Cataluña",1338],["Comunidad Valenciana",992],["Galicia",798],["Castilla León",618],["Castilla la Mancha",565],["Canarias",412],["Pais Vasco",354],["Aragón",262],["Asturias",222],["Extremadura",182],["Murcia",182],["Baleares",151],["Cantabria",89],["Navarra",80],["La Rioja",40],["Otra",37],["Ceuta",4],["Melilla",2]],"byCountry":[["España",9383],["Alemania",4042],["Italia",2407],["Estados Unidos",2374],["Portugal",1504],["Francia",1486],["Irlanda",1250],["Reino Unido",1017],["Australia",875],["Brasil",844],["Holanda",832],["Canadá",709],["Corea",665],["Polonia",445],["Dinamarca",427],["Argentina",324],["Austria",314],["Suiza",267],["Belgica",266],["Suecia",253],["México",209],["Japón",200],["Finlandia",195],["Colombia",192],["Nueva Zelanda",155],["República Checa",153],["Rusia",141],["Hungría",133],["Noruega",125],["Sudáfrica",109],["Lituania",105],["Eslovaquia",101],["Venezuela",94],["Eslovenia",86],["Chile",79],["China",77],["Filipinas",77],["Rumania",70],["Ucrania",55],["Ecuador",53],["Bulgaria",53],["Malta",52],["Estonia",44],["Puerto Rico",40],["Taiwán",38],["Andorra",37],["Uruguay",36],["Croacia",36],["Israel",34],["Islandia",26],["Panamá",25],["Singapur",23],["Luxemburgo",18],["Letonia",15],["Perú",15],["Costa Rica",13],["Armenia",11],["Chipre",11],["Rep. Dominicana",10],["Turquía",8],["Namibia",8],["Grecia",8],["Indonesia",7],["Líbano",6],["Bielorrusia",6],["Guatemala",6],["Malasia",6],["Paraguay",6],["India",5],["Bolivia",5],["Egipto",5],["Nicaragua",4],["Maldivas",4],["Swazilandia",4],["Túnez",3],["Cuba",3],["Omán",3],["Tuvalu",3],["Albania",3],["Moldavia",3],["Jordania",3],["Serbia",2],["Islas Feroe",2],["Bosnia",2],["Argelia",2],["Marruecos",2],["Antillas Holandesas",2],["El Salvador",2],["Tailandia",2],["Camboya",1],["Comores",1],["Samoa Occidental",1],["Pakistán",1],["Siria",1],["Arabia Saudita",1],["Honduras",1],["Zimbabwe",1],["Afganistán",1],["Dominica",1],["Guyana",1],["Palestina",1],["Libia",1],["Mauritania",1],["Trinidad y Tobago",1],["Eritrea",1],["San Marino",1],["Islas Malvinas",1],["Palau",1],["Botswana",1],["Rep. Centroafricana",1],["Gambia",1],["Nigeria",1],["Kazajistán",1],["Jamaica",1],["Barbados",1],["Surinam",1]],"professions":[["Jubilados",7223],["Empleados",6604],["Liberales",5558],["Tecnicos",4701],["Estudiantes",2295],["Funcionarios",2171],["Profesores",1385],["Amas de Casa",757],["Parados",514],["Directivos",477],["Obreros",362],["Artistas",286],["Sacerdotes",140],["Religiosas",125],["Agricultores",92],["Deportistas",51],["Marinos",39],["Oikoten",2]],"startingCities":[["Sarria",7198],["S. Jean P. Port",5157],["Oporto",2845],["León",1665],["Tui",1122],["Ferrol",976],["Roncesvalles",924],["Ponferrada",899],["Cebreiro",874],["Valença do Minho",762],["Oviedo - C.P.",761],["Pamplona",756],["Astorga",736],["Sevilla",624],["Le Puy",595],["Burgos",509],["Irún",502],["Lisboa",418],["Resto Portugal",386],["Lugo - C.P.",329],["Francia - C.F.",290],["Ourense",233],["Triacastela",232],["Vilafranca",222],["Ponte de Lima",171],["Bilbao",155],["Samos",145],["Resto Asturias - C.N",138],["Resto C. León C.F.",136],["Porriño",124],["Santander",120],["Logroño",115],["Baiona",106],["Ribadeo",106],["Alemania",100],["Barcelos",82],["Gijón",79],["Rates, S. Pedro",74],["Holanda",74],["Braga",68],["Madrid - C.F.",63],["Salamanca",57],["San Sebastián",56],["Avilés",53],["Vilalba",52],["Zamora",52],["Finisterra",47],["A Guarda",47],["Sahagún",46],["Somport",43],["Muxia",40],["Viana do Castelo",40],["Resto Andalucia",40],["Coimbra",36],["Chaves-Portugal",35],["Resto Asturias - C.P.",33],["Resto Cantabria",32],["Oviedo - C.N.",32],["Zaragoza",32],["Puebla de Sanabria",28],["Lourdes",28],["Jaca",28],["Abadin",27],["Resto Europa",27],["Francia - C.N",27],["Cadavo",27],["Molinaseca",27],["Povoa de Varzim",26],["Vezelay",26],["Hendaya",26],["Guimaraes",25],["Resto País Vasco - C.N.",25],["Granja de Moreruela",24],["Fatima",24],["Bélgica",24],["Rabanal del Camino",23],["Fonsagrada - C.P.",23],["Mérida",23],["Com. Valenciana - C.F.",22],["Frómista",22],["Vigo",21],["Castilla la Mancha otros",21],["Baamonde",21],["Tineo - C.P.",20],["Suiza",20],["Grandas de Salime - C.P.",19],["Puente la Reina",18],["Sto. Domingo de la Calzada",18],["Vega de Valcarce",17],["Barcelona",17],["Madrid - V.P.",17],["Mondoñedo",17],["Cataluña - C.F.",17],["Nájera",17],["Carrión de los Condes",17],["Montserrat",16],["Arles",16],["Gudiña",15],["Ponferrada. C.Inv.",15],["Granada",13],["Com. Valenciana - O.C.",13],["Navarra",12],["Hospital de Orbigo",12],["Resto C. León - V.P.",11],["Castrojeriz",11],["Cáceres",11],["Aveiro",9],["Resto Galicia",8],["Malaga",8],["París",7],["Estella",7],["Huelva",7],["Lourenzá",7],["Faro",7],["Austria",7],["Cast. la Mancha - C.F.",7],["Cataluña - O.C.",6],["Verín",6],["Viseu",6],["La Rioja",6],["Valencia O.C.",6],["La Mesa",6],["Italia",5],["Reino Unido C.F.",5],["Salas",4],["Laza",4],["Castilla La Mancha VP",4],["Valladolid",4],["Córdoba",3],["Badajoz",3],["San Juan de Ortega",3],["Cruz de Ferro",2],["Rábade",2],["XSan Sebastian",2],["Resto de Extremadura",2],["R.Pais Vasco C.F.",2],["Roma",2],["Grado",2],["Xunqueira de Ambia",2],["Murcia",2],["Viveiro",1],["Lalín",1],["Allariz",1],["mirallos",1],["Reino Unido C.Ing",1],["Guitiriz",1],["XGrandas de Salime",1],["Egipto",1],["Neda",1],["Irlanda C. Ing",1],["Esposende",1],["Sobrado",1],["Benavente",1],["Canfranc",1],["Finlandia",1],["Vincios",1],["Monforte de Lemos",1],["Vilabade",1],["Resto Africa",1],["Dinamarca",1],["XFonsagrada",1]],"startingRegions":[["Lugo",9064],["France",6215],["Portugal",4979],["León",3811],["Navarra",1717],["Pontevedra",1422],["Asturias",1148],["A Coruña",1073],["Sevilla",664],["Gipuzkoa",587],["Burgos",523],["Ourense",262],["La Rioja",156],["Vizcaya",155],["Cantabria",152],["Zamora",105],["Germany",100],["Madrid",80],["Holland",74],["Salamanca",57],["Barcelona",56],["Valencia",41],["Palencia",39],["Porgugal",35],["Zaragoza",32],["Albacete",32],["Huesca",29],["Badajoz",28],["Europe Other",27],["Belgium",24],["Switzerland",20],["Granada",13],["Cáceres",11],["Huelva",9],["Málaga",8],["Austria",7],["Italy",7],["UK",6],["Valladolid",4],["Córdoba",3],["Murcia",2],["Egypt",1],["Ireland",1],["Finland",1],["Africa",1],["Denmark",1]],"caminos":[["Frances-Camino de",21303],["Portugues-Camino",6401],["Norte-Camino de",1484],["Via de la Plata",1230],["Primitivo-Camino",1225],["Ingles-Camino",979],["Muxia-Finisterre",87],["Otros caminos",57],["Camino de Invierno",16]]},"6":{"year":"2016","month":"6","pilgrims":39079,"gender":[["Hombre",20558],["Mujer",18521]],"transport":[["Pie",34645],["Bicicleta",4233],["Caballo",176],["Silla de ruedas",25]],"age":[["30 - 60",20880],["> 60",10061],["< 30",8138]],"motivation":[["Religioso y otros",19669],["Religioso",16632],["No religioso",2778]],"spanishFrom":[["Madrid",3035],["Andalucía",2271],["Cataluña",1544],["Comunidad Valenciana",1454],["Galicia",1029],["Castilla León",956],["Castilla la Mancha",724],["Pais Vasco",625],["Canarias",570],["Extremadura",394],["Asturias",377],["Murcia",368],["Aragón",304],["Baleares",152],["Cantabria",135],["Navarra",97],["La Rioja",60],["Otra",56],["Ceuta",24],["Melilla",9]],"byCountry":[["España",14184],["Italia",3747],["Alemania",3309],["Estados Unidos",3193],["Portugal",2157],["Francia",1744],["Irlanda",961],["Reino Unido",960],["Australia",797],["Brasil",780],["Canadá",743],["Holanda",702],["Corea",575],["Polonia",436],["Belgica",349],["México",345],["Argentina",338],["Austria",305],["Dinamarca",295],["Japón",274],["Suiza",207],["Colombia",199],["Suecia",176],["Nueva Zelanda",165],["República Checa",161],["Hungría",157],["Sudáfrica",130],["Finlandia",102],["Rusia",100],["Bulgaria",92],["Venezuela",84],["Eslovenia",83],["Eslovaquia",80],["Noruega",78],["Lituania",75],["China",72],["Rumania",70],["Puerto Rico",63],["Chile",54],["Taiwán",51],["Estonia",51],["Uruguay",50],["Singapur",45],["Ecuador",45],["Croacia",37],["Ucrania",32],["Israel",28],["Filipinas",26],["Perú",25],["Malasia",24],["Islandia",21],["Andorra",20],["Grecia",20],["Costa Rica",18],["Letonia",17],["Panamá",13],["Malta",11],["Rep. Dominicana",11],["Paraguay",11],["El Salvador",10],["Cuba",10],["Guatemala",9],["Luxemburgo",9],["Bolivia",8],["Armenia",8],["Jordania",8],["Turquía",7],["Swazilandia",6],["Indonesia",6],["India",5],["Namibia",5],["Honduras",5],["Islas Feroe",4],["Omán",4],["Bermudas",4],["Chipre",4],["Nicaragua",4],["Irán",3],["Sri Lanka",3],["Madagascar",3],["Moldavia",3],["Maldivas",3],["Líbano",3],["Kazajistán",3],["Albania",2],["Macedonia",2],["Eritrea",2],["Serbia",2],["Argelia",2],["Egipto",2],["Granada",2],["Gambia",2],["Haití",2],["Zimbabwe",2],["Cabo Verde",2],["Pakistán",2],["Sudán",2],["Bielorrusia",2],["Kenya",2],["Tuvalu",2],["Bangladesh",1],["Liechtensein",1],["Dominica",1],["Guinea Ecuatorial",1],["Angola",1],["Mauricio",1],["Ghana",1],["Jamaica",1],["Trinidad y Tobago",1],["Senegal",1],["Tailandia",1],["Marruecos",1]],"professions":[["Jubilados",7839],["Empleados",7704],["Estudiantes",5574],["Liberales",5403],["Tecnicos",4855],["Funcionarios",2396],["Profesores",1746],["Amas de Casa",1016],["Directivos",681],["Parados",631],["Obreros",411],["Artistas",343],["Sacerdotes",162],["Religiosas",136],["Agricultores",94],["Marinos",49],["Deportistas",38],["Oikoten",1]],"startingCities":[["Sarria",8993],["S. Jean P. Port",6246],["Oporto",2420],["León",1771],["Tui",1598],["Cebreiro",1311],["Ferrol",1165],["Oviedo - C.P.",1045],["Roncesvalles",1036],["Ponferrada",1016],["Irún",778],["Valença do Minho",733],["Le Puy",701],["Pamplona",691],["Astorga",606],["Resto Portugal",584],["Burgos",564],["Sevilla",468],["Lisboa",394],["Lugo - C.P.",353],["Francia - C.F.",330],["Ourense",284],["Vilafranca",268],["Triacastela",247],["Ponte de Lima",245],["Bilbao",225],["Santander",192],["Vega de Valcarce",168],["Holanda",165],["Porriño",152],["Resto C. León C.F.",147],["Barcelos",134],["Resto Asturias - C.N",130],["San Sebastián",128],["Baiona",125],["Ribadeo",123],["Fonsagrada - C.P.",119],["Logroño",119],["Gijón",119],["Samos",112],["Vilalba",108],["Madrid - C.F.",106],["Rates, S. Pedro",102],["Somport",99],["Vigo",98],["Resto Cantabria",97],["Avilés",95],["Resto Europa",84],["Alemania",84],["Salamanca",82],["Muxia",77],["Chaves-Portugal",69],["Hospital de Orbigo",68],["Braga",67],["Sahagún",65],["A Guarda",63],["Bélgica",62],["Lourdes",57],["Francia - C.N",57],["Zamora",54],["Oviedo - C.N.",50],["Guimaraes",48],["Madrid - V.P.",48],["Jaca",46],["Hendaya",45],["Vezelay",44],["Resto Asturias - C.P.",44],["Rabanal del Camino",44],["Resto País Vasco - C.N.",42],["Baamonde",40],["Resto Andalucia",37],["Puebla de Sanabria",37],["Suiza",35],["Viana do Castelo",34],["Arles",30],["Povoa de Varzim",29],["Frómista",28],["Esposende",27],["Mérida",27],["Finisterra",26],["Resto C. León - V.P.",25],["Com. Valenciana - O.C.",24],["Cáceres",22],["Navarra",22],["Puente la Reina",21],["Valencia O.C.",20],["Carrión de los Condes",20],["Allariz",19],["Granja de Moreruela",19],["París",19],["Coimbra",19],["Montserrat",19],["Castilla la Mancha otros",19],["Ponferrada. C.Inv.",18],["Mondoñedo",18],["Fatima",17],["Verín",16],["Tineo - C.P.",15],["Sto. Domingo de la Calzada",14],["Estella",14],["Granada",13],["Gudiña",12],["Cadavo",12],["Canfranc",12],["R.Pais Vasco C.F.",12],["Italia",12],["Cataluña - C.F.",12],["Zaragoza",11],["Barcelona",11],["Com. Valenciana - C.F.",11],["Resto Galicia",11],["Cast. la Mancha - C.F.",10],["Molinaseca",10],["Castilla La Mancha VP",10],["Lourenzá",9],["Resto de Extremadura",9],["Grandas de Salime - C.P.",8],["Austria",8],["Castrojeriz",8],["Aveiro",8],["Malaga",8],["Viseu",7],["Abadin",7],["Monforte de Lemos",7],["Reino Unido C.F.",6],["La Rioja",6],["Badajoz",5],["Xunqueira de Ambia",5],["Neda",5],["Laza",5],["Polonia",4],["Nájera",4],["Cataluña - O.C.",4],["Grado",4],["Murcia",4],["Salas",3],["Huelva",3],["Valladolid",3],["Córdoba",3],["Benavente",3],["XSan Sebastian",3],["Faro",3],["XLa Rioja",3],["Roma",3],["Chantada",2],["mirallos",2],["Reino Unido C.Ing",2],["Irlanda C. Ing",2],["Republica Checa",1],["Resto Africa",1],["Vegadeo",1],["Cruz de Ferro",1],["Sobrado",1],["Valcarlos",1],["XFonsagrada",1],["Dinamarca",1],["Betanzos",1],["Fonfría",1],["Silleda",1],["Rábade",1],["Covelo",1],["San Juan de Ortega",1]],"startingRegions":[["Lugo",11465],["France",7628],["Portugal",4844],["León",4207],["Pontevedra",2038],["Navarra",1785],["Asturias",1514],["A Coruña",1286],["Gipuzkoa",963],["Burgos",573],["Sevilla",505],["Ourense",368],["Cantabria",289],["Vizcaya",225],["Holland",165],["Madrid",154],["La Rioja",146],["Zamora",113],["Europe Other",84],["Germany",84],["Salamanca",82],["Porgugal",69],["Belgium",62],["Huesca",58],["Valencia",55],["Palencia",48],["Barcelona",46],["Badajoz",41],["Albacete",39],["Switzerland",35],["Cáceres",22],["Italy",15],["Granada",13],["Zaragoza",11],["Austria",8],["Málaga",8],["UK",8],["Murcia",4],["Poland",4],["Huelva",4],["Valladolid",3],["Córdoba",3],["Ireland",2],["Czech Republic",1],["Africa",1],["Denmark",1]],"caminos":[["Frances-Camino de",25620],["Portugues-Camino",6908],["Norte-Camino de",2271],["Primitivo-Camino",1603],["Via de la Plata",1288],["Ingles-Camino",1175],["Muxia-Finisterre",103],["Otros caminos",84],["Camino de Invierno",27]]},"7":{"year":"2016","month":"7","pilgrims":45483,"gender":[["Hombre",23001],["Mujer",22482]],"transport":[["Pie",42022],["Bicicleta",3379],["Caballo",66],["Silla de ruedas",16]],"age":[["30 - 60",22957],["< 30",17735],["> 60",4791]],"motivation":[["Religioso",21264],["Religioso y otros",20504],["No religioso",3715]],"spanishFrom":[["Andalucía",6388],["Madrid",5189],["Comunidad Valenciana",2663],["Cataluña",2347],["Castilla la Mancha",1496],["Castilla León",1460],["Galicia",1139],["Extremadura",1081],["Pais Vasco",1053],["Aragón",775],["Murcia",774],["Canarias",760],["Asturias",491],["Navarra",309],["Baleares",302],["Cantabria",241],["La Rioja",78],["Ceuta",65],["Otra",62],["Melilla",42]],"byCountry":[["España",26715],["Italia",3307],["Estados Unidos",2322],["Alemania",2033],["Portugal",1564],["Francia",1125],["Reino Unido",678],["Irlanda",602],["México",596],["Polonia",564],["Dinamarca",463],["Corea",443],["Australia",372],["Brasil",368],["Canadá",352],["Holanda",350],["Belgica",336],["Suecia",211],["República Checa",208],["Argentina",201],["Hungría",187],["Suiza",172],["Austria",171],["Colombia",169],["Japón",159],["Noruega",126],["Eslovaquia",125],["Chile",107],["Rusia",102],["Sudáfrica",99],["China",93],["Lituania",92],["Nueva Zelanda",71],["Venezuela",70],["Rumania",65],["Eslovenia",63],["Finlandia",62],["Croacia",56],["Bulgaria",48],["Estonia",47],["Perú",37],["Andorra",36],["Taiwán",35],["Uruguay",29],["Ecuador",29],["Puerto Rico",28],["Israel",26],["Filipinas",25],["Malta",24],["Ucrania",20],["Costa Rica",20],["Letonia",19],["Rep. Dominicana",14],["Cuba",12],["Grecia",12],["Nicaragua",12],["India",12],["Panamá",11],["Indonesia",10],["Singapur",9],["Maldivas",8],["Honduras",8],["Luxemburgo",8],["Serbia",8],["Bielorrusia",7],["Malasia",7],["Paraguay",7],["Islandia",6],["Bolivia",6],["Egipto",6],["Chipre",6],["Marruecos",6],["Armenia",5],["Líbano",5],["El Salvador",4],["Camerún",4],["San Marino",4],["Angola",3],["Bosnia",3],["Guatemala",3],["Turquía",3],["Burkina Faso",2],["Siria",2],["Trinidad y Tobago",2],["Moldavia",2],["Túnez",2],["Swazilandia",2],["Lesotho",2],["Sudán",2],["Mali",2],["Irán",2],["Yugoslavia",2],["Tailandia",2],["Islas Feroe",2],["Palau",1],["Kuwait",1],["Vietnam",1],["Afganistán",1],["Emiratos Arabes Unidos",1],["Groenlandia",1],["Albania",1],["Kenya",1],["Urbekistán",1],["Montenegro",1],["Timor Oriental",1],["Ghana",1],["Namibia",1],["Mónaco",1],["Omán",1],["Costa de Marfil",1],["Sierra Leona",1],["Haití",1],["Comores",1],["Arabia Saudita",1],["Kazajistán",1],["Nepal",1],["Nigeria",1],["Djibouti",1],["Rwanda",1],["Madagascar",1]],"professions":[["Estudiantes",13984],["Empleados",8227],["Liberales",5307],["Profesores",4894],["Tecnicos",4009],["Jubilados",3256],["Funcionarios",2567],["Amas de Casa",857],["Parados",670],["Directivos",393],["Artistas",345],["Obreros",335],["Sacerdotes",272],["Religiosas",156],["Agricultores",137],["Deportistas",39],["Marinos",29],["Oikoten",6]],"startingCities":[["Sarria",11957],["S. Jean P. Port",4179],["Tui",3108],["Oporto",2180],["Cebreiro",2147],["Ferrol",1835],["León",1750],["Ponferrada",1405],["Astorga",1295],["Oviedo - C.P.",1154],["Valença do Minho",1126],["Roncesvalles",879],["Irún",784],["Ourense",682],["Vilalba",600],["Lugo - C.P.",552],["Pamplona",501],["Burgos",418],["Triacastela",417],["Le Puy",407],["Ribadeo",404],["Vilafranca",376],["Resto Asturias - C.N",306],["Ponte de Lima",302],["Lisboa",281],["Francia - C.F.",271],["Gijón",241],["Resto Portugal",241],["Samos",234],["Bilbao",230],["Vigo",216],["Santander",212],["Sevilla",196],["Resto C. León C.F.",190],["Baamonde",185],["Laza",181],["Fonsagrada - C.P.",148],["Neda",147],["San Sebastián",131],["Avilés",123],["Resto de Extremadura",115],["Logroño",111],["Lourenzá",103],["Porriño",101],["Viana do Castelo",101],["Barcelos",101],["Cruz de Ferro",94],["Holanda",85],["Abadin",84],["Madrid - C.F.",71],["Oviedo - C.N.",71],["Bélgica",67],["A Guarda",66],["Somport",64],["Alemania",64],["Braga",62],["Salas",62],["Baiona",61],["Zamora",60],["Resto Europa",60],["Vega de Valcarce",60],["Resto Cantabria",59],["Rábade",58],["París",55],["Sahagún",54],["Resto País Vasco - C.N.",50],["Finisterra",48],["Resto Asturias - C.P.",47],["Puebla de Sanabria",44],["Xunqueira de Ambia",43],["Salamanca",42],["Grandas de Salime - C.P.",42],["Monforte de Lemos",40],["Lourdes",39],["Molinaseca",39],["Chaves-Portugal",39],["Carrión de los Condes",38],["Coimbra",38],["Francia - C.N",37],["Vezelay",37],["Rates, S. Pedro",37],["Cadavo",35],["Resto Andalucia",34],["Hendaya",34],["Suiza",33],["Puente la Reina",33],["Ponferrada. C.Inv.",32],["Verín",30],["Hospital de Orbigo",27],["Cataluña - C.F.",27],["Frómista",26],["Muxia",25],["Valencia O.C.",25],["Mondoñedo",23],["Jaca",22],["Tineo - C.P.",21],["Estella",20],["Rabanal del Camino",19],["Montserrat",19],["Com. Valenciana - O.C.",18],["Gudiña",18],["Sto. Domingo de la Calzada",18],["Resto C. León - V.P.",18],["Madrid - V.P.",18],["Navarra",17],["Fatima",16],["Esposende",16],["Com. Valenciana - C.F.",15],["Granja de Moreruela",15],["Arles",15],["Austria",12],["Mérida",12],["Italia",11],["Cast. la Mancha - C.F.",11],["La Rioja",10],["Cáceres",10],["Barcelona",10],["Aragón",10],["Huelva",9],["Povoa de Varzim",9],["Faro",9],["Zaragoza",8],["Canfranc",8],["Resto Galicia",8],["Castilla La Mancha VP",8],["R.Pais Vasco C.F.",8],["Grado",8],["Castilla la Mancha otros",7],["Viseu",7],["XSan Sebastian",7],["Granada",6],["Nájera",5],["Badajoz",5],["Quiroga",5],["Castrojeriz",5],["Roma",4],["Cataluña - O.C.",4],["Polonia",4],["Dinamarca",4],["La Mesa",3],["Chantada",3],["Guitiriz",3],["Allariz",3],["Vilabade",3],["Guimaraes",3],["Córdoba",3],["Benavente",2],["Las Médulas",2],["mirallos",2],["Republica Checa",2],["Fonfría",2],["Valladolid",2],["Murcia",2],["A Rúa",2],["Sobrado dos Monxes",1],["Reino Unido C.F.",1],["Jaén",1],["Ortigueira",1],["Betanzos",1],["Andorra",1],["Sobrado",1],["San Juan de Ortega",1],["Luxemburgo",1],["Leyre",1],["Peñaseita",1],["Inglaterra C.F.",1],["Irlanda C.F.",1]],"startingRegions":[["Lugo",16947],["León",5361],["France",5138],["Portugal",4513],["Pontevedra",3552],["Asturias",2079],["A Coruña",2067],["Navarra",1451],["Gipuzkoa",980],["Ourense",975],["Burgos",424],["Cantabria",271],["Sevilla",230],["Vizcaya",230],["La Rioja",144],["Badajoz",132],["Zamora",121],["Madrid",89],["Holland",85],["Belgium",67],["Huelva",67],["Germany",64],["Palencia",64],["Europe Other",60],["Barcelona",60],["Valencia",58],["Salamanca",42],["Porgugal",39],["Switzerland",33],["Huesca",30],["Albacete",26],["Zaragoza",18],["Italy",15],["Austria",12],["Cáceres",10],["Granada",6],["Denmark",4],["Poland",4],["Córdoba",3],["Czech Republic",2],["Valladolid",2],["Murcia",2],["UK",2],["Jaén",1],["Andorra",1],["Luxembourg",1],["Ireland",1]],"caminos":[["Frances-Camino de",27774],["Portugues-Camino",8081],["Norte-Camino de",3748],["Primitivo-Camino",2077],["Ingles-Camino",1984],["Via de la Plata",1596],["Camino de Invierno",84],["Muxia-Finisterre",73],["Otros caminos",66]]},"8":{"year":"2016","month":"8","pilgrims":53712,"gender":[["Hombre",27899],["Mujer",25813]],"transport":[["Pie",48513],["Bicicleta",4963],["Caballo",222],["Silla de ruedas",14]],"age":[["30 - 60",31116],["< 30",18862],["> 60",3734]],"motivation":[["Religioso y otros",24268],["Religioso",24169],["No religioso",5275]],"spanishFrom":[["Andalucía",7783],["Madrid",5307],["Comunidad Valenciana",4736],["Cataluña",3713],["Castilla la Mancha",1847],["Castilla León",1464],["Murcia",1448],["Galicia",1433],["Pais Vasco",1065],["Extremadura",827],["Aragón",599],["Canarias",518],["Asturias",463],["Navarra",294],["Baleares",269],["Cantabria",185],["La Rioja",143],["Otra",68],["Ceuta",57],["Melilla",25]],"byCountry":[["España",32244],["Italia",7501],["Alemania",2376],["Portugal",2235],["Francia",1183],["Estados Unidos",864],["Polonia",710],["Reino Unido",578],["Irlanda",557],["Corea",411],["Holanda",374],["Belgica",319],["Dinamarca",275],["Canadá",271],["Australia",252],["República Checa",238],["Brasil",235],["Hungría",199],["Argentina",199],["Eslovaquia",194],["Austria",188],["México",184],["Rusia",134],["Colombia",131],["China",123],["Suiza",122],["Japón",115],["Eslovenia",101],["Venezuela",95],["Suecia",92],["Lituania",91],["Rumania",83],["Bulgaria",71],["Croacia",65],["Nueva Zelanda",64],["Taiwán",60],["Ecuador",57],["Chile",49],["Estonia",45],["Ucrania",41],["Sudáfrica",40],["Perú",39],["Uruguay",38],["Noruega",34],["Israel",31],["Paraguay",24],["Bolivia",22],["Finlandia",20],["Grecia",18],["Andorra",18],["Filipinas",17],["Puerto Rico",16],["Malta",15],["Bielorrusia",13],["Letonia",13],["India",13],["Malasia",12],["Guatemala",11],["Albania",10],["Rep. Dominicana",10],["Maldivas",9],["Serbia",8],["Turquía",8],["Luxemburgo",8],["Singapur",7],["Marruecos",7],["Cuba",7],["El Salvador",7],["Jordania",6],["Chipre",6],["Tuvalu",5],["Indonesia",5],["Islandia",5],["Panamá",5],["Armenia",5],["Tailandia",5],["Nicaragua",4],["Honduras",4],["Omán",4],["Egipto",4],["Túnez",3],["Líbano",3],["Islas Feroe",3],["Mozambique",2],["Nigeria",2],["Sierra Leona",2],["Guinea Ecuatorial",2],["Trinidad y Tobago",2],["Costa Rica",2],["Granada",2],["Surinam",2],["Moldavia",2],["Madagascar",2],["Antigua y Barbuda",1],["Bosnia",1],["Somalia",1],["Aruba",1],["Afganistán",1],["Zimbabwe",1],["Palau",1],["Gambia",1],["Comores",1],["Nepal",1],["Dominica",1],["Antillas Holandesas",1],["Emiratos Arabes Unidos",1],["Seychelles",1],["Irán",1],["Kuwait",1],["Macedonia",1],["Angola",1],["Georgia",1],["Costa de Marfil",1],["Swazilandia",1],["Vietnam",1],["Mongolia",1],["Kenya",1]],"professions":[["Estudiantes",12137],["Empleados",11285],["Liberales",9080],["Tecnicos",6356],["Profesores",5699],["Funcionarios",2569],["Jubilados",2376],["Amas de Casa",987],["Obreros",826],["Parados",673],["Directivos",536],["Artistas",489],["Sacerdotes",271],["Agricultores",176],["Religiosas",147],["Marinos",53],["Deportistas",44],["Oikoten",8]],"startingCities":[["Sarria",14936],["Tui",4027],["S. Jean P. Port",3942],["Oporto",2465],["León",2310],["Ferrol",2174],["Cebreiro",2096],["Ponferrada",1801],["Oviedo - C.P.",1755],["Valença do Minho",1542],["Roncesvalles",1408],["Irún",1075],["Astorga",846],["Ourense",779],["Lugo - C.P.",765],["Burgos",634],["Vilafranca",623],["Pamplona",583],["Ribadeo",484],["Resto Asturias - C.N",449],["Le Puy",403],["Triacastela",373],["Vilalba",366],["Bilbao",346],["Resto Portugal",318],["Resto C. León C.F.",314],["Samos",297],["Gijón",296],["Lisboa",283],["Ponte de Lima",276],["Santander",240],["Francia - C.F.",226],["Porriño",195],["Muxia",195],["Fonsagrada - C.P.",194],["San Sebastián",182],["Avilés",177],["Mondoñedo",171],["Vigo",159],["Sevilla",159],["Logroño",152],["Viana do Castelo",131],["Oviedo - C.N.",125],["Barcelos",124],["Abadin",107],["Somport",105],["Resto Asturias - C.P.",105],["Rates, S. Pedro",100],["Lourdes",95],["Rabanal del Camino",93],["Resto Cantabria",92],["Resto País Vasco - C.N.",89],["Grandas de Salime - C.P.",85],["Alemania",82],["Madrid - C.F.",76],["Holanda",75],["Baamonde",73],["A Guarda",70],["Braga",70],["Sahagún",70],["Zamora",61],["Francia - C.N",57],["Cadavo",56],["Guimaraes",55],["Coimbra",52],["Finisterra",50],["Bélgica",50],["Hendaya",49],["Gudiña",47],["Monforte de Lemos",46],["Salamanca",45],["Puebla de Sanabria",43],["Vega de Valcarce",42],["Frómista",40],["Esposende",40],["Baiona",40],["Hospital de Orbigo",38],["Cataluña - C.F.",34],["Chaves-Portugal",32],["Navarra",31],["Sto. Domingo de la Calzada",31],["Carrión de los Condes",31],["Lourenzá",30],["Montserrat",29],["Tineo - C.P.",28],["Granja de Moreruela",28],["Resto de Extremadura",27],["Castilla la Mancha otros",27],["Jaca",27],["Vezelay",27],["Resto C. León - V.P.",27],["Malaga",26],["Resto Andalucia",26],["Madrid - V.P.",26],["Resto Europa",24],["Com. Valenciana - O.C.",24],["Resto Galicia",23],["Suiza",22],["Ponferrada. C.Inv.",21],["R.Pais Vasco C.F.",21],["Fatima",20],["Allariz",19],["Puente la Reina",18],["París",17],["Cast. la Mancha - C.F.",17],["Neda",17],["Barcelona",16],["Estella",16],["Com. Valenciana - C.F.",15],["Castrojeriz",15],["Molinaseca",15],["Verín",14],["Salas",14],["Valencia O.C.",13],["Zaragoza",12],["Cáceres",11],["Fonfría",11],["Roma",11],["Valladolid",10],["Nájera",10],["Mérida",10],["San Juan de Ortega",10],["Castilla La Mancha VP",10],["Austria",9],["XFonsagrada",9],["Laza",9],["Povoa de Varzim",9],["Huelva",8],["Cataluña - O.C.",8],["Xunqueira de Ambia",8],["Viseu",8],["Italia",8],["XGrandas de Salime",7],["XSan Sebastian",7],["Irlanda C.F.",7],["La Rioja",6],["Grado",6],["Arles",5],["Benavente",5],["Aragón",5],["Vilabade",5],["Polonia",4],["Granada",4],["mirallos",4],["Canfranc",3],["Jaén",3],["Pardellas",3],["Córdoba",2],["La Mesa",2],["Republica Checa",2],["Badajoz",2],["Viveiro",1],["Aveiro",1],["Rábade",1],["Faro",1],["Covelo",1],["Inglaterra C.F.",1],["Grecia",1],["Borres",1],["Guitiriz",1],["Pontedeume",1],["Corredoiras",1],["O Barco de Valdeorras",1],["Luxemburgo",1],["Paradela",1],["Dinamarca",1],["Artieda",1],["",1]],"startingRegions":[["Lugo",20026],["León",6200],["Portugal",5455],["France",4926],["Pontevedra",4495],["Asturias",3050],["A Coruña",2461],["Navarra",2056],["Gipuzkoa",1374],["Ourense",917],["Burgos",659],["Vizcaya",346],["Cantabria",332],["La Rioja",199],["Sevilla",185],["Zamora",137],["Madrid",102],["Barcelona",87],["Germany",82],["Holland",75],["Palencia",71],["Albacete",54],["Valencia",52],["Belgium",50],["Salamanca",45],["Badajoz",39],["Porgugal",32],["Huesca",30],["Málaga",26],["Europe Other",24],["Switzerland",22],["Italy",19],["Zaragoza",18],["Cáceres",11],["Valladolid",10],["Austria",9],["Huelva",9],["Ireland",7],["Poland",4],["Granada",4],["Jaén",3],["Córdoba",2],["Czech Republic",2],["UK",1],["Greece",1],["Luxembourg",1],["Denmark",1],["City&nbsp;Was Blank",1]],"caminos":[["Frances-Camino de",32214],["Portugues-Camino",9987],["Norte-Camino de",4445],["Primitivo-Camino",3020],["Ingles-Camino",2192],["Via de la Plata",1441],["Muxia-Finisterre",245],["Otros caminos",99],["Camino de Invierno",68],["Otros caminos",1]]},"all":{"year":"2016","month":"","pilgrims":200263,"gender":[["Hombre",104384],["Mujer",95879]],"transport":[["Pie",182097],["Bicicleta",17523],["Caballo",550],["Silla de ruedas",93]],"age":[["30 - 60",109245],["< 30",58852],["> 60",32166]],"motivation":[["Religioso y otros",94665],["Religioso",89251],["No religioso",16347]],"spanishFrom":[["Andalucía",19857],["Madrid",17730],["Comunidad Valenciana",11609],["Cataluña",10240],["Galicia",5777],["Castilla León",5448],["Castilla la Mancha",5284],["Pais Vasco",3508],["Murcia",3092],["Extremadura",2814],["Canarias",2738],["Aragón",2158],["Asturias",1706],["Baleares",1236],["Navarra",871],["Cantabria",750],["La Rioja",371],["Otra",297],["Ceuta",190],["Melilla",86]],"byCountry":[["España",95762],["Italia",18332],["Alemania",14282],["Portugal",10184],["Estados Unidos",9808],["Francia",6336],["Irlanda",4391],["Reino Unido",3994],["Corea",3060],["Brasil",2667],["Australia",2598],["Holanda",2539],["Polonia",2365],["Canadá",2337],["Dinamarca",1717],["México",1589],["Belgica",1386],["Argentina",1274],["Austria",1145],["Suiza",933],["Japón",914],["República Checa",886],["Colombia",818],["Suecia",810],["Hungría",755],["Rusia",576],["Eslovaquia",545],["China",541],["Finlandia",504],["Nueva Zelanda",482],["Venezuela",450],["Sudáfrica",445],["Noruega",444],["Lituania",431],["Eslovenia",361],["Chile",336],["Rumania",327],["Bulgaria",294],["Ecuador",227],["Estonia",218],["Taiwán",218],["Uruguay",215],["Croacia",214],["Filipinas",183],["Puerto Rico",169],["Ucrania",166],["Perú",146],["Israel",128],["Andorra",118],["Malta",110],["Singapur",102],["Letonia",84],["Costa Rica",67],["Grecia",67],["Malasia",66],["Islandia",65],["Paraguay",59],["Panamá",59],["Luxemburgo",55],["Bolivia",53],["Rep. Dominicana",48],["India",40],["Indonesia",36],["Cuba",36],["Bielorrusia",34],["Turquía",34],["Guatemala",33],["El Salvador",31],["Armenia",31],["Chipre",29],["Nicaragua",27],["Maldivas",24],["Serbia",22],["Marruecos",22],["Honduras",21],["Jordania",19],["Líbano",19],["Albania",19],["Egipto",18],["Namibia",15],["Emiratos Arabes Unidos",14],["Tailandia",14],["Moldavia",14],["Swazilandia",13],["Omán",12],["Islas Feroe",11],["Tuvalu",10],["Túnez",9],["Sri Lanka",7],["Trinidad y Tobago",7],["Madagascar",7],["Kuwait",6],["Kazajistán",6],["Irán",6],["Angola",6],["Bosnia",6],["Nigeria",6],["Siria",5],["Kenya",5],["Zimbabwe",5],["San Marino",5],["Gambia",5],["Camerún",4],["Sudán",4],["Argelia",4],["Guinea Ecuatorial",4],["Pakistán",4],["Bermudas",4],["Macedonia",4],["Granada",4],["Antillas Holandesas",3],["Comores",3],["Afganistán",3],["Dominica",3],["Botswana",3],["Eritrea",3],["Cabo Verde",3],["Palau",3],["Haití",3],["Surinam",3],["Nepal",3],["Arabia Saudita",3],["Sierra Leona",3],["Mali",2],["Jamaica",2],["Ghana",2],["Aruba",2],["Burkina Faso",2],["Lesotho",2],["Groenlandia",2],["Yugoslavia",2],["Vietnam",2],["Costa de Marfil",2],["Somalia",2],["Mozambique",2],["Bangladesh",1],["Liechtensein",1],["Mauricio",1],["Camboya",1],["Senegal",1],["Rep. Centroafricana",1],["Guyana",1],["Barbados",1],["Irak",1],["Libia",1],["Mauritania",1],["Urbekistán",1],["Montenegro",1],["Timor Oriental",1],["Mónaco",1],["Samoa Occidental",1],["Mongolia",1],["Djibouti",1],["Rwanda",1],["Islas Malvinas",1],["Antigua y Barbuda",1],["Seychelles",1],["Georgia",1],["Palestina",1]],"professions":[["Estudiantes",40620],["Empleados",39733],["Liberales",29333],["Jubilados",23559],["Tecnicos",23450],["Profesores",15745],["Funcionarios",11276],["Amas de Casa",4232],["Parados",3029],["Directivos",2489],["Obreros",2377],["Artistas",1732],["Sacerdotes",988],["Religiosas",656],["Agricultores",604],["Marinos",219],["Deportistas",195],["Oikoten",26]],"startingCities":[["Sarria",52541],["S. Jean P. Port",21811],["Oporto",11945],["Tui",11232],["León",8643],["Cebreiro",7550],["Ferrol",7290],["Ponferrada",5918],["Oviedo - C.P.",5200],["Valença do Minho",5137],["Roncesvalles",4906],["Astorga",4017],["Irún",3369],["Pamplona",3053],["Burgos",2438],["Ourense",2414],["Lugo - C.P.",2413],["Le Puy",2348],["Resto Portugal",1760],["Vilafranca",1755],["Sevilla",1745],["Lisboa",1612],["Triacastela",1497],["Ponte de Lima",1349],["Francia - C.F.",1296],["Vilalba",1191],["Ribadeo",1185],["Resto Asturias - C.N",1132],["Bilbao",1031],["Samos",998],["Resto C. León C.F.",881],["Santander",834],["Gijón",803],["Vigo",718],["Porriño",714],["Logroño",578],["Barcelos",532],["Fonsagrada - C.P.",529],["San Sebastián",527],["Avilés",491],["Holanda",404],["Braga",387],["Rates, S. Pedro",385],["Alemania",379],["Baamonde",370],["Baiona",363],["Muxia",358],["Madrid - C.F.",343],["Viana do Castelo",334],["Somport",333],["Zamora",318],["Vega de Valcarce",308],["Oviedo - C.N.",304],["Resto Cantabria",287],["Sahagún",283],["Salamanca",270],["A Guarda",267],["Resto Asturias - C.P.",246],["Abadin",243],["Mondoñedo",234],["Chaves-Portugal",232],["Lourdes",229],["Resto País Vasco - C.N.",228],["Resto Europa",218],["Bélgica",210],["Laza",202],["Puebla de Sanabria",200],["Francia - C.N",196],["Finisterra",188],["Neda",183],["Rabanal del Camino",182],["Grandas de Salime - C.P.",176],["Hendaya",168],["Resto C. León - V.P.",168],["Coimbra",166],["Resto Andalucia",166],["Lourenzá",163],["Resto de Extremadura",161],["Guimaraes",152],["Cadavo",152],["Hospital de Orbigo",151],["Vezelay",145],["Jaca",143],["Frómista",135],["Allariz",133],["Carrión de los Condes",121],["Suiza",116],["Madrid - V.P.",115],["Puente la Reina",113],["Esposende",109],["Gudiña",108],["Granja de Moreruela",107],["París",106],["Cruz de Ferro",104],["Cataluña - C.F.",103],["Monforte de Lemos",100],["Ponferrada. C.Inv.",99],["Navarra",96],["Montserrat",95],["Fatima",94],["Molinaseca",93],["Sto. Domingo de la Calzada",91],["Tineo - C.P.",91],["Com. Valenciana - O.C.",91],["Mérida",89],["Povoa de Varzim",88],["Salas",84],["Castilla la Mancha otros",82],["Com. Valenciana - C.F.",77],["Arles",75],["Verín",73],["Zaragoza",72],["Xunqueira de Ambia",71],["Valencia O.C.",68],["Rábade",62],["Estella",62],["Barcelona",60],["Cáceres",60],["Resto Galicia",53],["Cast. la Mancha - C.F.",51],["R.Pais Vasco C.F.",50],["Malaga",50],["Viseu",47],["Castrojeriz",42],["Italia",42],["Nájera",40],["Austria",39],["Granada",38],["Castilla La Mancha VP",36],["Huelva",35],["La Rioja",31],["Canfranc",26],["Cataluña - O.C.",26],["Grado",25],["Roma",23],["Aveiro",22],["Valladolid",21],["Faro",20],["XSan Sebastian",19],["Benavente",18],["Fonfría",16],["Polonia",16],["Quiroga",16],["San Juan de Ortega",16],["Badajoz",15],["Córdoba",15],["Aragón",15],["Reino Unido C.F.",13],["XFonsagrada",13],["La Mesa",11],["mirallos",9],["Irlanda C.F.",9],["Vilabade",9],["Murcia",9],["Dinamarca",8],["XGrandas de Salime",8],["Guitiriz",6],["Republica Checa",5],["Chantada",5],["Paradela",4],["Sobrado",4],["Jaén",4],["Covelo",4],["XLa Rioja",3],["Pardellas",3],["Hungría",3],["Luxemburgo",3],["Reino Unido C.Ing",3],["",3],["Irlanda C. Ing",3],["Betanzos",2],["Borres",2],["Resto Africa",2],["Valcarlos",2],["Egipto",2],["Pontedeume",2],["Vincios",2],["Leyre",2],["Las Médulas",2],["A Rúa",2],["Viveiro",2],["Inglaterra C.F.",2],["O Barco de Valdeorras",2],["Artieda",1],["Sobrado dos Monxes",1],["Silleda",1],["Ortigueira",1],["Andorra",1],["Peñaseita",1],["Lalín",1],["Vegadeo",1],["Grecia",1],["Corredoiras",1],["Finlandia",1]],"startingRegions":[["Lugo",69246],["France",26707],["Portugal",24030],["León",22604],["Pontevedra",13305],["Asturias",8575],["Navarra",8234],["A Coruña",8083],["Gipuzkoa",4193],["Ourense",3114],["Burgos",2496],["Sevilla",1911],["Cantabria",1121],["Vizcaya",1031],["La Rioja",743],["Zamora",643],["Madrid",458],["Holland",404],["Germany",379],["Barcelona",284],["Salamanca",270],["Badajoz",265],["Palencia",256],["Valencia",236],["Porgugal",232],["Europe Other",218],["Belgium",210],["Huesca",169],["Albacete",169],["Switzerland",116],["Huelva",97],["Zaragoza",88],["Italy",65],["Cáceres",60],["Málaga",50],["Austria",39],["Granada",38],["Valladolid",21],["UK",18],["Poland",16],["Córdoba",15],["Ireland",12],["Murcia",9],["Denmark",8],["Czech Republic",5],["Jaén",4],["City&nbsp;Was Blank",3],["Luxembourg",3],["Hungary",3],["Africa",2],["Egypt",2],["Finland",1],["Andorra",1],["Greece",1]],"caminos":[["Frances-Camino de",125528],["Portugues-Camino",37439],["Norte-Camino de",12887],["Primitivo-Camino",8944],["Ingles-Camino",7484],["Via de la Plata",6868],["Muxia-Finisterre",546],["Otros caminos",341],["Camino de Invierno",226]]}},"2004-2016":{"all":{"year":"9999","month":"","pilgrims":2324044,"gender":[["Hombre",1297197],["Mujer",1026847]],"transport":[["Pie",2007309],["Bicicleta",307731],["Caballo",8427],["Silla de ruedas",577]],"age":[["30 - 60",1306467],["< 30",694107],["> 60",323470]],"motivation":[["Religioso y otros",1109201],["Religioso",1051497],["No religioso",163346]],"spanishFrom":[["Madrid",229542],["Andalucía",192142],["Cataluña",154222],["Comunidad Valenciana",138992],["Galicia",128149],["Castilla León",85822],["Pais Vasco",64657],["Castilla la Mancha",59832],["Extremadura",33955],["Murcia",31549],["Aragón",27904],["Canarias",27734],["Asturias",25953],["Baleares",17914],["Navarra",15499],["Cantabria",12278],["La Rioja",6943],["Otra",3824],["Ceuta",1785],["Melilla",949]],"byCountry":[["España",1260290],["Alemania",178361],["Italia",171134],["Francia",99313],["Portugal",93949],["Estados Unidos",72116],["Reino Unido",35537],["Irlanda",34908],["Canadá",30604],["Holanda",29889],["Brasil",26343],["Polonia",22397],["Australia",22384],["Corea",21831],["Austria",21094],["Belgica",20302],["Dinamarca",16461],["Suiza",14478],["México",13564],["Suecia",11402],["Argentina",10094],["Hungría",9550],["República Checa",8639],["Japón",8639],["Noruega",8242],["Finlandia",7742],["Colombia",5827],["Venezuela",5584],["Eslovaquia",5564],["Sudáfrica",5411],["Eslovenia",4107],["Nueva Zelanda",4080],["Rusia",4008],["China",2643],["Rumania",2362],["Lituania",2302],["Chile",2280],["Uruguay",2141],["Ecuador",2113],["Bulgaria",1951],["Perú",1583],["Puerto Rico",1509],["Estonia",1506],["Israel",1370],["Andorra",1246],["Filipinas",1062],["Croacia",1046],["Ucrania",976],["Luxemburgo",924],["Taiwán",788],["Malta",783],["Letonia",689],["Islandia",642],["Bolivia",613],["Costa Rica",600],["Grecia",581],["Singapur",549],["Rep. Dominicana",527],["Cuba",447],["Paraguay",423],["Guatemala",409],["India",354],["Malasia",350],["El Salvador",312],["Líbano",300],["Panamá",291],["Marruecos",270],["Turquía",228],["Bielorrusia",216],["Honduras",181],["Indonesia",172],["Nicaragua",170],["Serbia",155],["Armenia",144],["Irán",131],["Islas Feroe",130],["Albania",129],["Chipre",104],["Argelia",103],["Moldavia",99],["Jordania",88],["Tailandia",87],["Namibia",72],["Vietnam",68],["Angola",66],["San Marino",65],["Bosnia",64],["Camerún",59],["Liechtensein",56],["Egipto",53],["Nigeria",52],["Emiratos Arabes Unidos",50],["Pakistán",49],["Cabo Verde",47],["Kenya",43],["Macedonia",39],["Sri Lanka",38],["Mozambique",35],["Dominica",33],["Guinea Ecuatorial",33],["Kazajistán",32],["Siria",31],["Trinidad y Tobago",30],["Zimbabwe",28],["Georgia",28],["Haití",28],["Mauricio",26],["Congo",26],["Swazilandia",26],["Jamaica",25],["Senegal",25],["Maldivas",25],["Túnez",24],["Brunei",22],["Ghana",22],["Omán",19],["Mauritania",19],["Antillas Holandesas",17],["Groenlandia",17],["Madagascar",17],["Botswana",17],["Mónaco",17],["Rwanda",16],["Timor Oriental",15],["Nepal",15],["Etiopía",15],["Guyana",14],["Arabia Saudita",14],["Tuvalu",13],["Bermudas",13],["Mongolia",13],["Guinea",12],["Myanmar",12],["Costa de Marfil",12],["Yugoslavia",12],["Libia",12],["Tanzania",12],["Irak",11],["Uganda",11],["Belice",11],["Kuwait",10],["Sudán",9],["Bangladesh",9],["Comores",9],["Togo",9],["Gambia",8],["Palestina",7],["Zambia",7],["Benin",7],["Gabón",7],["Azerbaiyán",6],["Bahamas",6],["Mali",6],["Santo Tomé y Príncipe",6],["Aruba",6],["Montenegro",6],["Sierra Leona",6],["Camboya",5],["Eritrea",5],["I. Reunión",5],["Afganistán",5],["Laos",5],["Urbekistán",5],["Vanuatu",5],["Granada",5],["Antigua y Barbuda",5],["Martinica",5],["Surinam",5],["Kirguistán",4],["Seychelles",4],["Tayikistán",4],["Qatar",4],["Guam",4],["Fiji",4],["Burkina Faso",4],["Barbados",3],["Malawi",3],["Papúa - Nueva Guinea",3],["Somalia",3],["Palau",3],["Lesotho",3],["Samoa Occidental",3],["Guinea - Bissau",2],["Islas Caimán",2],["Santa Lucía",2],["Islas Vírgenes",2],["Liberia",2],["Chad",1],["Rep. Centroafricana",1],["Djibouti",1],["Bhután",1],["Bahrein",1],["Nueva Caledonia",1],["Guayana Francesa",1],["Islas Malvinas",1],["Turkmenistán",1],["Herzegovina",1]],"professions":[["Empleados",483957],["Estudiantes",449769],["Liberales",281257],["Tecnicos",277780],["Jubilados",259432],["Profesores",170376],["Funcionarios",118466],["Obreros",91366],["Amas de Casa",65387],["Parados",47307],["Directivos",27043],["Artistas",19121],["Sacerdotes",13737],["Agricultores",7884],["Religiosas",5874],["Marinos",3100],["Deportistas",1933],["Oikoten",255]],"startingCities":[["Sarria",514857],["S. Jean P. Port",243937],["Cebreiro",140842],["León",123219],["Roncesvalles",120257],["Tui",106088],["Ponferrada",102470],["Oporto",74714],["Astorga",71531],["Pamplona",51474],["Ferrol",44848],["Burgos",44015],["Oviedo - C.P.",41975],["Le Puy",38881],["Valença do Minho",38028],["Vilafranca",36039],["Ourense",34085],["Irún",29236],["Sevilla",23485],["Triacastela",23244],["Resto Portugal",23156],["Francia",17613],["Lugo - C.P.",17517],["Samos",15507],["Ribadeo",14103],["Vilalba",12165],["Logroño",10925],["Santander",10499],["Somport",10469],["Resto C. León",10357],["Lisboa",9726],["Ponte de Lima",9619],["Resto Asturias",9390],["Bilbao",9253],["Holanda",8638],["Francia - C.F.",7841],["Alemania",7543],["Gijón",6600],["Oviedo",6391],["Resto Asturias - C.N",5921],["Salamanca",5647],["Resto C. León C.F.",5384],["Avilés",5335],["Sahagún",5288],["Neda",4874],["Madrid - C.F.",4748],["Zamora",4731],["Vigo",3940],["Mondoñedo",3936],["Fonsagrada - C.P.",3916],["Braga",3913],["Bélgica",3880],["Jaca",3803],["Porriño",3731],["Vega de Valcarce",3675],["Puebla de Sanabria",3496],["Resto País Vasco",3460],["Frómista",3450],["Resto Asturias - C.P.",3327],["Suiza",3282],["Finisterra",3177],["Resto Cantabria",3152],["San Sebastián",3079],["Lourdes",3038],["Rabanal del Camino",2905],["Mérida",2822],["Sto. Domingo de la Calzada",2726],["Rates, S. Pedro",2659],["Carrión de los Condes",2586],["Gudiña",2512],["Muxia",2510],["Puente la Reina",2484],["Barcelos",2472],["Arles",2433],["Chaves-Portugal",2367],["Baamonde",2354],["Oviedo - C.N.",2179],["Hospital de Orbigo",2140],["Vezelay",2130],["Hendaya",1863],["Resto C. León - V.P.",1662],["Laza",1658],["Abadin",1590],["Grandas de Salime - C.P.",1508],["Verín",1483],["Lourenzá",1470],["Resto Andalucia",1440],["Cataluña",1394],["",1342],["Granja de Moreruela",1330],["A Guarda",1306],["Resto País Vasco - C.N.",1301],["Estella",1297],["Zaragoza",1234],["Baiona",1232],["Resto Europa",1197],["Barcelona",1170],["Xunqueira de Ambia",1115],["Cáceres",1110],["Austria",1095],["Allariz",1058],["Cadavo",1024],["Viana do Castelo",1017],["Tineo - C.P.",1009],["R.Pais Vasco",999],["Guimaraes",983],["París",963],["Canfranc",957],["Francia - C.N",897],["Resto de Extremadura",894],["Montserrat",894],["Valencia",830],["Madrid",827],["Navarra",775],["Italia",765],["Coimbra",746],["Com. Valenciana",742],["Nájera",685],["Molinaseca",637],["Cataluña - C.F.",629],["Granada",626],["Fatima",610],["Castrojeriz",590],["Fonsagrada",568],["Castilla La Mancha",532],["Salas",498],["Madrid - V.P.",479],["Rábade",466],["Grandas de Salime",464],["Cruz de Ferro",448],["Valencia O.C.",444],["R.Pais Vasco C.F.",434],["Ponferrada. C.Inv.",419],["Povoa de Varzim",416],["Malaga",416],["Com. Valenciana - O.C.",410],["Com. Valenciana - C.F.",396],["Monforte de Lemos",385],["Huelva",359],["Tineo",354],["Vegadeo",341],["La Rioja",335],["Resto Galicia",326],["Córdoba",320],["Roma",308],["Murcia",302],["Castilla la Mancha",299],["Polonia",294],["Valladolid",293],["Cast. la Mancha - C.F.",286],["Castilla la Mancha otros",274],["Esposende",257],["Cast. la Mancha",248],["Badajoz",248],["Viseu",247],["Benavente",247],["Fonfría",222],["Grado",204],["Republica Checa",200],["Paradela",195],["Castilla La Mancha VP",194],["La Mesa",179],["San Juan de Ortega",169],["Reino Unido",167],["Cataluña - O.C.",139],["Valcarlos",126],["Faro",121],["Aveiro",114],["La Bañeza",110],["Ortigueira",101],["Dinamarca",100],["Vilabade",98],["San Sebastian",89],["Reino Unido C.F.",79],["Quiroga",76],["Vincios",76],["Irlanda",72],["Luxemburgo",71],["XFonsagrada",68],["Pontedeume",67],["A Rúa",66],["Inglaterra",56],["Hungría",50],["XSan Sebastian",46],["Viveiro",44],["Las Médulas",41],["Irlanda C.F.",39],["mirallos",35],["Eslovaquia",34],["Finlandia",34],["Guitiriz",34],["Chantada",34],["Covelo",30],["Andorra",28],["O Barco de Valdeorras",27],["Leyre",26],["XGrandas de Salime",23],["Resto Africa",20],["Peñaseita",19],["Borres",18],["Sobrado",17],["Jerusalem",17],["Betanzos",17],["Aragón",15],["Reino Unido C.Ing",14],["Guntín",14],["Gonzar",12],["Egipto",12],["Inglaterra C.F.",12],["Grecia",11],["Irlanda C. Ing",8],["XLa Rioja",8],["Petín",8],["Artieda",8],["Cea",7],["Rusia",7],["Pardellas",7],["El Escamplero",5],["Ventas de Narón",5],["Lalín",5],["Jaén",4],["Gándara",4],["Corredoiras",4],["Sobrado dos Monxes",4],["Puente de Domingo Flórez",4],["XTineo",3],["Silleda",3],["Mella",2]],"startingRegions":[["Lugo",754301],["León",366336],["France",330065],["Navarra",176439],["Portugal",168541],["Pontevedra",116422],["Asturias",85743],["A Coruña",55959],["Burgos",44774],["Ourense",42269],["Gipuzkoa",38644],["Sevilla",24925],["La Rioja",14679],["Cantabria",13651],["Zamora",9804],["Vizcaya",9253],["Holland",8638],["Germany",7543],["Madrid",6054],["Palencia",6036],["Salamanca",5647],["Huesca",4760],["Barcelona",4226],["Badajoz",3964],["Belgium",3880],["Switzerland",3282],["Valencia",2822],["Porgugal",2367],["Albacete",1833],["City&nbsp;Was Blank",1342],["Zaragoza",1257],["Europe Other",1197],["Cáceres",1110],["Austria",1095],["Italy",1073],["Huelva",825],["Granada",626],["Málaga",418],["UK",328],["Córdoba",320],["Murcia",302],["Poland",294],["Valladolid",293],["Czech Republic",200],["Ireland",119],["Denmark",100],["Luxembourg",71],["Hungary",50],["Finland",34],["Slovakia",34],["Andorra",28],["Africa",20],["Israel",17],["Egypt",12],["Greece",11],["Russia",7],["Jaén",4]],"caminos":[["Frances-Camino de",1672444],["Portugues-Camino",285201],["Norte-Camino de",137743],["Via de la Plata",95593],["Primitivo-Camino",71335],["Ingles-Camino",49965],["Muxia-Finisterre",5687],["Otros caminos",5640],["Camino de Invierno",436]]}}}
},{}],2:[function(require,module,exports){
"use strict";
var _ = require('lodash')

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var pData = require('../data/pData.json')
var mainContent = null
var mainSelect = null
var graphShowPercents = true
var graphMaxLines = 16
var graphInvert = true

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var allOrderableFalse = _.fill(new Array(15), {"orderable":false})
var options = [
  {tag:'by-month', title:'Month',
  //graph2:'by-month-counts.png',
  graph:'by-month-percents.png',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "pageLength": 15,
    "ordering": false
  }},
  {tag:'by-age', title:'Age', field:'age',
  //graph2:'by-age-counts.png',
  graph:'by-age-percents.png',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'by-gender', title:'Gender', field:'gender',
  //graph2:'by-gender-counts.png',
  graph:'by-gender-percents.png',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'by-country', title:'Country', field:'byCountry',
  //graph:'by-country-counts-reversed.png',
  //graph2:'by-country-counts.png',
  graph:'by-country-percents-reversed.png',
  //graph4:'by-country-percents.png',
  tableSpec:{
    "lengthMenu": [[15, 25, 50, 100, -1], [15, 25, 50, 100, "All"]],
    "language": { "lengthMenu": "Show _MENU_ lines per page" },
    "ordering": false
  }},
  {tag:'by-starting-city', title:'Started At', field:'startingCities',
  //graph:'by-starting-city-counts-reversed.png',
  //graph2:'by-starting-city-counts.png',
  graph:'by-starting-city-percents-reversed.png',
  //graph2:'by-starting-city-percents.png',
  tableSpec:{
    "lengthMenu": [[15, 25, 50, 100, -1], [15, 25, 50, 100, "All"]],
    "language": { "lengthMenu": "Show _MENU_ lines per page" },
    "ordering": false
  }},
  {tag:'by-starting-region', title:'Region', field:'startingRegions',
  //graph:'by-starting-region-counts-reversed.png',
  //graph2:'by-starting-region-counts.png',
  graph:'by-starting-region-percents-reversed.png',
  //graph2:'by-starting-region-percents.png',
  tableSpec:{
    "lengthMenu": [[15, 25, 50, 100, -1], [15, 25, 50, 100, "All"]],
    "language": { "lengthMenu": "Show _MENU_ lines per page" },
    "ordering": false
  }},
  {tag:'by-camino', title:'Camino', field:'caminos',
  //graph2:'by-camino-counts.png',
  graph:'by-camino-percents.png',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'by-transport', title:'Travel', field:'transport',
  //graph2:'by-transport-counts.png',
  graph:'by-transport-percents.png',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'by-reason', title:'Motivation', field:'motivation',
  tableSpec:{
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'by-profession', title:'Profession', field:'professions',
  tableSpec:{
    "pageLength": 20,
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
  {tag:'spanish-by-region', title:'Region', field:'spanishFrom',
  tableSpec:{
    "pageLength": 25,
    "lengthChange": false,
    "searching": false,
    "info": false,
    "paging": false,
    "ordering": false
  }},
]

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var makeSelect = function(idBase, label, afterLabel, items) {
  var html = ''
  if (label) html += `<span class="form-label">${label}</span>`
  html += `<select id="${idBase}" name="${idBase}" class="${idBase}">`
  items.forEach(function(item) {
    html += `<option ${item.selected?'selected ':''}value="${item.value}">${item.label}</option>`
  })
  html += '</select>'
  if (afterLabel) html += `<span class="form-label">${afterLabel}</span>`
  return $(html)
};

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var about = function() {
  var html = `
  <div class="results-div">

  <img src="./images/caminoMarker.png" class="pull-right in-text-img">

  <p><span class="list-item-title">What?</span>
  This site summarizes data from the
  <a href="https://oficinadelperegrino.com/en/statistics/" target="_blank">Pilgrim's Office data page</a>
  about pilgrims finishing the Camino de Santiago.
  </p>

  <p><span class="list-item-title">How?</span>
  Choose a table to look at from the selection box at the top of this page
  (it currently shows "About this site")
  </p>

  <p><span class="list-item-title">Why?</span>
  We created this site because we found it hard to get the statistics about
  Camino de Santiago pilgrims easily and quickly from the Cathedral de Santiago site.
  Since we started looking at the statistics,
  the Pilgrims's Office has taken over the site and it seems faster.
  Still, it is hard to compare years since you can only see one year or month at a time.
  We created this site to help with that.
  </p>

  <p><span class="list-item-title">Who?</span>
  This site was created by Charlie and Wynette.
  You can find links to the blogs for our three Caminos at our
  <a href="http://wynchar.com/" target="_blank">website</a>.
  You can contact us at cpcrowley@gmail.com.
  Please do so if you have any suggestions, questions, or corrections.
  </p>

  <p><span class="list-item-title">The Data:</span>
  The data used here are taken from the
  <a href="https://oficinadelperegrino.com" target="_blank">Pilgrim's Office</a> site.
  The actual statistics page is
  <a href="https://oficinadelperegrino.com/en/statistics/" target="_blank">here</a>.
  Note the statistics page is not in English despite the "en" in the URL.
  </p>

  <p><span class="list-item-title">Changes and Corrections:</span>
  You can help by sending in any changes you would like to see, or corrections, or typos, etc.
  </p>

  <p><span class="list-item-title">Technical Information: </span>
  Originally we collected the data as HTML and converted it to a JSON files.
  Recently the Pilgrim's Office converted the page into a web app that
  gets the data in JSON format from an HTTP POST request.
  This is how we get the raw JSON data. We combine that into a single JSON
  input file. This is read by the web page.
  The Github page for the web page and node.js data preparation programs is
  <a href="https://github.com/cpcrowley/Camino-de-Santiago-Pilgrim-Statistics" target="_blank">
  here</a>. The data files are in that Github repository.
  Or email us if you would like a copy of the JSON data.
  </p>

  <p><span class="list-item-title">Last updated</span>
  on September 30, 2016.
  </p>

  <hr>

  <h3>Observations about the statistics</h3>
  <img src="./images/outsideCastrjeriz.jpg" class="pull-right in-text-img">

  <p><span class="list-item-title">At the bottom of each table</span>
  At the bottom of each table are some observations about the data in that table.
  </p>

  <p><span class="list-item-title">Charts</span>
  Some pages have a graph of the data.
  </p>

  <p><span class="list-item-title">Years covered</span>
  The Pilgrims's Office publishes statistics starting in 2004.
  </p>

  <p><span class="list-item-title">Percentages</span>
  All percentages are rounded to the nearest whole percent.
  So a "1%" is really anything from 0.5% to 1.49% percent and a "0%"
  is really from 0.0% to 0.49%.
  So it can show 0% and the raw data might not be 0.
  </p>

  <p><span class="list-item-title">Totals</span>
  The total number of pilgrims is steadily increasing over the years.
  The total seems to be going up about 10% per year.
  The exceptions are on Holy Years.
  </p>

  <p><span class="list-item-title">Holy years</span>
  2004 and 2010 were <em>Holy Years</em> when the church allows more generous
  indulgences for walking the Camino. There are always many more pilgrims
  in Holy Years.
  </p>

  </div>
  `
  return html
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var footerDiv = function(tag) {
  var html = ''
  switch (tag) {
    case 'by-month':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">One month after starting</span>
    Pilgrims usually take about a month to finish the Camino so these
    ending times are about a month after the starting times.</li>

    <li><span class="list-item-title">High summer: July and August</span>
    These two months have about 40% of the completions.
    August is consistently the top month although it has been creeping
    down as the years go by and the Camino gets more and more popular.
    July is the the next most popular month.</li>

    <li><span class="list-item-title">Low summer: June and September</span>
    Each of these months is about 14% of the total.
    So the four summer months are almost 70% of the total.</li>

    <li><span class="list-item-title">Near summer: April, May and October</span>
    April is around 7%, May is around 12% and October around 10%.</li>

    <li><span class="list-item-title">Near Winter: March and November</span>
    Each of these is around 2%.</li>

    <li><span class="list-item-title">Winter: January, February and December</span>
    Each of these is around 1%.</li>

    </ul>

    </div>`
    break

    case 'by-age':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">The age ranges</span>
    These are the ranges that the Pilgrim's Office collects:
    Under 30, 30 to 60, and over 60.</li>

    <li><span class="list-item-title">Stability</span>
    The percentages are generally stable.
    The over-60 range is creeping up a little each year.</li>

    </ul>

    </div>`
    break

    case 'by-gender':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">Trends</span>
    The split is roughly equal with slightly more men: 52% to 48%.
    The split has been slowing trending towards equality over the years.</li>

    </ul>

    </div>`
    break

    case 'by-country':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">Spanish pilgrims</span>
    Close to 50% of the pilgrims come from Spain.</li>

    <li><span class="list-item-title">Germany</span>
    Germany got a "Hape Kerkeling bump" in the 2005-2009 and then settles
    down to around 8%.</li>

    <li><span class="list-item-title">USA</span>
    The bump of pilgrims from the USA from <em>The Way</em> moved the USA
    to from around 2% to around 5%.</li>

    <li><span class="list-item-title">Ireland</span>
    Ireland has more pilgrims than you would expect from their population.</li>

    <li><span class="list-item-title">Korea</span>
    Korea also has a lot of pilgrims considering how far Korea is from Spain.</li>

    </ul>

    </div>`
    break

    case 'by-camino':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">Camino Frances</span>
    This has always been the most popular but it has been slowly declining in
    percentage (but not total pilgrims) over the years as other
    Caminos get more popular.</li>

    <li><span class="list-item-title">Camino Portuguese</span>
    This has been slowly increasing over the years gaining on the Camino Frances.</li>

    <li><span class="list-item-title">Multiple Caminos</span>
    One might suspect that there is an increase in people walking a Camino
    multiple times. After walking the Camino Frances one or two times
    they are likely to try one of the other Caminos.
    But there are no statistics from the Pilgrim's Office indicating how
    many people have done multiple caminos.</li>

    </ul>

    </div>`
    break

    case 'by-starting-city':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">The data</span>
    These are the numbers and place name spelling directly from the
    Pilgrim's Office data. There are so many starting places that it is
    hard to conclude much from the data.</li>

    <li><span class="list-item-title">Sarria</span>
    Sarria is the most popular starting point: around 25% of pilgrims start
    there.  Sarria is the place to start on the Camino Frances if you want
    to walk 100 km and get a Compostela.</li>

    <li><span class="list-item-title">St. Jean P. Port</span>
    St. Jean is second with 12%.
    This is the accepted beginning point of a complete Camino Frances.</li>

    <li><span class="list-item-title">Oporto</span>
    Porto, Portugal, is a very popular place to start the Camino Portuguese.
    Tui, Spain, is the first town in Spain on the Camino Portuguese so is a popular starting place for an all-Spain Camino Portuguese.
    Together Porto and Tui add up to 10-12%.</li>

    <li><span class="list-item-title">Holy Years</span>
    In Holy years the percent starting in Sarria goes up and the
    percent starting in St. Jean goes down.</li>

    </ul>

    </div>`
    break

    case 'by-starting-region':
    html = `<a href="https://en.wikipedia.org/wiki/Provinces_of_Spain" target="_blank">
    Provinces of Spain</a>

    <ul>

    <li><span class="list-item-title">How this table is grouped</span>
    Since the city starting places are so numerous we decided to group
    by province (in Spain) or country (out of Spain).</li>

    <li><span class="list-item-title">León</span>
    León, the city, is 4% and the province is 10%.</li>

    <li><span class="list-item-title">Holy Years</span>
    In Holy years the percent starting in Lugo goes up and the
    percent starting in Frances goes down.</li>

    </ul>

    </div>`
    break

    case 'by-transport':
    html = `<div class="footer-div">

    <p><span class="list-item-title">Walking</span>
    Up from 80% to 90%.</li>
    </p>

    <p><span class="list-item-title">Wheelchair</span>
    2014 saw a big increase. It is not clear why this is.</li>
    </p>

    <p><span class="list-item-title">Titles</span>
    We left the titles as they come from the Pilgrim's Office data.
    </p>

    </div>`
    break

    case 'by-reason':
    html = `<div class="footer-div">

    <ul>

    <li>Pretty consistent over the years.
    The percent for religious reasons goes up in Holy years which makes sense.</li>
    </ul>

    </div>`
    break

    case 'by-profession':
    html = `<div class="footer-div">

    <p><span class="list-item-title">Categories:</span>
    We are from the United States and are not familiar with how professions are classified in Spain, or in Europe, so we don't fully understand these professional categories.  E.g., what is the difference between an "employee" and a "worker"?  We've done our best to translate the professions, but some may not be quite right.  We welcome your feedback!  cpcrowley@gmail.com</p>

    </div>`
    break

    case 'spanish-by-region':
    html = `<div class="footer-div">

    <ul>

    <li><span class="list-item-title">Overall</span>
    Not much surprising here. Numbers seem to be roughly in line with
    the populations of the regions.</li>

    <li><span class="list-item-title">Galicia in Holy Years</span>
    Normally the percentages don't change much from year to year,
    but the percent from Galicia in Holy years goes way up.
    I'm not sure why that would be.</li>

    </ul>

    </div>`
    break
  }
  return $(html)
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var countrySpanishToEnglish = {
  "Alemania":"Germany",
  "Afganistán":"Afghanistan",
  "Andorra":"Andorra",
  "Angola":"Angola",
  "Antigua y Barbuda":"Antigua & Barbuda",
  "Arabia Saudita":"Saudi Arabia",
  "Armenia":"Armenia",
  "Argelia":"Algeria",
  "Argentina":"Argentina",
  "Austria":"Austria",
  "Australia":"Australia",
  "Azerbaiyán":"Azerbaijan",
  "Belgica":"Belgium",
  "Bielorrusia":"Belarus",
  "Bolivia":"Bolivia",
  "Brasil":"Brazil",
  "Cabo Verde":"Cape Verde",
  "Camerún":"Cameroon",
  "Canadá":"Canada",
  "Chile":"Chile",
  "China":"China",
  "Chipre":"Cyprus",
  "Colombia":"Colombia",
  "Comores":"Comoros",
  "Corea":"Korea",
  "Costa de Marfil":"Ivory Coast",
  "Costa Rica":"Costa Rica",
  "Croacia":"Croatia",
  "Cuba":"Cuba",
  "Dinamarca":"Denmark",
  "Dominica":"Dominican Republic",
  "Ecuador":"Ecuador",
  "Egipto":"Egypt",
  "El Salvador":"El Salvador",
  "Emiratos Arabes Unidos":"U Arab Emirates",
  "Espana":"Spain",
  "España":"Spain",
  "Eslovaquia":"Slovakia",
  "Eslovenia": "Slovenia",
  "Estados Unidos":"USA",
  "Etiopia":"Ethiopia",
  "Filipinas":"Philippines",
  "Finlandia":"Finland",
  "Francia":"France",
  "Gabón":"Gabon",
  "Grecia":"Greece",
  "Groenlandia":"Greenland",
  "Guatemala":"Guatemala",
  "Haití":"Haiti",
  "Holanda":"Holland",
  "Holandesas":"Netherlands",
  "Hungría":"Hungary",
  "India":"India",
  "Indonesia":"Indonesia",
  "Irán":"Iran",
  "Irlanda":"Ireland",
  "Islandia":"Iceland",
  "Islas Feroe":"Faroe Islands",
  "Islas Malvinas":"Falkland Islands",
  "Israel":"Israel",
  "Italia":"Italy",
  "Japón":"Japan",
  "Jordania":"Jordan",
  "Kazajistán":"Kazakhstan",
  "Kirguistán":"Kyrgyzstan",
  "Letonia":"Latvia",
  "Líbano":"Lebanon",
  "Lituania":"Lithuania",
  "Luxemburgo":"Luxemburg",
  "Malasia":"Malaysia",
  "Martinica":"Martinique",
  "México":"Mexico",
  "Moldavia":"Moldavia",
  "Mónaco":"Monaco",
  "Nueva Caledonia":"New Caledonia",
  "Noruega":"Norway",
  "Nueva Zelanda":"New Zealand",
  "Omán":"Oman",
  "Pakistán":"Pakistan",
  "Panamá":"Panama",
  "Papúa - Nueva Guinea":"Papua New Guinea",
  "Paraguay":"Paraguay",
  "Perú":"Peru",
  "Polonia":"Poland",
  "Portugal":"Portugal",
  "Puerto Rico":"Puerto Rico",
  "Reino Unido":"UK",
  "Rep. Dominicana":"Dom. Rep.",
  "Rep. Centroafricana":"Central African Rep.",
  "República Checa":"Czech Rep.",
  "Roumania":"Romania",
  "Rumania":"Romania",
  "Rusia":"Russia",
  "Rumania":"Roumania",
  "Samoa Occidental":"Westrn Samoa",
  "Singapur":"Singapore",
  "Sierra Leona":"Sierra Leone",
  "Siria":"Syria",
  "Sudán":"Sudan",
  "Sudáfrica":"S. Africa",
  "Suecia":"Sweden",
  "Suiza":"Switzerland",
  "Swazilandia":"Swaziland",
  "Tailandia":"Thailand",
  "Taiwán":"Taiwan",
  "Timor Oriental":"East Timor",
  "Trinidad y Tobago":"Trinidad & Tobago",
  "Túnez":"Tunisia",
  "Turquía":"Turkey",
  "Ucrania":"Ukraine",
  "Urbekistán":"Uzbekistan",
  "Uruguay":"Uruguay",
  "Vanuatu":"Santo",
  "Venezuela":"Venezuela",
  "Bulgaria": "Bulgaria",
  "Estonia": "Estonia",
  "Malta": "Malta",
  "Nicaragua": "Nicaragua",
  "Honduras": "Honduras",
  "Marruecos": "Morocco",
  "Maldivas": "Maldives",
  "Namibia": "Namibia",
  "Serbia": "Serbia",
  "Albania": "Albania",
  "Sri Lanka": "Sri Lanka",
  "San Marino": "San Marino",
  "Madagascar": "Madagascar",
  "Bosnia": "Bosnia",
  "Tuvalu": "Tuvalu",
  "Kuwait": "Kuwait",
  "Bermudas": "Bermuda",
  "Gambia": "Gambia",
  "Nigeria": "Nigeria",
  "Zimbabwe": "Zimbabwe",
  "Kenya": "Kenya",
  "Macedonia": "Macedonia",
  "Eritrea": "Eritrea",
  "Botswana": "Botswana",
  "Palau": "Palau",
  "Guinea Ecuatorial": "Ecuatorial Guinea",
  "Antillas Holandesas": "Netherlands Antillas",
  "Jamaica": "Jamaica",
  "Nepal": "Nepal",
  "Granada": "Granada",
  "Ghana": "Ghana",
  "Burkina Faso": "Burkina Faso",
  "Lesotho": "Lesotho",
  "Mali": "Mali",
  "Yugoslavia": "Yugoslavia",
  "Barbados": "Barbados",
  "Surinam": "Surinam",
  "Irak": "Iraq",
  "Palestina": "Palestine",
  "Libia": "Libya",
  "Mauritania": "Mauritania",
  "Bangladesh": "Bangladesh",
  "Liechtensein": "Liechtenstein",
  "Mauricio": "Mauricio",
  "Camboya": "Cambodia",
  "Senegal": "Senegal",
  "Aruba": "Aruba",
  "Rwanda": "Rwanda",
  "Guyana": "Guyana",
  "Vietnam": "Vietnam",
  "Montenegro": "Montenegro",
  "Djibouti": "Djibouti",
  "Somalia": "Somalia",
  "Brunei": "Brunei",
  "Georgia": "Georgia",
  "Mozambique": "Mozambique",
  "Zambia": "Zambia",
  "Mongolia": "Mongolia",
  "Guam": "Guam",
  "Guinea": "Guinea",
  "Congo": "Congo",
  "Togo": "Togo",
  "Tanzania": "Tanzania",
  "Benin": "Benin",
  "Bahamas": "Bahamas",
  "Etiopía": "Etiopia",
  "Myanmar": "Myanmar",
  "Uganda": "Uganda",
  "I. Reunión": "Reunion Islands",
  "Laos": "Laos",
  "Fiji": "Fiji",
  "Santo Tomé y Príncipe": "Sao Tome & Principe",
  "Belice": "Belize",
  "Qatar": "Qatar",
  "Tayikistán": "Tayikistan",
  "Seychelles": "Seychelles",
  "Guinea - Bissau": "Guinea-Bissau",
  "Malawi": "Malawi",
  "Islas Caimán": "Cayman Islands",
  "Santa Lucía": "St. Lucia",
  "Chad": "Chad",
  "Bhután": "Bhutan",
  "Bahrein": "Bahrain",
  "Islas Vírgenes": "Virgin Islands",
  "Guayana Francesa": "French Guiana",
  "Liberia": "Liberia",
  "Turkmenistán": "Turkmenistan",
  "Herzegovina": "Herzegovina",
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var translateProfession = {
  "Estudiantes": "Students",
  "Empleados": "Employees",
  "Jubilados": "Retirees",
  "Liberales": "???",
  "Tecnicos": "Technical",
  "Profesores": "Teachers",
  "Funcionarios": "Civil Servants",
  "Amas de Casa": "Housewives",
  "Parados": "Unemployed",
  "Directivos": "Managers",
  "Obreros": "Workers",
  "Artistas": "Artists",
  "Sacerdotes": "Priests",
  "Religiosas": "Nuns",
  "Agricultores": "Farmers",
  "Marinos": "Sailers/Marines",
  "Deportistas": "Athletes",
  "Oikoten": `See <a href="https://newint.org/features/2012/07/01/redemption-road-pilgrimage/" target="_blank">
  here</a>`
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var translateTransport = {
  "Pie": "Walking",
  "Bicicleta": "Bicycle",
  "Caballo": "Horse",
  "Silla de ruedas": "Wheelchair",
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
module.exports = {
  about: about,
  graphShowPercents: graphShowPercents,
  graphMaxLines: graphMaxLines,
  graphInvert: graphInvert,
  translateProfession: translateProfession,
  translateTransport: translateTransport,
  countrySpanishToEnglish: countrySpanishToEnglish,
  makeSelect: makeSelect,
  footerDiv: footerDiv,
  pData: pData,
  mainContent: mainContent,
  mainSelect: mainSelect,
  options: options,
}

},{"../data/pData.json":1,"lodash":6}],3:[function(require,module,exports){
"use strict";
//console.log('PROCESS main.js')

var recomputePane = require('./recomputePane.js')
var globals = require('./globals.js')
var _ = require('lodash')

//------------------------------------------------------------------------------
// Run when the document is ready
//------------------------------------------------------------------------------
var docReady = function() {
  google.charts.load('current', {'packages':['corechart', 'line']});

  globals.mainContent = $('.main-content')
  var panel = $('<div class="form-div"></div>')
  globals.mainSelect = globals.makeSelect('by-what', '', '', [
    {label:'About this site', value:'about', selected:true},
    {label:'Month they completed the Camino', value:'by-month', selected:false},
    {label:'Age of pilgrims', value:'by-age', selected:false},
    {label:'Gender of pilgrims', value:'by-gender', selected:false},
    {label:'Which Camino they traveled', value:'by-camino', selected:false},
    {label:'Country of origin', value:'by-country', selected:false},
    {label:'Where they started by city', value:'by-starting-city', selected:false},
    {label:'Where they started by province or country', value:'by-starting-region', selected:false},
    {label:'Method of travel', value:'by-transport', selected:false},
    {label:'Reason for pilgrimage', value:'by-reason', selected:false},
    {label:'Profession of pilgrims', value:'by-profession', selected:false},
    {label:'Spanish pilgrims by region of residence', value:'spanish-by-region', selected:false},
  ]).on('change', recomputePane)
  $('.main-header').append(globals.mainSelect)
  globals.mainContent.append(panel)
  recomputePane()
}

$(docReady);

},{"./globals.js":2,"./recomputePane.js":4,"lodash":6}],4:[function(require,module,exports){
"use strict";
var _ = require('lodash')

var globals = require('./globals.js')
var shared = require('./shared.js')

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var recomputePane = function() {
  globals.mainContent.find('.results-div').remove()
  var tag = globals.mainSelect.val()

  if (tag === 'about') {
    globals.mainContent.append(globals.about())
    return
  }

  if (!globals.pData) return

  var currentOption = _.find(globals.options, function(option) {
    if (tag===option.tag) return option
  })
  if (!currentOption) {
    console.log(`no option match for "${tag}"`)
    currentOption = globals.options[1]
  }
  var isMonthOption = (currentOption.tag==='by-month')
  var isByRegion = (currentOption.tag==='by-starting-region')
  var isByTransport = (currentOption.tag==='by-transport')
  var isByProfession = (currentOption.tag==='by-profession')
  var isByAge = (currentOption.tag==='by-age')
  var isByCountry = (currentOption.tag==='by-country')
  var tableSpec = currentOption.tableSpec || {}

  //----------------------------------------------------------------------------
  //----------------------------------------------------------------------------
  var resultsDiv = $('<div class="results-div"><div>')

  //----------------------------------------------------------------------------
  // Generate the contents of all the cells
  // NOTE: We will generate the cell content one column at a time and then,
  // at the end, transpose the cell matrix. It is simpler to do this the way
  // we present the data.
  //----------------------------------------------------------------------------
  var cells = []
  var graphNumberData = []
  var graphPercentData = []
  var headerRows = 0
  var fullLabels = null

  var labels = isMonthOption ? shared.monthNames : combinedLabels(currentOption.field)

  if (isByAge) {
    // Rearrange so that "< 30" is first
    var temp = labels[1]
    labels[1] = labels[0]
    labels[0] = temp
  }

  function addNBSPtoY(s) {return s.replace(' y ', '&nbsp;y ')}
  function addNBSPtoAmpersand(s) {return s.replace(' & ', '&nbsp;&amp; ')}
  function removeDashs(s) {return s.replace(' - ', '- ')}

  var currentRow = [currentOption.title, 'All']
  var currentNumberRow = ['All']
  var currentPercentRow = ['All']
  var translation
  _.forEach(labels, function(label) {
    var printLabel = addNBSPtoY(removeDashs(label))
    var graphLabel = printLabel
    if (isByTransport) {
      translation = globals.translateTransport[label]
      if (translation) printLabel += `<br/>(${translation})`
    } else if (isByProfession) {
      translation = globals.translateProfession[label]
      if (translation) printLabel += `<br/>(${translation})`
    } else if (isByAge) {
      if (printLabel==='30- 60') {
        // Use a non-breaking hyphen
        printLabel = '30&#8209;60'
        graphLabel = '30-60'
      }
    } else if (isByCountry) {
      translation = globals.countrySpanishToEnglish[label]
      if (translation) printLabel += `<br/>(${translation})`
    } else if (printLabel==='León') {
      printLabel += ` <span style="visibility:hidden">Leon</span>`
    }
    currentRow.push(printLabel)
    currentNumberRow.push(graphLabel)
    currentPercentRow.push(graphLabel)
  })
  cells.push(currentRow)
  graphNumberData.push(currentNumberRow)
  graphPercentData.push(currentPercentRow)
  ++headerRows

  //----------------------------------------------------------------------------
  //----------------------------------------------------------------------------
  var extendedYears = ['2004-2016'].concat(shared.years)
  if (isMonthOption) extendedYears = shared.years

  _.forEach(extendedYears, function(year) {
    currentRow = []
    currentNumberRow = []
    currentPercentRow = []

    var yearLabel = '' + year
    if (year==='2016') yearLabel += ' (1-8)'
    currentRow.push(yearLabel)
    currentNumberRow.push(yearLabel)
    currentPercentRow.push(yearLabel)

    var yearTotal = globals.pData[year]['all'].pilgrims
    currentRow.push(numberWithCommas(yearTotal))
    var keys = labels
    if (isMonthOption) {
      keys = shared.monthsForYear(year)
    }

    _.forEach(keys, function(key) {
      var keyValue = 9999
      if (isMonthOption) {
        keyValue = globals.pData[year][key]['pilgrims']
      } else {
        var indexOfLabel = labels.indexOf(key)
        var pair = _.find(globals.pData[year]['all'][currentOption.field], function(p) {return p[0]===key})
        keyValue = pair ? pair[1] : 0
      }
      var cellPercent = Math.round(100*keyValue/yearTotal)
      var cellValue = (!keyValue) ? '&nbsp;' : numberWithCommas(keyValue)
      +  '<br/>' + cellPercent.toFixed(0) + '%'
      currentRow.push(cellValue)
      currentNumberRow.push(cellValue)
      currentPercentRow.push(cellPercent)
    })
    cells.push(currentRow)
    graphNumberData.push(currentNumberRow)
    graphPercentData.push(currentPercentRow)
  })

  // Transpose the array of equal-length arrays, a matrix
  cells = _.zip.apply(_, cells)
  if (globals.graphInvert) {
    graphNumberData = _.zip.apply(_, graphNumberData)
    graphPercentData = _.zip.apply(_, graphPercentData)
  }

  //----------------------------------------------------------------------------
  // Generate the html for the table
  //----------------------------------------------------------------------------
  var html = '<table class="table table-bordered table-striped">'

  _.forEach(cells, function(rowOfCells, rowIndex) {
    if (rowIndex === 0) html += '<thead>'
    if (rowIndex === 2) html += '</thead><tbody>'

    html += `<tr>`
    _.forEach(rowOfCells, function(cell, colIndex) {
      var td = (rowIndex===0 || colIndex<headerRows) ? 'th' : 'td'
      if (colIndex === 0) {
        td += ' class="text-align-left"'
      }
      html += `<${td}>${cell?cell:'&nbsp;'}</${td}>`
    })
    html += '</tr>'
  })

  html += '</tbody></table>';

  var totalsTable = $(html)
  var tableDiv = $('<div class="table-responsive"></div>').append(totalsTable)
  resultsDiv.append(totalsTable)
  resultsDiv.append(globals.footerDiv(currentOption.tag))
  var graphId = 'graph1'
  resultsDiv.append('<div id="' + graphId + '"></div>')
  globals.mainContent.append(resultsDiv)

  // Enable DataTable extension on the table, for paging
  totalsTable.dataTable(tableSpec)

  //----------------------------------------------------------------------------
  // Create the graph
  //----------------------------------------------------------------------------
  if (graphPercentData.length > globals.graphMaxLines) {
    graphPercentData = graphPercentData.slice(0, globals.graphMaxLines)
  }
  if (isByCountry) {
    graphPercentData.splice(1,1)
  }
  if (graphPercentData[0][0] === 'All') graphPercentData[0][0] = '';
  //console.log('graphPercentData', graphPercentData)
  var gd = _.zip.apply(_, graphPercentData)
  var data = new google.visualization.arrayToDataTable(gd);
  var chart
  if (true) {
    var chart = new google.charts.Line(document.getElementById(graphId))
  } else {
    var chart = new google.visualization.LineChart(document.getElementById(graphId))
  }
  chart.draw(data, {
    axes: {x: {0: {side: 'top'}}},
    legend: {position: 'bottom'},
    height: 600
  });
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var numberWithCommas = function(x) {return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var addIfUniqueIn = function(x,arr) {if (arr.indexOf(x) < 0) arr.push(x)}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
var  combinedLabels = function(fieldName) {
  var ret = []
  _.forEach(shared.years, function(year) {
    globals.pData[year]['all'][fieldName].forEach(function(pair) {addIfUniqueIn(pair[0], ret)})
  })
  return ret
}
module.exports = recomputePane

},{"./globals.js":2,"./shared.js":5,"lodash":6}],5:[function(require,module,exports){
"use strict";
//------------------------------------------------------------------------------
// This is shared between the node fetching functions and the web app.
//------------------------------------------------------------------------------

var years = ['2016', '2015', '2014', '2013', '2012', '2011', '2010',
'2009', '2008', '2007', '2006', '2005', '2004']
var months = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']
var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

var monthsForYear = function(year) {
  if (year === '2016') return months.slice(0,8)
  return months
}

module.exports = {
  years: years,
  months: months,
  monthNames: monthNames,
  monthsForYear: monthsForYear,
}

},{}],6:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash <https://lodash.com/>
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.14.1';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for function metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', ARY_FLAG],
    ['bind', BIND_FLAG],
    ['bindKey', BIND_KEY_FLAG],
    ['curry', CURRY_FLAG],
    ['curryRight', CURRY_RIGHT_FLAG],
    ['flip', FLIP_FLAG],
    ['partial', PARTIAL_FLAG],
    ['partialRight', PARTIAL_RIGHT_FLAG],
    ['rearg', REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array ? array.length : 0;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a cache value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to stub `Date#getTime` use in `_.now`.
   * var stubbed = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': stubGetTime };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype,
        stringProto = context.String.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        iteratorSymbol = Symbol ? Symbol.iterator : undefined,
        objectCreate = context.Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

    /** Built-in method references that are mockable. */
    var clearTimeout = function(id) { return context.clearTimeout.call(root, id); },
        setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetPrototype = Object.getPrototypeOf,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReplace = stringProto.replace,
        nativeReverse = arrayProto.reverse,
        nativeSplit = stringProto.split;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(context.Object, 'create');

    /* Used to set `toString` methods. */
    var defineProperty = (function() {
      var func = getNative(context.Object, 'defineProperty'),
          name = getNative.name;

      return (name && name.length > 2) ? func : undefined;
    }());

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      var index = length;
      while (index--) {
        var key = props[index],
            predicate = source[key],
            value = object[key];

        if ((value === undefined &&
            !(key in Object(object))) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      return objectToString.call(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return object != null &&
        (hasOwnProperty.call(object, key) ||
          (typeof object == 'object' && key in object && getPrototype(object) === null));
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    var baseKeys = overArg(nativeKeys, Object);

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      if (!(isArray(source) || isTypedArray(source))) {
        var props = keysIn(source);
      }
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
          else {
            newValue = objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property identifiers to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property identifiers to pick from.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, props, predicate) {
      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[toKey(last(path))];
            }
          }
          else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]);
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null
                ? (isIndex(path[index + 1]) ? [] : {})
                : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);

      var key = toKey(last(path));
      return !(object != null && baseHas(object, key)) || delete object[key];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        assignValue(object, key, newValue === undefined ? source[key] : newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return baseRest(function(funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return baseRest(function(iteratees) {
        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(iteratees, 1), baseUnary(getIteratee()));

        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     *   512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!seen.has(othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                  return seen.add(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, customizer, bitmask, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a
     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
     * Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Gets the `[[Prototype]]` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {null|Object} Returns the `[[Prototype]]`.
     */
    var getPrototype = overArg(nativeGetPrototype, Object);

    /**
     * Creates an array of the own enumerable symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Creates an array of the own and inherited enumerable symbol properties
     * of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);

      var result,
          index = -1,
          length = path.length;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isString(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length,
          lastIndex = length - 1;

      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
      var source = (reference + '');
      return defineProperty(wrapper, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
      });
    };

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      string = toString(string);

      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length,
          args = Array(length ? length - 1 : 0),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return length
        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
        : [];
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. Result values
     * are chosen from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. Result values are chosen
     * from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (
          index < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1)
        ) + 1;
      }
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, index - 1, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = baseRest(function(array, indexes) {
      indexes = baseFlatten(indexes, 1);

      var length = array ? array.length : 0,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each
     * element is kept.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = baseRest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = baseClamp(toInteger(n), 0, length);
      }
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      if (isObjectLike(collection)) {
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    function now() {
      return Date.now();
    }

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one or more milliseconds.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = baseRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = baseRest(function(func, indexes) {
      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, false, true);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element,
     *  else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) || isFunction(value.splice) ||
            isArguments(value) || isBuffer(value))) {
        return !value.length;
      }
      if (isObjectLike(value)) {
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return !(nonEnumShadows && keys(value).length);
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object,
     *  else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) ||
        (typeof value.message == 'string' && typeof value.name == 'string');
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number,
     *  else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array and weak map constructors,
      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length,
     *  else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`
     * and is equivalent to `_.matches` when `source` is partially applied.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error('This method is not supported with core-js. Try https://github.com/es-shims.');
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object,
     *  else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) ||
          objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer,
     *  else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = baseRest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable string keyed properties of `object` that are
     * not omitted.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = baseRest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = baseRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the
     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (separator == '' && reHasComplexSymbol.test(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return nativeSplit.call(string, separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = baseRest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        key = toKey(key);
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function supports comparing the same values as
     * `_.isEqual` is equivalent to `_.isMatch` with `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
